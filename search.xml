<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[补记 MIGS 2016 上的演讲见闻]]></title>
      <url>%2F2017%2F01%2F15%2Fmigs-2016%2F</url>
      <content type="text"><![CDATA[最近一次的蒙特利尔国际游戏峰会 MIGS 2016过去一阵子了，只有 3 岁的 MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还是有些有用的技术演讲，在此追记一下自己去过那几场的要点，主要是音频专场。 Leonard Paul “PROCEDURAL GAME AUDIO WITH PURE DATA” Leonard Paul 是一位独立游戏音频设计师和教师，他开的 School of Video Game Audio 也小有名气。这次的演讲中他以 Unity 示例游戏作为蓝本介绍了用 Pure Data（PD）实现 procedural audio（下称 PA）音频设计一些可能性。会后他还发布了这次演讲的幻灯和录音。 在这个例子中 Leonard 展示了几个 PD patch。通过自己设计的 OSC（Open Sound Control）消息让这些 patch 和 Unity 端 C# 实现的OSC 模块通信，实现了一条音频原型迭代的管线：在 PD 中创建和修改设计，通过 OSC 来实现游戏运行中试听和调整混音等。演示的声音大多采用简单的加法／减法／模态（Modal）合成方法，坦克碰撞声采用了 Karplus-Strong 算法。 关于 PD 生态的现状，Leonard 说 libpd 的性能还达不到游戏要求的实时性，但 Enzien Audio 的 Heavy 系统的性能很有希望。目前 Heavy 支持大部分 PD 的对象，只有极少数关键对象比如 expr～ 不支持。 不过 Leonard 也表示使用 PA 有一些注意事项： 不应该为 PA 而 PA。从审美上不是所有的游戏都适合 PA，演讲采用的坦克游戏碰巧是美式动漫风，所以适合用常用的合成技术表现； 用 PA 做声音只是音频设计流程中的一方面，走这条路还需要自己实现通信协议、混音器、voice 控制，性能优化这些操作； 同一个功能可能有不同品质和性能代价的算法实现，可以考虑根据实时性能的波动在不同算法实现中切换以达到最优性价比； Heavy 这样的 PA 系统性能虽有进步，但仍然有不稳定而崩溃的现象； 在大型项目中还是应以中间件为出发点。 感想：利用创意编程工具实现 PA 目前还是一个技术性很强的领域，Leonard 自我介绍时强调自己的编程背景并已经有 20 多年使用 Max（90 年代初还没有 MSP）和 PD 的经验也侧面佐证了这一点。 RJ Mattingly “MAKING THE SHARPEST GAME AUDIO TOOLS IN THE SHED” RJ Mattingly 是 PopCap 的技术声音设计师。PopCap 现在全面采用 Unity + Wwise 的音频开发流程，在演讲中他介绍了为优化 PopCap 内部工作流程写的一些小脚本工具，基本都用 Python 语言实现。 SoundBank 管线工具PopCap 的 SoundBank 处理管线见上图。 他们早期基于 Perforce 的流程中声音设计师不但提交 Wwise 工程文件，还提交 SoundBnak。这样一来因为 SoundBank 是团队共享的，所以容易出现冲突。RJ 的第一个显而易见的改进便是规定设计师不提交 SoundBank（设计产物），而只提交代表设计本身的工程文件，并在 Jenkins 管线中通过脚本使用 Wwise 自带的命令行工具生成唯一一份 SoundBank，既解决了冲突问题还省了空间。 在生成 SoundBank 前忘了向 SoundBank 中添加必要的文件或者多个 SoundBank 中有重复的音频源文件是常见的人为错误，但数据量大起来有时出错几个礼拜之后才会发现。RJ 因此利用 Wwise 中 SoundBank 生成的后处理 post-generation step 写了一个脚本来分析 Wwise 自动生成的日志，找到与缺少和重复文件相关的信息，并自动群发邮件。这样一来，错误一般都能当天发现并修正。 Event 工具在性能优化上，Wwise 中虽然有最大复音数限制机制，但有些时候会想从事件级别来做限制，比如三消游戏《Bejeweled》系列中的爆炸如不加限制会引爆上百个事件。RJ 于是把 Wwise 事件下的 Notes 这个属性当作标签字段来用，因为属性保存在事件所在的 WorkUnit（.wwu）文件中，于是他写了一个脚本工具在 Notes 中加入自定义的事件限制编码，设计师也可以在 Wwise 中进一步手动调整，然后工具会分析 .wwu 生成游戏程序可以读取的 metadata 作为事件限制的参考数据。 动画配声用的工具在《Plants vs. Zombies: Heroes》中有 300 多个角色，每个角色有 5-20 个动画序列，所以手工配声工作量巨大。于是 RJ 写了一个 Unity UI 拓展能够改进这个流程，并能够自动比较 Unity 端登记的动画 Event 和 Wwise Authoring 端的 Event，保证 Unity 端登记的事件确实存在。 设计师往往喜欢把 Unity 的动画导出成视频文件然后到 DAW 中配声，但 Unity 没有这种导出支持。于是 RJ 写了工具自动导出动画成视频，方法是：将动画帧自动截屏成图片，再用开源命令行工具 ffmpeg 将这些图片批量组装成视频文件。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[第一天]]></title>
      <url>%2F2016%2F12%2F25%2FHello-Hexo-%E4%BD%A0%E5%A5%BD-Hexo%2F</url>
      <content type="text"><![CDATA[为什么开博？和广大技术博客动机类似吧：更好地学习和交流心得。 选择 GitHub 的理由？为什么不用第三方服务呢？ 网络写作平台寿命短。多年来博客服务走马灯地换，跟团的结果就是周期性搬家和断链。所以有必要自己把握本地内容和一套客户端发布工具，将来有变时就只用适配发布平台而不用担心保护内容了。 第三方平台功能流程局限。传统发布平台依赖在线操作，迭代不方便，微信公众号还增加了很多限制比如刊物不能改名。程序员出身的我总想本地编辑测试、版本控制、迭代发布，并且琢磨出一键流程，让精力能完全集中在内容上。 GitHub 这类代码托管网站支持按照软件开发流程来管理博客，通过纯文本标记格式比如 Markdown 写作存为本地文件，再通过 GitHub Pages 这类系统发布，这种肥本地、瘦远程的流程容易迭代和备份，可以把握内容，定制管线，未来迁移会很方便。 用什么工具发布？GitHub Pages 只是一个空架子，理想的流程中还需要找到静态站点生成器来搭建内容管理和发布的管线（相对的动态站点因为依赖服务器端操作可以不考虑），目标是能集中写作。 我对工具的要求： 支持 Markdown 写作。 上手快。 迭代速度快。 于是断断续续测试了几个工具，终于落户到了 Hexo 上。个人对 Jekyll、Hugo ，GitBook 和 Hexo 的比较（此时此地调查的结论，未来发展恕不考虑）： Jekyll 优点：历史悠久，GitHub Pages 官方推荐的生成器，支持文档很多。 缺点：操作繁琐，GitHub 页面生成速度慢，不易调试。 结论：流程中太多技术细节。不采用。 我跟着一个点击率较高的 Jekyll 的教程，一开始照做没有成功，开始以为是我太小白，后来发现发一篇 Hello World 帖子居然花了 10 分钟才在 GitHub 远程更新完毕，之前会一直是 404。因为这个差点影响了对 GitHub 平台本身的信心。 Hugo 优点：支持 Markdown 写作，生成速度快，流程比 Pages 有所改善。 缺点：操作繁琐，本地和远程发布的 UX 没有理顺，文档很不足。 结论：上手不易，流程还是有冗余。不采用。 Hugo 采用 GO 语言编写，卖点清晰（Make the Web Fun Again, Fast and Powerful 等等标语十分打眼），Google 上搜 Jekyll 替代品第一个出现就是它，立刻就被吸引住了。但跟随官方的2分钟上手教程以及补充的 GitHub 流程做了一遍却还是没能在 GitHub 发布成功（404），配套的 Youtube 视频也没有解释 GitHub 的部分。我感觉 Hugo 没有仔细考虑用户发布博客的流程中哪些地方最需要自动化，而哪些地方需要仔细定制。具体体现在：Hugo 中的本地内容源和发布（public）文件夹需要用户分开用两套 git 分支 来管理。然而，用户只应该操心写作端的版本控制，完成后一键发布即可。GitHub 端的发布分支如果是在软件开发流程中需要用户维护那是情理之中，而在博客流程中则是多余的，应该变为黑盒才对。而 Hugo 的设计恰恰相反。这样一来，用户端的发布动作就太繁琐了。想象一下 git 本来就精深的合并、分支、树结构操作要乘以 2 … 。更糟糕的是，文档也没有讲清楚例子中的 GitHub 端 repo 设置。结局是承诺两分钟搞定的上手示例（往 GitHub 发布 Hello World 页面），我用了两个小时，各种 google 搜索后不幸还是没有搞定。自己以后在日常工作中也要避免类似的用户体验问题。 GitBook 优点：支持 Markdown，对书籍发布和软件文档有较好支持，和传统文档格式互动方便（PDF, MS WORD, Open Office），与出版业接轨。 缺点：不是为博客而设计，博客流程不自然，主要支持手动 Web 发布。 结论：不采用。 因为有比较明显的缺点，虽然试都没试，不过如果有朝一日要发布系统研究成果且不需要大范围更新的话，GitBook 很合适。 Hexo 优点：支持 Markdown，生成速度快，本地-远程流程划分清晰。 缺点：资源替换不直观。 结论：采用。 在测试过的系统中，只有 Hexo 做到了两分钟发布成功 Hello World 帖子。它做到了一键发布并且在默认流程中没有任何 git 操作：new, generate, server, deploy 四个命令基本上可以解决创作、本地测试、远程发布的迭代。在定制自由度上，将源内容的版本控制完全交由用户管理，不做自动化。这些安排让我觉得设计者在 UX 方面很贴心。上手教程和其它教程也比较到位，顾及了本地和远程的细节。但缺点也不是没有，替换已发布图片素材这些操作还是要在目录树中手动找到文件。但跟核心流程的便利相比都是小事。 怎么写？哪怕有了全自定义的管线，估计我的更新还是会很慢。不求数量，只求质量。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F25%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
