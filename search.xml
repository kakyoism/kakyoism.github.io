<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[你好 Hexo]]></title>
      <url>%2F2016%2F12%2F25%2FHello-Hexo-%E4%BD%A0%E5%A5%BD-Hexo%2F</url>
      <content type="text"><![CDATA[为什么开博？为什么花力气自己在 GitHub 开这个博？原因有三。 教学相长我想学习工作之外的东西。但是闲暇的碎片式学习，如果不想办法系统整理很容易走马观花，人也不思而殆，时间实际上白花了。于是博客是我能想到的最可行的办法。 虽然 … Wisdom cannot be imparted. Wisdom that a wise man attempts to impart always sounds like foolishness to someone else … Knowledge can be communicated, but not wisdom. One can find it, live it, do wonders through it, but one cannot communicate and teach it.”― Hermann Hesse, Siddhartha 但是 … In learning you will teach, and in teaching you will learn.”– Phil Collins 不管有没有人访问，尽力让路人能看懂，才说明自己是真正理解了。 交流分享我期待碰巧路过的人对帖子或质疑或更正，思想碰撞后共同进步。每个人知道的东西在自己眼里哪怕再小再习以为常都有人可能正在踏破铁鞋无觅处。 传统第三方服务的缺陷网络发布平台的寿命无保障。多年来博客服务走马灯地换，博客大巴、MSN Space、Blogger、Wordpress、Tumblr、新浪轻博 … 要么被墙要么官方弃坑，但网络平台的现实就是用户得准备周期性搬家，周期性断链。关站前好点的会提醒备份，但备份结果迁移可能性很低，有的平台甚至直接关站。所以想找到能让自己把握内容的中介服务，可以随时切换发布平台。 第三方平台流程死板。大多数 Web 发布平台的发布流程都依赖在线操作，难以在本地验证，难以定制发布流程，难以版本控制和本地备份。程序员出身的我总想本地编辑测试、版本控制、迭代发布，并且琢磨出一键流程，让精力能完全集中在内容上。 微信公众号。公众号确实很好传播，并自带订阅和访问统计这些东西，但目前写作发布很不方便，本地写好的东西格式经常需要调整，接下来迭代就需要各种手机加电脑的操作。最让我头痛的是它不让改刊名这个设定，所以公众号作为末端发布多节点中的一个是很好的，但实在不方便快速迭代。 GitHub 这类代码托管网站给了技术人员开博的可能性，通过纯文本标记格式比如 Markdown 创建内容，再通过 GitHub Pages 这类系统发布，这种大半在本地、末端在远程的流程容易迭代和备份，内容完全控制在自己手里，未来迁移会很方便。 怎么开？理顺了“其事”，下一步便是“其器”即技术选型。GitHub Pages 只是一个空架子，目前适合个人站点的正道是找到静态站点生成器来管理所有管线方面内容（依赖服务器端操作的动态站点可以不考虑），保证在整个创作发布迭代流程中自己能集中写作。 我对工具的要求： 支持 Markdown 写作。 不需要编辑很多工具配置文件就能上手。 迭代速度快。 于是断断续续测试了几个工具，终于落户到了 Hexo 上。个人对 Jekyll、Hugo ，GitBook 和 Hexo 的比较（此时此地调查的结论，未来发展恕不考虑）： Jekyll 优点：历史悠久，GitHub Pages 官方推荐的生成器，支持文档很多。 缺点：操作繁琐，生成速度慢（Ruby），不易调试。 结论：流程中太多技术细节。不采用。 我跟着一个点击率较高的 Jekyll 的教程，一开始照做没有成功，开始以为是我太小白，后来发现发一篇 Hello World 帖子居然要花 10 分钟才能在 GitHub 远程更新完毕，之前会一直是 404。另外 Jekyll 自带主题对 Unicode （比如中文）的支持似乎不够完全，调试信息也不完整。看不到远程页面生成错误。更糟糕的是，当时因为也想顺带测试一下 GitHub 平台本身，结果因为 Jekyll 的体验严重影响了信心。 Hugo 优点：支持 Markdown 写作，生成速度快，流程比 Pages 有所改善，营销手段不错。 缺点：操作繁琐，本地和远程发布的 UX 没有理顺，文档很不足。 结论：上手不易，流程还是有冗余。不采用。 采用 21 世纪系统编程语言 GO 编写的 Hugo 的卖点非常清晰（Make the Web Fun Again, Fast and Powerful 等等标语十分打眼），我几乎是立刻就被吸引住了。但跟随官方的2分钟上手教程以及补充的 GitHub 流程做了一遍却还是没有在 GitHub 发布成功（404），配套的 Youtube 视频也没有解释 GitHub 的部分。技术上最突出的弱点就是发布（public）文件夹和站点源需要分开管理，两套 git repo，每套的垂直流程中都包含了各种版本控制操作，想象一下 git 本来就精深的合并、分支、树结构操作等等各种命令行控制乘以 2 … 流程还是过于繁琐。文档的弱点是没有讲清楚例子中的 GitHub 端 repo 设置。结局是承诺两分钟搞定的上手示例（往 GitHub 发布 Hello World 页面），我两个小时的 google research 后不幸还是没有搞定。Hugo 生成速度优势在部署成功之前是体会不到的。如果承诺的方便是在搞明白上手之后，对我来说还是不够满意。这点我自己的日常工作中也要多加注意。 GitBook 优点：支持 Markdown，对书籍发布和软件文档有较好支持，和传统文档格式互动方便（PDF, MS WORD, Open Office），与出版业接轨。 缺点：不是为博客而设计，博客流程不自然，主要支持手动 Web 发布。 结论：不采用。 因为有比较明显的缺点，虽然试都没试，不过如果有朝一日要发布系统研究成果且不需要大范围更新的话，GitBook 非常合适。 Hexo 优点：支持 Markdown，生成速度快，本地-远程流程足够清晰。 缺点：版本控制流程不透明，资源替换不直观。 结论：采用。 Hexo 是上述测试过的系统中唯一做到了两分钟发布成功的。它不用像 Hugo 那样操心发布版（gh-pages），也没有复杂的 git 操作：new, generate, server, deploy 四个命令基本上可以解决创作、本地测试、远程发布的迭代。这些让我觉得设计者在 UX 方面很贴心。上手教程和其它教程中顾及了本地和远程。但缺点也不是没有，要替换发布内容中的图片素材这些操作还是要手动找到文件，并不太方便。完全不需要版本控制的结果就是自己也不方便做精细的控制。但这些对日常来说都是可以克服的，比如跟代码相关的文章中，源码可以独立开 repo 做版本控制。 怎么写？三分钟热度，写着写着就不写了，最后说不定还是这个结局，能否坚持最终还是取决于学习热情，另外不求天天创新，只求有经得起时间考验的东西。但有方便的流程对克制懒病还是有用的吧：如果打开 Sublime 甚至 Terminal 就能开写，比起网速不详时登录第三方服务，用邮箱密码登录，然后冒所有在线编辑的风险长篇大论来说还是诱人多了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F12%2F25%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
