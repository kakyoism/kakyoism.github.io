{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner_org.jpg","path":"css/images/banner_org.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner-bright.jpg","path":"css/images/banner-bright.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1484527090000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1571302974386},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1571302974387},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1571302974387},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1571302974387},{"_id":"themes/landscape/_config.yml","hash":"1c4ec70039f0d098e71d1f5d033e8f0ae949e02a","modified":1571302974387},{"_id":"themes/landscape/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1483817539000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1571302974393},{"_id":"source/_posts/Build-a-GNU-Autotools-based-project-for-iOS-Part-1.md","hash":"4e24ef1d5c45bccdb2aa09ddfcb64956fb8f4a71","modified":1571303319994},{"_id":"source/_posts/GDC17-Audio-Spatial-Audio-2.md","hash":"e91ca481c4420c65ab9878f9ac2adef4b9ab54bc","modified":1571302974177},{"_id":"source/_posts/GDC17-音频见闻（1）-空间音频-Spatial-Audio.md","hash":"bc8118db67abbd1ccccc8661efda6383a3a68f70","modified":1571302974179},{"_id":"source/_posts/.DS_Store","hash":"f4d1ed6c0c81f579c49009e4ed86f4cd5b56f206","modified":1517729600000},{"_id":"source/_posts/Hello-Hexo-你好-Hexo.md","hash":"3f8bc779940b51b05064f0b0067b073fa62c2dab","modified":1571302974181},{"_id":"source/_posts/migs-2016.md","hash":"df057f460c9b07e3f7f15a807d989c20faeaedbf","modified":1571302974181},{"_id":"source/_posts/quick-auditioning-music-transitions.md","hash":"ce65380b4f35c45fd93f63e0a1ae12e8e1d2ad23","modified":1571302974219},{"_id":"source/_posts/why-cant-i-hear-my-sound.md","hash":"f88dd3790ba5a87a9ac559048a97698af8fcd888","modified":1571302974240},{"_id":"source/_posts/你得知道的-Wwise-Launcher.md","hash":"b0c61e3d456ec63acf79589cd8bc89c2c0d7aebf","modified":1571302974241},{"_id":"source/_posts/你所不知道的-Wwise-Launcher.md","hash":"6773b9b8db3786b4208411155de284a218f22943","modified":1571302974339},{"_id":"source/about/index.md","hash":"1cafb3b2cae92b05cf14783870d01d268af7d6a8","modified":1571302974386},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1571302974387},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1571302974388},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1571302974388},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1571302974388},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1571302974388},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1571302974388},{"_id":"themes/landscape/languages/zh-Hans.yml","hash":"1f77f2e301ca89722e9fd37066fe7e834175f153","modified":1571302974389},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1571302974389},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1571302974392},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1571302974392},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1571302974392},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1571302974393},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1571302974393},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1571302974393},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1571302974393},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1571302974393},{"_id":"themes/landscape/source/.DS_Store","hash":"85465734391f7ec7fef6a72b505d222df38358c8","modified":1485016799000},{"_id":"source/_posts/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-uncanny-valley.jpg","hash":"f105a358f3ff467ee06dad87163de64cbd501b97","modified":1571302974181},{"_id":"source/_posts/quick-auditioning-music-transitions/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1509444797000},{"_id":"source/_posts/quick-auditioning-music-transitions/mpe.png","hash":"aeadeefb038d1c78bb37790cb70434ecb4017c55","modified":1571302974231},{"_id":"source/_posts/quick-auditioning-music-transitions/playbackspeed.png","hash":"1af0840e980912c3dd1de4d15212f0eaec1a1df8","modified":1571302974234},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-dup-msc.png","hash":"80c6345c20e704d7ad0be5203807da01b8182c56","modified":1571302974235},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-paths.png","hash":"47ce2270da9da6a26ac8c31fd34de59e1bcee6bc","modified":1571302974236},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-states.png","hash":"678140c9fbfc7536c66295ccc9665404a87ed429","modified":1571302974238},{"_id":"source/_posts/quick-auditioning-music-transitions/transition-exit-cue.png","hash":"6920d23dbfb6712d2d1ab57a078fc1578c5da302","modified":1571302974238},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-segments.png","hash":"623150a2791b4a035408843fee89c174201ab641","modified":1571302974237},{"_id":"source/_posts/你得知道的-Wwise-Launcher/.DS_Store","hash":"306b4d8ea8c60f53ba9ab1781bd25310b50184f8","modified":1562593395411},{"_id":"source/_posts/你得知道的-Wwise-Launcher/launcher-doc.png","hash":"5b7ec4c4de31d722bc221a3751fc98fc947af0aa","modified":1571302974270},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-1s.jpg","hash":"f05a825ec0263adbdb64de0e0fd88366c036544e","modified":1571302974277},{"_id":"source/_posts/你得知道的-Wwise-Launcher/modify-installs.jpg","hash":"5ca576008eb51dc318a8fc70ac93a2365fbb19b3","modified":1571302974295},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-2.png","hash":"becd3a3b9a446752702ed4f021b4f29bf50df2d8","modified":1571302974300},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-2s.jpg","hash":"77ead0c86975a964432fd3604685793ccccc325c","modified":1571302974300},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-project-2s.jpg","hash":"8f7c65b3a42e00ecaa981eb56d0a7d5122734f5b","modified":1571302974304},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zipper-2.png","hash":"de1b907666097977ee16cd60a26349af95a6a06d","modified":1571302974337},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zipper-2s.jpg","hash":"28372ff4d86767e81a42203e56452b0abf02298c","modified":1571302974337},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zippers.jpg","hash":"b9143704cd8a41bc6c5349a87a71ac22e78393cc","modified":1571302974339},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/.DS_Store","hash":"faa49956570f7f6783133fe175a00c246d306bb1","modified":1515168027000},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-2s.jpg","hash":"0c89415d570fda5ea0c2ad91109b962aa8bcd8cd","modified":1571302974348},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/modify-installs.jpg","hash":"5ca576008eb51dc318a8fc70ac93a2365fbb19b3","modified":1571302974349},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-2.png","hash":"becd3a3b9a446752702ed4f021b4f29bf50df2d8","modified":1571302974353},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-2s.jpg","hash":"77ead0c86975a964432fd3604685793ccccc325c","modified":1571302974353},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-project-2s.jpg","hash":"8f7c65b3a42e00ecaa981eb56d0a7d5122734f5b","modified":1571302974357},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zipper-2.png","hash":"de1b907666097977ee16cd60a26349af95a6a06d","modified":1571302974384},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1571302974389},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1571302974389},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1571302974389},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1571302974389},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"9f8828ed55bfa8efc1bd336547d7b73eb5d532b6","modified":1571302974389},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1571302974390},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1571302974390},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1571302974390},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1571302974390},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zippers.jpg","hash":"b9143704cd8a41bc6c5349a87a71ac22e78393cc","modified":1571302974386},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1571302974391},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1571302974391},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1571302974392},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1571302974391},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1571302974392},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1571302974392},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zipper-2s.jpg","hash":"28372ff4d86767e81a42203e56452b0abf02298c","modified":1571302974385},{"_id":"themes/landscape/source/css/_extend.styl","hash":"a319ea21601a81d50bf047cb7351ae635bcc18bb","modified":1571302974393},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1571302974396},{"_id":"themes/landscape/source/css/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1483817545000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1571302974412},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1571302974412},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1571302974413},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1571302974413},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1571302974414},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1571302974412},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1571302974415},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1571302974415},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1571302974415},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1571302974413},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1571302974413},{"_id":"source/_posts/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-game-integration.jpg","hash":"f79f10411218780847a380068d4972427da75263","modified":1571302974180},{"_id":"source/_posts/quick-auditioning-music-transitions/mpe-mid-seg.png","hash":"aba2cf8542d8da866e104668335afc02a1c8de90","modified":1571302974231},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-event.png","hash":"8b433d53abe547e202b1d51392cddb809a0f2b7a","modified":1571302974236},{"_id":"source/_posts/quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg","hash":"b04baca69050f3bbb3e3a6c2da6c68fe9bc7659f","modified":1571302974240},{"_id":"source/_posts/你得知道的-Wwise-Launcher/install-sdk-demos.jpg","hash":"21801f64ab8568b4809361c4fac52f9862cc4198","modified":1571302974270},{"_id":"source/_posts/你得知道的-Wwise-Launcher/modify-install.png","hash":"e546e27099b990530877fb7fd28a2d3c7c1f34dc","modified":1571302974295},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-1s.jpg","hash":"7cde2d1429fc85ef28de15d72035b4f884046385","modified":1571302974296},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-2s.jpg","hash":"af9ad93bbe18a1502cf948c1dd4a67bad67db487","modified":1571302974299},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-3s.jpg","hash":"807d8fe7fe6a15c8f3c96c2375c8a1454d99c7df","modified":1571302974301},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installers.jpg","hash":"a00a0bd2bced5d3e6bcee409560c85e5ee658f10","modified":1571302974303},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-project-2.png","hash":"034a0cec706f0a72215e48f3337ae0f1251370f9","modified":1571302974304},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-projects.jpg","hash":"2ec918fa16ce4383277f0172e7883d102f2bd5fc","modified":1571302974306},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-license-2s.jpg","hash":"d439f8327f560c6373621c12fa79b4c46c2e5fdf","modified":1571302974310},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-licenses-2.jpg","hash":"d2a489ec696841135b2ae7567054e34636a90678","modified":1571302974313},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-licenses.jpg","hash":"558ac1f99f4bbe7a6d3cd557280a3613bb5c177e","modified":1571302974313},{"_id":"source/_posts/你得知道的-Wwise-Launcher/samples-demos.jpg","hash":"67c9cd7bbade7c01197770d694f8c20c3d98cea0","modified":1571302974315},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-browse-projects.jpg","hash":"fa6e391e5a58118c53e7be7c911060a1b077f604","modified":1571302974317},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-integrates.jpg","hash":"d03b2f77f58a58506d3e12d8e593c5e1a0823d7c","modified":1571302974321},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-demos.jpg","hash":"ac71d6793521954cf27dfba98699dc4ff27ee3b1","modified":1571302974319},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-1s.jpg","hash":"62712198c1a55958cd43964573cc171289eb6cd6","modified":1571302974324},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-2s.jpg","hash":"9f3485a806b42b5519d2c5fc061d7158f93f05e2","modified":1571302974326},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unreal-demos.jpg","hash":"dd58e281bbbc0b28d184cb42dafdf8fce6ffceee","modified":1571302974328},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-1s.jpg","hash":"1d6957f886ec59001fd637667dd9c8236e5cd218","modified":1571302974330},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-2s.jpg","hash":"55e3e497e09391d6909cb4891fdd9ff9d499c7f3","modified":1571302974334},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zipper.png","hash":"b5473b8fbd634faed67d7650f601e1b716ccef19","modified":1571302974338},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/install-sdk-demos.jpg","hash":"21801f64ab8568b4809361c4fac52f9862cc4198","modified":1571302974345},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-1s.jpg","hash":"f6367e0d4682ea229b00f0e382d6bf65c66d1bd3","modified":1571302974347},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-2.png","hash":"c1fb74df2073cea3c16d61488380da6230d63b6d","modified":1571302974348},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/modify-install.png","hash":"e546e27099b990530877fb7fd28a2d3c7c1f34dc","modified":1571302974349},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-1s.jpg","hash":"7cde2d1429fc85ef28de15d72035b4f884046385","modified":1571302974351},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-2s.jpg","hash":"af9ad93bbe18a1502cf948c1dd4a67bad67db487","modified":1571302974353},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-3s.jpg","hash":"807d8fe7fe6a15c8f3c96c2375c8a1454d99c7df","modified":1571302974354},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installers.jpg","hash":"a00a0bd2bced5d3e6bcee409560c85e5ee658f10","modified":1571302974356},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-project-2.png","hash":"034a0cec706f0a72215e48f3337ae0f1251370f9","modified":1571302974357},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-projects.jpg","hash":"2ec918fa16ce4383277f0172e7883d102f2bd5fc","modified":1571302974359},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-license-2s.jpg","hash":"a1bbc5ad7e1e2d426fc783b1403bcd283d2ebffa","modified":1571302974362},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-licenses-2.jpg","hash":"d2a489ec696841135b2ae7567054e34636a90678","modified":1571302974364},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-licenses.jpg","hash":"558ac1f99f4bbe7a6d3cd557280a3613bb5c177e","modified":1571302974364},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/samples-demos.jpg","hash":"67c9cd7bbade7c01197770d694f8c20c3d98cea0","modified":1571302974366},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-browse-projects.jpg","hash":"fa6e391e5a58118c53e7be7c911060a1b077f604","modified":1571302974368},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-demos.jpg","hash":"ac71d6793521954cf27dfba98699dc4ff27ee3b1","modified":1571302974371},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-integrates.jpg","hash":"d03b2f77f58a58506d3e12d8e593c5e1a0823d7c","modified":1571302974373},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-1s.jpg","hash":"62712198c1a55958cd43964573cc171289eb6cd6","modified":1571302974375},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-2s.jpg","hash":"9f3485a806b42b5519d2c5fc061d7158f93f05e2","modified":1571302974377},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unreal-demos.jpg","hash":"dd58e281bbbc0b28d184cb42dafdf8fce6ffceee","modified":1571302974379},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-1s.jpg","hash":"1d6957f886ec59001fd637667dd9c8236e5cd218","modified":1571302974380},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-2s.jpg","hash":"55e3e497e09391d6909cb4891fdd9ff9d499c7f3","modified":1571302974384},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zipper.png","hash":"b5473b8fbd634faed67d7650f601e1b716ccef19","modified":1571302974386},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-2s.jpg","hash":"83a77e5e35d4457ca0f774e213401a7bac5bf7d6","modified":1571302974294},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-1.png","hash":"a73940808968b862ea14391d61f47c3f8911f3f8","modified":1571302974296},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-1.png","hash":"61b19f8a6055a8756527f9ff51b523affd76e49e","modified":1571302974329},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-1.png","hash":"57fba1bb78ad7fbf25b4780429b18d84abc75fdc","modified":1571302974347},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-3.png","hash":"7864af235a158c10efe0aec3398cb982a91cfff5","modified":1571302974354},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-1.png","hash":"61b19f8a6055a8756527f9ff51b523affd76e49e","modified":1571302974380},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1571302974390},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1571302974390},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1571302974391},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1571302974390},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1571302974391},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1571302974391},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1571302974394},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"d47c445e66392218676a4731ffb53ff495cfd5bc","modified":1571302974394},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1571302974394},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1571302974394},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1571302974394},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1571302974395},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1571302974395},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1571302974395},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1571302974395},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1571302974395},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1571302974396},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1571302974396},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1571302974399},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1571302974397},{"_id":"themes/landscape/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1485016816000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1571302974414},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1571302974413},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1571302974414},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1571302974414},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1571302974414},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1571302974413},{"_id":"source/_posts/quick-auditioning-music-transitions/mse.png","hash":"f8c5e85d16ea1eaeca0416c4b137137c1cb0a0a8","modified":1571302974233},{"_id":"source/_posts/你得知道的-Wwise-Launcher/install-sdk-demo.png","hash":"8a05affcd64f83dd4d88d3fb3ddf8870e3583fe5","modified":1571302974269},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-3.png","hash":"7864af235a158c10efe0aec3398cb982a91cfff5","modified":1571302974301},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer.png","hash":"05eb04b05d5608a7e0f2cdb45d568d04f2e6c450","modified":1571302974302},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-project.png","hash":"e17fa5fd62a50d80835f7db0ebba43fdcba1dff1","modified":1571302974305},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-license.png","hash":"88795ed1a61d4af1d827cf06585edadb34d51e45","modified":1571302974312},{"_id":"source/_posts/你得知道的-Wwise-Launcher/samples-demo.png","hash":"bcd5f88a701a06da6b076aa8e79751296b6a9182","modified":1571302974314},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-browse-project.png","hash":"c72a99b089c4c8798cfcf0dbe8f2d4f6e8705314","modified":1571302974316},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-integrate.png","hash":"11f1beb8ce5ec894d486aaa914e52275cbfbd9bc","modified":1571302974321},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-2.png","hash":"300c30c83096fce2712e1ad8cd2374ec6b293804","modified":1571302974325},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/home-feedss.jpg","hash":"c961daee427aec5aca1d5893f5e320b3d3be21b8","modified":1571302974344},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/install-sdk-demo.png","hash":"8a05affcd64f83dd4d88d3fb3ddf8870e3583fe5","modified":1571302974345},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-1.png","hash":"a73940808968b862ea14391d61f47c3f8911f3f8","modified":1571302974350},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer.png","hash":"05eb04b05d5608a7e0f2cdb45d568d04f2e6c450","modified":1571302974355},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-project.png","hash":"e17fa5fd62a50d80835f7db0ebba43fdcba1dff1","modified":1571302974358},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-license.png","hash":"88795ed1a61d4af1d827cf06585edadb34d51e45","modified":1571302974363},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/samples-demo.png","hash":"bcd5f88a701a06da6b076aa8e79751296b6a9182","modified":1571302974365},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-browse-project.png","hash":"c72a99b089c4c8798cfcf0dbe8f2d4f6e8705314","modified":1571302974367},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-integrate.png","hash":"11f1beb8ce5ec894d486aaa914e52275cbfbd9bc","modified":1571302974372},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-1.png","hash":"5169f8f9bef844ceb42f30d3f2d14e056897b42a","modified":1571302974374},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-2.png","hash":"300c30c83096fce2712e1ad8cd2374ec6b293804","modified":1571302974376},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1571302974397},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-demo.png","hash":"2e6a30d7ea33ef1bd8b766fc4396aefcf8fd33b7","modified":1571302974319},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-1.png","hash":"5169f8f9bef844ceb42f30d3f2d14e056897b42a","modified":1571302974323},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unreal-demo.png","hash":"214c9e754d08cd3f734ec0b4ee95df0efb8fcf04","modified":1571302974327},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unreal-demo.png","hash":"214c9e754d08cd3f734ec0b4ee95df0efb8fcf04","modified":1571302974378},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1571302974399},{"_id":"source/_posts/你得知道的-Wwise-Launcher/home-feedss.jpg","hash":"c0c437d5fc1bc0f36c02c524f6113d9f29919e94","modified":1571302974268},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-2.png","hash":"6593cbd684cc34bb3fb065b29da9ebb9efe52898","modified":1571302974298},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-demo.png","hash":"2e6a30d7ea33ef1bd8b766fc4396aefcf8fd33b7","modified":1571302974370},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-2.png","hash":"6593cbd684cc34bb3fb065b29da9ebb9efe52898","modified":1571302974352},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1571302974398},{"_id":"themes/landscape/source/css/images/banner_org.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1571302974412},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wwise-bug-report.png","hash":"12f5ba5bcccbbcbaa57c0d8836cdc447de69fd99","modified":1571302974336},{"_id":"source/_posts/GDC17-Audio-Spatial-Audio-2/sa-wwise-wal.jpg","hash":"a7e90a8c3c1ff490554a861873775d1b10662b0f","modified":1571302974178},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-1.png","hash":"aedb1160ca466013b301f4a29593a898dba93d87","modified":1571302974276},{"_id":"source/_posts/migs-2016/migs16-06.png","hash":"1dcbd170e99a80a7612302b9ae6c3ef9b405c59d","modified":1571302974217},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/home-feeds.png","hash":"c823dd2026edbee515bcad16e2261519ae1cc3be","modified":1571302974343},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-2.png","hash":"c195fb03f51fdfd3966281ba7d1f26685b41ca79","modified":1571302974333},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-2.png","hash":"c195fb03f51fdfd3966281ba7d1f26685b41ca79","modified":1571302974383},{"_id":"source/_posts/quick-auditioning-music-transitions/media-player.png","hash":"8663cae484bab60ca4f9dcfd49b89e029f5bca7a","modified":1571302974229},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"190a902b65b885ccf2dbd062881621b60c792d16","modified":1571302974410},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-license-2.png","hash":"360e85b806ab2dad62bad5dd936f86d3d3520304","modified":1571302974309},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-license-2.png","hash":"4767a52a4d628f368acda757b3b2366a3cf2f8d5","modified":1571302974361},{"_id":"source/_posts/migs-2016/migs16-03.jpg","hash":"176988fd37f1372b4d3a73e8e04427ab2fbd4cf2","modified":1571302974199},{"_id":"themes/landscape/source/css/images/banner-bright.jpg","hash":"e2684297601f8ad90abd39dbe321992576f871e5","modified":1571302974405},{"_id":"source/_posts/migs-2016/migs16-05.JPG","hash":"92c0d47f6ef08c3e881a2692666dfd29d866ba31","modified":1571302974213},{"_id":"source/_posts/migs-2016/migs16-02.jpg","hash":"74675fcfd0fb6c9434f75c1d73815a6e3f7df6de","modified":1571302974194},{"_id":"source/_posts/migs-2016/migs16-04.JPG","hash":"99e6f25fb48268708af2089489cdc96d845a0875","modified":1571302974208},{"_id":"source/_posts/migs-2016/migs16-01.jpg","hash":"a98c61ef6fdeb6f74adf145803fa7a7b7dff5eaf","modified":1571302974186},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-2.png","hash":"6e50d3b8ef2a496b0bcd9b0a2e438ba7b6fd8e33","modified":1571302974292},{"_id":"source/_posts/你得知道的-Wwise-Launcher/home-feeds.png","hash":"ff1efe5fd0d77d46b802d6da87728a16118434c7","modified":1571302974264},{"_id":"public/atom.xml","hash":"71f8cf23f7a55110d69db382cb2e748ee051612f","modified":1571303334151},{"_id":"public/search.xml","hash":"d634583a9d07aeca1340195199ffe541f93cc2e2","modified":1571303334214},{"_id":"public/CNAME","hash":"0ab0f8bbd9423bbf1d13eff0dfa40abaecd2116f","modified":1571303334216},{"_id":"public/about/index.html","hash":"7ac3a4c10442eeb2b378884f2ccad7a0d7c6bdbc","modified":1571303334231},{"_id":"public/2018/02/04/why-cant-i-hear-my-sound/index.html","hash":"7c1c5c4ba0d6cdbb3110d7f92469a8c9fca012a1","modified":1571303334231},{"_id":"public/2017/03/13/GDC17-Audio-Spatial-Audio-2/index.html","hash":"fab21959945a849c052b2abb4255f03faff7289d","modified":1571303334231},{"_id":"public/2016/12/25/Hello-Hexo-你好-Hexo/index.html","hash":"e5a19e8ea3fa38589377a66950b2cf235860628c","modified":1571303334231},{"_id":"public/archives/index.html","hash":"a16f192d114c97f0837121d604e2b70244b70e52","modified":1571303334231},{"_id":"public/archives/2016/index.html","hash":"48b04666e4b6f7070dbfc25f0c1f55930b43d871","modified":1571303334231},{"_id":"public/archives/2016/12/index.html","hash":"83c0e535a06bbacabdc9bb5e97b729ab57709a2a","modified":1571303334231},{"_id":"public/archives/2017/index.html","hash":"85deb83781ba4890de3771199fc20f7fc4a631e3","modified":1571303334231},{"_id":"public/archives/2017/01/index.html","hash":"9166b5e38e1a524c8ef325ca427c02fd646991fc","modified":1571303334231},{"_id":"public/archives/2017/10/index.html","hash":"6a06b3846f5d5cfea89acb3dd8cd23e76f837d6c","modified":1571303334231},{"_id":"public/archives/2017/03/index.html","hash":"e0c42acada73ee1b7dd1b09f38dc97c66131fcd2","modified":1571303334231},{"_id":"public/archives/2018/index.html","hash":"6ed82b02ef401900fafbaac6c91c550d477eff42","modified":1571303334231},{"_id":"public/archives/2018/01/index.html","hash":"cfb743e0c0924b0e8d378607cfb696199274e25d","modified":1571303334231},{"_id":"public/archives/2018/02/index.html","hash":"0b654c937b87c282d927f7e92900f45844d80527","modified":1571303334232},{"_id":"public/archives/2019/index.html","hash":"72db743e8fb35e88a528798627d1c5e7319468ef","modified":1571303334232},{"_id":"public/archives/2019/07/index.html","hash":"6677004be39a08de5e0ca345c4ab489adb849ebd","modified":1571303334232},{"_id":"public/archives/2019/10/index.html","hash":"e93ac00608240d5a1a21a9176991772964b4c7dd","modified":1571303334232},{"_id":"public/categories/GameAudio/index.html","hash":"c1a14a08670490bb2641382441a83e134b8a9ecc","modified":1571303334232},{"_id":"public/categories/Writing/index.html","hash":"fbd9b0479b34aa1e5e3bbf0528b3d142708c273d","modified":1571303334232},{"_id":"public/tags/build-iOS/index.html","hash":"5ddc9f9a044966df1a6f2d6e2fc40c11a7955915","modified":1571303334232},{"_id":"public/tags/conference-gdc17-reverb-obstruction-occlusion-spatialaudio/index.html","hash":"2460bba2504f1630c3dfae7085fa804ae3925b12","modified":1571303334232},{"_id":"public/tags/conference/index.html","hash":"e5dc3113489e827da426b1a20f61495fc4dc495c","modified":1571303334232},{"_id":"public/tags/wwise/index.html","hash":"f72eece6d432db70896a9be3dddfe3b8ad6f6ea1","modified":1571303334232},{"_id":"public/tags/proceduralaudio/index.html","hash":"db6a47eb8e229f1cccf796e35b4f082a12a72c7c","modified":1571303334232},{"_id":"public/tags/reverb/index.html","hash":"e5594526a312eb4da65878a8cb37869d61cd745f","modified":1571303334232},{"_id":"public/tags/machinelearning/index.html","hash":"dd0ca7c80d8798757037d90d682b74d753d58e14","modified":1571303334232},{"_id":"public/tags/github/index.html","hash":"4044d98d72a3d808bae2de28525ee012e615dbbc","modified":1571303334232},{"_id":"public/tags/wwise-interactivemusic/index.html","hash":"fccf17c29e18f31fc52809ae84fb10de27f6e27d","modified":1571303334232},{"_id":"public/tags/wwise-gameaudio/index.html","hash":"0f7d4e65cb065eba9f2ca4ca57688b871d66364f","modified":1571303334232},{"_id":"public/2019/10/17/Build-a-GNU-Autotools-based-project-for-iOS-Part-1/index.html","hash":"8ca91b2dd8da34225311e910bf35c4861ce27053","modified":1571303334232},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/index.html","hash":"5a42062709c6d7ddc0829812177dbddab31a1c92","modified":1571303334232},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/index.html","hash":"279d5c0721be1aa629b2b78151b02083f535526e","modified":1571303334232},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/index.html","hash":"fd1fed5deeec10e8c5b90717c69cf016c4b5c222","modified":1571303334233},{"_id":"public/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/index.html","hash":"5b5c3bd57498122261bd07fb719eb4c9d8b8831c","modified":1571303334233},{"_id":"public/2017/01/15/migs-2016/index.html","hash":"62381dc5eb465beb9dbf06bb0ff1d0e3ca26a7d9","modified":1571303334233},{"_id":"public/index.html","hash":"eacce07dd91cfa55063279539c2abf402cc3e0af","modified":1571303334233},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1571303334247},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1571303334247},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1571303334248},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1571303334248},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1571303334248},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1571303334248},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1571303334248},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1571303334248},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1571303334248},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1571303334248},{"_id":"public/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-uncanny-valley.jpg","hash":"f105a358f3ff467ee06dad87163de64cbd501b97","modified":1571303334248},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/mpe.png","hash":"aeadeefb038d1c78bb37790cb70434ecb4017c55","modified":1571303334248},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/playbackspeed.png","hash":"1af0840e980912c3dd1de4d15212f0eaec1a1df8","modified":1571303334248},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/sample-dup-msc.png","hash":"80c6345c20e704d7ad0be5203807da01b8182c56","modified":1571303334248},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/sample-paths.png","hash":"47ce2270da9da6a26ac8c31fd34de59e1bcee6bc","modified":1571303334248},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/sample-states.png","hash":"678140c9fbfc7536c66295ccc9665404a87ed429","modified":1571303334248},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/transition-exit-cue.png","hash":"6920d23dbfb6712d2d1ab57a078fc1578c5da302","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/log-2s.jpg","hash":"0c89415d570fda5ea0c2ad91109b962aa8bcd8cd","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/modify-installs.jpg","hash":"5ca576008eb51dc318a8fc70ac93a2365fbb19b3","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-2s.jpg","hash":"77ead0c86975a964432fd3604685793ccccc325c","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-2.png","hash":"becd3a3b9a446752702ed4f021b4f29bf50df2d8","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-project-2s.jpg","hash":"8f7c65b3a42e00ecaa981eb56d0a7d5122734f5b","modified":1571303334249},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/sample-segments.png","hash":"623150a2791b4a035408843fee89c174201ab641","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/zipper-2.png","hash":"de1b907666097977ee16cd60a26349af95a6a06d","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/zipper-2s.jpg","hash":"28372ff4d86767e81a42203e56452b0abf02298c","modified":1571303334249},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/zippers.jpg","hash":"b9143704cd8a41bc6c5349a87a71ac22e78393cc","modified":1571303334249},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/launcher-doc.png","hash":"5b7ec4c4de31d722bc221a3751fc98fc947af0aa","modified":1571303334249},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/log-1s.jpg","hash":"f05a825ec0263adbdb64de0e0fd88366c036544e","modified":1571303334249},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/modify-installs.jpg","hash":"5ca576008eb51dc318a8fc70ac93a2365fbb19b3","modified":1571303334250},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-2.png","hash":"becd3a3b9a446752702ed4f021b4f29bf50df2d8","modified":1571303334250},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-2s.jpg","hash":"77ead0c86975a964432fd3604685793ccccc325c","modified":1571303334250},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-project-2s.jpg","hash":"8f7c65b3a42e00ecaa981eb56d0a7d5122734f5b","modified":1571303334250},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/zipper-2.png","hash":"de1b907666097977ee16cd60a26349af95a6a06d","modified":1571303334250},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/zippers.jpg","hash":"b9143704cd8a41bc6c5349a87a71ac22e78393cc","modified":1571303334250},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/zipper-2s.jpg","hash":"28372ff4d86767e81a42203e56452b0abf02298c","modified":1571303334250},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1571303334529},{"_id":"public/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-game-integration.jpg","hash":"f79f10411218780847a380068d4972427da75263","modified":1571303334530},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/mpe-mid-seg.png","hash":"aba2cf8542d8da866e104668335afc02a1c8de90","modified":1571303334530},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/sample-event.png","hash":"8b433d53abe547e202b1d51392cddb809a0f2b7a","modified":1571303334530},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg","hash":"b04baca69050f3bbb3e3a6c2da6c68fe9bc7659f","modified":1571303334530},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/install-sdk-demos.jpg","hash":"21801f64ab8568b4809361c4fac52f9862cc4198","modified":1571303334530},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/log-2.png","hash":"c1fb74df2073cea3c16d61488380da6230d63b6d","modified":1571303334530},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/log-1s.jpg","hash":"f6367e0d4682ea229b00f0e382d6bf65c66d1bd3","modified":1571303334530},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/modify-install.png","hash":"e546e27099b990530877fb7fd28a2d3c7c1f34dc","modified":1571303334531},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-1s.jpg","hash":"7cde2d1429fc85ef28de15d72035b4f884046385","modified":1571303334531},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-2s.jpg","hash":"af9ad93bbe18a1502cf948c1dd4a67bad67db487","modified":1571303334531},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-3s.jpg","hash":"807d8fe7fe6a15c8f3c96c2375c8a1454d99c7df","modified":1571303334531},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-installers.jpg","hash":"a00a0bd2bced5d3e6bcee409560c85e5ee658f10","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-project-2.png","hash":"034a0cec706f0a72215e48f3337ae0f1251370f9","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-projects.jpg","hash":"2ec918fa16ce4383277f0172e7883d102f2bd5fc","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/project-licenses-2.jpg","hash":"d2a489ec696841135b2ae7567054e34636a90678","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/project-license-2s.jpg","hash":"a1bbc5ad7e1e2d426fc783b1403bcd283d2ebffa","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/project-licenses.jpg","hash":"558ac1f99f4bbe7a6d3cd557280a3613bb5c177e","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/samples-demos.jpg","hash":"67c9cd7bbade7c01197770d694f8c20c3d98cea0","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-integrates.jpg","hash":"d03b2f77f58a58506d3e12d8e593c5e1a0823d7c","modified":1571303334532},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-browse-projects.jpg","hash":"fa6e391e5a58118c53e7be7c911060a1b077f604","modified":1571303334533},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-demos.jpg","hash":"ac71d6793521954cf27dfba98699dc4ff27ee3b1","modified":1571303334533},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-2s.jpg","hash":"9f3485a806b42b5519d2c5fc061d7158f93f05e2","modified":1571303334533},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-1s.jpg","hash":"62712198c1a55958cd43964573cc171289eb6cd6","modified":1571303334533},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unreal-demos.jpg","hash":"dd58e281bbbc0b28d184cb42dafdf8fce6ffceee","modified":1571303334533},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/wal-1s.jpg","hash":"1d6957f886ec59001fd637667dd9c8236e5cd218","modified":1571303334533},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/wal-2s.jpg","hash":"55e3e497e09391d6909cb4891fdd9ff9d499c7f3","modified":1571303334534},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/zipper.png","hash":"b5473b8fbd634faed67d7650f601e1b716ccef19","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/install-sdk-demos.jpg","hash":"21801f64ab8568b4809361c4fac52f9862cc4198","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/modify-install.png","hash":"e546e27099b990530877fb7fd28a2d3c7c1f34dc","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-1s.jpg","hash":"7cde2d1429fc85ef28de15d72035b4f884046385","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-2s.jpg","hash":"af9ad93bbe18a1502cf948c1dd4a67bad67db487","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-installers.jpg","hash":"a00a0bd2bced5d3e6bcee409560c85e5ee658f10","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-3s.jpg","hash":"807d8fe7fe6a15c8f3c96c2375c8a1454d99c7df","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-project-2.png","hash":"034a0cec706f0a72215e48f3337ae0f1251370f9","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-projects.jpg","hash":"2ec918fa16ce4383277f0172e7883d102f2bd5fc","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/project-license-2s.jpg","hash":"d439f8327f560c6373621c12fa79b4c46c2e5fdf","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/project-licenses-2.jpg","hash":"d2a489ec696841135b2ae7567054e34636a90678","modified":1571303334534},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/samples-demos.jpg","hash":"67c9cd7bbade7c01197770d694f8c20c3d98cea0","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-browse-projects.jpg","hash":"fa6e391e5a58118c53e7be7c911060a1b077f604","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-demos.jpg","hash":"ac71d6793521954cf27dfba98699dc4ff27ee3b1","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-integrates.jpg","hash":"d03b2f77f58a58506d3e12d8e593c5e1a0823d7c","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-1s.jpg","hash":"62712198c1a55958cd43964573cc171289eb6cd6","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/project-licenses.jpg","hash":"558ac1f99f4bbe7a6d3cd557280a3613bb5c177e","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-2s.jpg","hash":"9f3485a806b42b5519d2c5fc061d7158f93f05e2","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unreal-demos.jpg","hash":"dd58e281bbbc0b28d184cb42dafdf8fce6ffceee","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/wal-2s.jpg","hash":"55e3e497e09391d6909cb4891fdd9ff9d499c7f3","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/zipper.png","hash":"b5473b8fbd634faed67d7650f601e1b716ccef19","modified":1571303334535},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/wal-1s.jpg","hash":"1d6957f886ec59001fd637667dd9c8236e5cd218","modified":1571303334536},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1571303334541},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1571303334541},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1571303334542},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1571303334542},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1571303334542},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1571303334542},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1571303334542},{"_id":"public/css/style.css","hash":"00b684fdc0559d228ebc52bf8544bdb811239f25","modified":1571303334542},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1571303334542},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1571303334542},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/mse.png","hash":"f8c5e85d16ea1eaeca0416c4b137137c1cb0a0a8","modified":1571303334542},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/install-sdk-demo.png","hash":"8a05affcd64f83dd4d88d3fb3ddf8870e3583fe5","modified":1571303334542},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-3.png","hash":"7864af235a158c10efe0aec3398cb982a91cfff5","modified":1571303334542},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-installer.png","hash":"05eb04b05d5608a7e0f2cdb45d568d04f2e6c450","modified":1571303334542},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-project.png","hash":"e17fa5fd62a50d80835f7db0ebba43fdcba1dff1","modified":1571303334542},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/install-sdk-demo.png","hash":"8a05affcd64f83dd4d88d3fb3ddf8870e3583fe5","modified":1571303334542},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-1.png","hash":"a73940808968b862ea14391d61f47c3f8911f3f8","modified":1571303334542},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/home-feedss.jpg","hash":"c961daee427aec5aca1d5893f5e320b3d3be21b8","modified":1571303334543},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer.png","hash":"05eb04b05d5608a7e0f2cdb45d568d04f2e6c450","modified":1571303334543},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-project.png","hash":"e17fa5fd62a50d80835f7db0ebba43fdcba1dff1","modified":1571303334543},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/log-1.png","hash":"57fba1bb78ad7fbf25b4780429b18d84abc75fdc","modified":1571303334543},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-3.png","hash":"7864af235a158c10efe0aec3398cb982a91cfff5","modified":1571303334543},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/log-2s.jpg","hash":"83a77e5e35d4457ca0f774e213401a7bac5bf7d6","modified":1571303334543},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-1.png","hash":"a73940808968b862ea14391d61f47c3f8911f3f8","modified":1571303334543},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/samples-demo.png","hash":"bcd5f88a701a06da6b076aa8e79751296b6a9182","modified":1571303334549},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-integrate.png","hash":"11f1beb8ce5ec894d486aaa914e52275cbfbd9bc","modified":1571303334549},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-2.png","hash":"300c30c83096fce2712e1ad8cd2374ec6b293804","modified":1571303334550},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/project-license.png","hash":"88795ed1a61d4af1d827cf06585edadb34d51e45","modified":1571303334550},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-browse-project.png","hash":"c72a99b089c4c8798cfcf0dbe8f2d4f6e8705314","modified":1571303334550},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/samples-demo.png","hash":"bcd5f88a701a06da6b076aa8e79751296b6a9182","modified":1571303334550},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-integrate.png","hash":"11f1beb8ce5ec894d486aaa914e52275cbfbd9bc","modified":1571303334550},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-1.png","hash":"5169f8f9bef844ceb42f30d3f2d14e056897b42a","modified":1571303334550},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-1.png","hash":"5169f8f9bef844ceb42f30d3f2d14e056897b42a","modified":1571303334551},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unreal-demo.png","hash":"214c9e754d08cd3f734ec0b4ee95df0efb8fcf04","modified":1571303334551},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-2.png","hash":"300c30c83096fce2712e1ad8cd2374ec6b293804","modified":1571303334551},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/wal-1.png","hash":"61b19f8a6055a8756527f9ff51b523affd76e49e","modified":1571303334551},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1571303334558},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/project-license.png","hash":"88795ed1a61d4af1d827cf06585edadb34d51e45","modified":1571303334558},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-browse-project.png","hash":"c72a99b089c4c8798cfcf0dbe8f2d4f6e8705314","modified":1571303334559},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unity-demo.png","hash":"2e6a30d7ea33ef1bd8b766fc4396aefcf8fd33b7","modified":1571303334559},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/unreal-demo.png","hash":"214c9e754d08cd3f734ec0b4ee95df0efb8fcf04","modified":1571303334559},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/unity-demo.png","hash":"2e6a30d7ea33ef1bd8b766fc4396aefcf8fd33b7","modified":1571303334559},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/wal-1.png","hash":"61b19f8a6055a8756527f9ff51b523affd76e49e","modified":1571303334559},{"_id":"public/css/images/banner_org.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1571303334562},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-2.png","hash":"6593cbd684cc34bb3fb065b29da9ebb9efe52898","modified":1571303334562},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/home-feedss.jpg","hash":"c0c437d5fc1bc0f36c02c524f6113d9f29919e94","modified":1571303334563},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-2.png","hash":"6593cbd684cc34bb3fb065b29da9ebb9efe52898","modified":1571303334567},{"_id":"public/2017/03/13/GDC17-Audio-Spatial-Audio-2/sa-wwise-wal.jpg","hash":"a7e90a8c3c1ff490554a861873775d1b10662b0f","modified":1571303334572},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/wwise-bug-report.png","hash":"12f5ba5bcccbbcbaa57c0d8836cdc447de69fd99","modified":1571303334581},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/log-1.png","hash":"aedb1160ca466013b301f4a29593a898dba93d87","modified":1571303334584},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/wal-2.png","hash":"c195fb03f51fdfd3966281ba7d1f26685b41ca79","modified":1571303334584},{"_id":"public/2017/01/15/migs-2016/migs16-06.png","hash":"1dcbd170e99a80a7612302b9ae6c3ef9b405c59d","modified":1571303334589},{"_id":"public/2017/10/29/quick-auditioning-music-transitions/media-player.png","hash":"8663cae484bab60ca4f9dcfd49b89e029f5bca7a","modified":1571303334592},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/wal-2.png","hash":"c195fb03f51fdfd3966281ba7d1f26685b41ca79","modified":1571303334592},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/home-feeds.png","hash":"c823dd2026edbee515bcad16e2261519ae1cc3be","modified":1571303334597},{"_id":"public/css/images/banner.jpg","hash":"190a902b65b885ccf2dbd062881621b60c792d16","modified":1571303334602},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/project-license-2.png","hash":"360e85b806ab2dad62bad5dd936f86d3d3520304","modified":1571303334603},{"_id":"public/2018/01/04/你所不知道的-Wwise-Launcher/project-license-2.png","hash":"4767a52a4d628f368acda757b3b2366a3cf2f8d5","modified":1571303334606},{"_id":"public/css/images/banner-bright.jpg","hash":"e2684297601f8ad90abd39dbe321992576f871e5","modified":1571303334607},{"_id":"public/2017/01/15/migs-2016/migs16-03.jpg","hash":"176988fd37f1372b4d3a73e8e04427ab2fbd4cf2","modified":1571303334608},{"_id":"public/2017/01/15/migs-2016/migs16-05.JPG","hash":"92c0d47f6ef08c3e881a2692666dfd29d866ba31","modified":1571303334610},{"_id":"public/2017/01/15/migs-2016/migs16-04.JPG","hash":"99e6f25fb48268708af2089489cdc96d845a0875","modified":1571303334612},{"_id":"public/2017/01/15/migs-2016/migs16-02.jpg","hash":"74675fcfd0fb6c9434f75c1d73815a6e3f7df6de","modified":1571303334613},{"_id":"public/2017/01/15/migs-2016/migs16-01.jpg","hash":"a98c61ef6fdeb6f74adf145803fa7a7b7dff5eaf","modified":1571303334617},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/log-2.png","hash":"6e50d3b8ef2a496b0bcd9b0a2e438ba7b6fd8e33","modified":1571303334620},{"_id":"public/2019/07/08/你得知道的-Wwise-Launcher/home-feeds.png","hash":"ff1efe5fd0d77d46b802d6da87728a16118434c7","modified":1571303334624}],"Category":[{"name":"GameAudio","_id":"ck1uhfntd00050enzwdutmsu4"},{"name":"Writing","_id":"ck1uhfntq000l0enz3voqkk6v"}],"Data":[],"Page":[{"title":"about","date":"2017-01-07T06:21:22.000Z","_content":"\n文明用户，笔记互动音频、游戏音频和音乐科技见闻感想，更新非常慢。\n\n### 统计\n本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> 次, 访客数 <span id=\"busuanzi_value_site_uv\"></span> 人次, 本文总阅读量 <span id=\"busuanzi_value_page_pv\"></span> 次","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-07 14:21:22\n---\n\n文明用户，笔记互动音频、游戏音频和音乐科技见闻感想，更新非常慢。\n\n### 统计\n本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> 次, 访客数 <span id=\"busuanzi_value_site_uv\"></span> 人次, 本文总阅读量 <span id=\"busuanzi_value_page_pv\"></span> 次","updated":"2019-10-17T09:02:54.386Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck1uhfnt700010enzre4tljnb","content":"<p>文明用户，笔记互动音频、游戏音频和音乐科技见闻感想，更新非常慢。</p>\n<h3 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h3><p>本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> 次, 访客数 <span id=\"busuanzi_value_site_uv\"></span> 人次, 本文总阅读量 <span id=\"busuanzi_value_page_pv\"></span> 次</p>\n","site":{"data":{}},"excerpt":"","more":"<p>文明用户，笔记互动音频、游戏音频和音乐科技见闻感想，更新非常慢。</p>\n<h3 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h3><p>本站总访问量 <span id=\"busuanzi_value_site_pv\"></span> 次, 访客数 <span id=\"busuanzi_value_site_uv\"></span> 人次, 本文总阅读量 <span id=\"busuanzi_value_page_pv\"></span> 次</p>\n"}],"Post":[{"title":"Building a GNU-Autotools-based Project for iOS: Part 1","date":"2019-10-17T06:22:34.000Z","_content":"\nThe open-source movement started in the middle of the Desktop domination, which could explain why there are much fewer resources in the mobile wild.\nRecently I tried to build a few renowned C/C++ open-source projects for iOS, only to find that:\n\n1. Nothing works out of the box;\n2. The scattered info on the Internet is often inconsistent or out of date.\n\n... familiar pattern for a platform with breaking changes every so often, keeping everyone busy and unable to document things tightly. But here is my $0.02. Hope it'll help me and someone who got bruises out of trials-and-errors.\n\nIn Part 1, I'll focus on how I managed to build static libs for iOS.\n\n\n## Environment\n\nCheck my setup before getting excited. You know why, having tried and failed upon many StackOverflow tips.\n\n- macOS 10.14.6\n- iOS 13.1\n- Xcode 11.1\n\nIf you can't get my solution working for your own projects, e.g., when it's based on a more recent environment, it's quite possible that you need a next-gen tip.\n\n\n## The Working Solution\n\nFor the impatient, here is the build script to place in the root folder of your autotool-based project\n\n```sh\n#! /bin/sh\n\n#\n# Build for iOS 64bit-ARM variants and iOS Simulator\n# - Place the script at project root\n# - Customize MIN_IOS_VERSION and other flags as needed\n# \n# Test Environment\n# - macOS 10.14.6\n# - iOS 13.1\n# - Xcode 11.1\n#\n\nBuild() {\n    # Ensure -fembed-bitcode builds, as workaround for libtool macOS bug\n    export MACOSX_DEPLOYMENT_TARGET=\"10.4\"\n    # Get the correct toolchain for target platforms\n    export CC=$(xcrun --find --sdk \"${SDK}\" clang)\n    export CXX=$(xcrun --find --sdk \"${SDK}\" clang++)\n    export CPP=$(xcrun --find --sdk \"${SDK}\" cpp)\n    export CFLAGS=\"${HOST_FLAGS} ${OPT_FLAGS}\"\n    export CXXFLAGS=\"${HOST_FLAGS} ${OPT_FLAGS}\"\n    export LDFLAGS=\"${HOST_FLAGS}\"\n\n    EXEC_PREFIX=\"${PLATFORMS}/${PLATFORM}\"\n    ./configure \\\n        --host=\"${CHOST}\" \\\n        --prefix=\"${PREFIX}\" \\\n        --exec-prefix=\"${EXEC_PREFIX}\" \\\n        --enable-static \\\n        --disable-shared  # Avoid Xcode loading dylibs even when staticlibs exist\n\n    make clean\n    mkdir -p \"${PLATFORMS}\" &> /dev/null\n    make V=1 -j\"${MAKE_JOBS}\" --debug=j\n    make install\n}\n\necho \"HI\"\n\n# Locations\nScriptDir=\"$( cd \"$( dirname \"$0\" )\" && pwd )\"\ncd - &> /dev/null\nPREFIX=\"${ScriptDir}\"/_build\nPLATFORMS=\"${PREFIX}\"/platforms\nUNIVERSAL=\"${PREFIX}\"/universal\n\n# Compiler options\nOPT_FLAGS=\"-O3 -g3 -fembed-bitcode\"\nMAKE_JOBS=8\nMIN_IOS_VERSION=8.0\n\n\n# Build for platforms\nSDK=\"iphoneos\"\nPLATFORM=\"arm\"\nPLATFORM_ARM=${PLATFORM}\nARCH_FLAGS=\"-arch arm64 -arch arm64e\"  # -arch armv7 -arch armv7s\nHOST_FLAGS=\"${ARCH_FLAGS} -miphoneos-version-min=${MIN_IOS_VERSION} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)\"\nCHOST=\"arm-apple-darwin\"\nBuild\n\nSDK=\"iphonesimulator\"\nPLATFORM=\"x86_64-sim\"\nPLATFORM_ISIM=${PLATFORM}\nARCH_FLAGS=\"-arch x86_64\"\nHOST_FLAGS=\"${ARCH_FLAGS} -mios-simulator-version-min=${MIN_IOS_VERSION} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)\"\nCHOST=\"x86_64-apple-darwin\"\nBuild\n\n\n# Create universal binary\ncd \"${PLATFORMS}/${PLATFORM_ARM}/lib\"\nLIB_NAME=`find . -iname *.a`\ncd -\nmkdir -p \"${UNIVERSAL}\" &> /dev/null\nlipo -create -output \"${UNIVERSAL}/${LIB_NAME}\" \"${PLATFORMS}/${PLATFORM_ARM}/lib/${LIB_NAME}\" \"${PLATFORMS}/${PLATFORM_ISIM}/lib/${LIB_NAME}\"\n\necho \"BYE\"\n```\n\n\n## The Expected Results\n\nAssuming you are at the project root, run the script and you should get:\n\n- The static libs for arm64 family and iOS simulator under `./\\_build/platforms/<ARCH>/lib`\n- The universal binary for all architectures combined\n\nRunning a `lipo` check on the universal binary should give you something like these:\n\n```sh\n$ lipo -info /path/to/mylib/_build/arm/lib/libmylib.a\nArchitectures in the fat file: /path/to/mylib/_build/arm/lib/libmylib.a are: arm64 arm64e \n```\n\n```sh\n$ lipo -info /path/to/mylib/_build/x86_64-sim/lib/libmylib.a\nNon-fat file: /path/to/mylib/_build/x86_64-sim/lib/libmylib.a is architecture: x86_64\n```\n\n```sh\n$ lipo -info /path/to/mylib/_build/universal/libmylib.a\nArchitectures in the fat file: /path/to/mylib/_build/universal/libmylib.a are: x86_64 arm64 arm64e \n```\n\n## The Lessons Learned\n\nI feel obliged to write down the major gotchas that may be help in the future\n\n### Compiler Executables\n\nI lost most of my time to this. I started by using the autotools compiler environment variables this way:\n\n```sh\nCC=clang\n```\n\nI then always ended up with `x86_64` instead of `arm64` as my arm builds. The correct way is shown in the solution. Before getting there, I was on the wrong track of distrusting the architecture triplets that I copied from the Internet. I've tried numerous triplets, i.e., arch-vendor-os, to no avail. GNU is not famous on giving you a list of standard names that just work. The closest lists I could find are:\n\n- [Libtool platforms](http://git.savannah.gnu.org/cgit/libtool.git/tree/doc/PLATFORMS)\n- [LLVM's llvm::Triple Class](http://llvm.org/doxygen/classllvm_1_1Triple.html)\n\nIt proved that none of them help with my situation.\n\n To make it worse, `config.guess`  always gives me the wrong `x86_64` as well:\n\n```sh\n$ ./config.guess\nx86_64-apple-darwin18.7.0\n```\n\nKnowing that autotools is just a wrapper over the real compilers, I've also tried to understand how the compiler works behind autotools. I created an Xcode project and watched the IDE build log, hunting for clues on magic flags. This proved useless as well, including the intriguing clang flag `-target arm64-apple-ios13.1`, not to be confused with the `--target` flag for `configure`.\n\nThe cross-compile idea also made me tweak the build/host/target combination over and over, only to find that having `--host` alone will suffice, the rest is implied by the assigned toolchain variables and flags.\n\n### Bitcode\n\nSince iOS 9, [enabling bitcode is required for library providers](https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2). However, to enabling bitcode without causing compiler errors such as:\n\n```sh\nld: -bind_at_load and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together\n```\n\nI have to put in a trick to signify the build machine version, which works around a supposed `libtool` bug:\n\n```sh\nexport MACOSX_DEPLOYMENT_TARGET=\"10.4\"\n```\n\n### Shared libs\n\nWithout adding `--disabled-shared`, autotools generate both dynamic and static libs for the project. This turns out to cue Xcode to try to load shared libs first (CRASH) even when I have not specified `-l` for the dylibs. So `--disabled-shared` is mandatory for using static libs.\n\n## Conclusions\n\nAutotools-based open-source projects have a long history from Desktop ages. Although the new build systems like CMakes improve the cross-platform build environment,  the mobile devs inevitably bump into dinosaur autotools-based repos, rigged with traps. Patience in research is the only cure, IMHO. \n\nIn Part 2 (schedule TBD), I'll build a Framework for iOS using autotools.\n\n\n## References\n\n- [bitcode](https://stackoverflow.com/q/53121019/987846)\n- [Compiler Executables](https://stackoverflow.com/q/26812060/987846)\n- [Cross-compile for ARM with Autoconf](https://stackoverflow.com/questions/15234959/cross-compiling-for-arm-with-autoconf)\n- [Shared Libs](https://stackoverflow.com/q/28679461/987846)\n\n\n\n","source":"_posts/Build-a-GNU-Autotools-based-project-for-iOS-Part-1.md","raw":"---\ntitle: 'Building a GNU-Autotools-based Project for iOS: Part 1'\ndate: 2019-10-17 14:22:34\ntags: build, iOS\n---\n\nThe open-source movement started in the middle of the Desktop domination, which could explain why there are much fewer resources in the mobile wild.\nRecently I tried to build a few renowned C/C++ open-source projects for iOS, only to find that:\n\n1. Nothing works out of the box;\n2. The scattered info on the Internet is often inconsistent or out of date.\n\n... familiar pattern for a platform with breaking changes every so often, keeping everyone busy and unable to document things tightly. But here is my $0.02. Hope it'll help me and someone who got bruises out of trials-and-errors.\n\nIn Part 1, I'll focus on how I managed to build static libs for iOS.\n\n\n## Environment\n\nCheck my setup before getting excited. You know why, having tried and failed upon many StackOverflow tips.\n\n- macOS 10.14.6\n- iOS 13.1\n- Xcode 11.1\n\nIf you can't get my solution working for your own projects, e.g., when it's based on a more recent environment, it's quite possible that you need a next-gen tip.\n\n\n## The Working Solution\n\nFor the impatient, here is the build script to place in the root folder of your autotool-based project\n\n```sh\n#! /bin/sh\n\n#\n# Build for iOS 64bit-ARM variants and iOS Simulator\n# - Place the script at project root\n# - Customize MIN_IOS_VERSION and other flags as needed\n# \n# Test Environment\n# - macOS 10.14.6\n# - iOS 13.1\n# - Xcode 11.1\n#\n\nBuild() {\n    # Ensure -fembed-bitcode builds, as workaround for libtool macOS bug\n    export MACOSX_DEPLOYMENT_TARGET=\"10.4\"\n    # Get the correct toolchain for target platforms\n    export CC=$(xcrun --find --sdk \"${SDK}\" clang)\n    export CXX=$(xcrun --find --sdk \"${SDK}\" clang++)\n    export CPP=$(xcrun --find --sdk \"${SDK}\" cpp)\n    export CFLAGS=\"${HOST_FLAGS} ${OPT_FLAGS}\"\n    export CXXFLAGS=\"${HOST_FLAGS} ${OPT_FLAGS}\"\n    export LDFLAGS=\"${HOST_FLAGS}\"\n\n    EXEC_PREFIX=\"${PLATFORMS}/${PLATFORM}\"\n    ./configure \\\n        --host=\"${CHOST}\" \\\n        --prefix=\"${PREFIX}\" \\\n        --exec-prefix=\"${EXEC_PREFIX}\" \\\n        --enable-static \\\n        --disable-shared  # Avoid Xcode loading dylibs even when staticlibs exist\n\n    make clean\n    mkdir -p \"${PLATFORMS}\" &> /dev/null\n    make V=1 -j\"${MAKE_JOBS}\" --debug=j\n    make install\n}\n\necho \"HI\"\n\n# Locations\nScriptDir=\"$( cd \"$( dirname \"$0\" )\" && pwd )\"\ncd - &> /dev/null\nPREFIX=\"${ScriptDir}\"/_build\nPLATFORMS=\"${PREFIX}\"/platforms\nUNIVERSAL=\"${PREFIX}\"/universal\n\n# Compiler options\nOPT_FLAGS=\"-O3 -g3 -fembed-bitcode\"\nMAKE_JOBS=8\nMIN_IOS_VERSION=8.0\n\n\n# Build for platforms\nSDK=\"iphoneos\"\nPLATFORM=\"arm\"\nPLATFORM_ARM=${PLATFORM}\nARCH_FLAGS=\"-arch arm64 -arch arm64e\"  # -arch armv7 -arch armv7s\nHOST_FLAGS=\"${ARCH_FLAGS} -miphoneos-version-min=${MIN_IOS_VERSION} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)\"\nCHOST=\"arm-apple-darwin\"\nBuild\n\nSDK=\"iphonesimulator\"\nPLATFORM=\"x86_64-sim\"\nPLATFORM_ISIM=${PLATFORM}\nARCH_FLAGS=\"-arch x86_64\"\nHOST_FLAGS=\"${ARCH_FLAGS} -mios-simulator-version-min=${MIN_IOS_VERSION} -isysroot $(xcrun --sdk ${SDK} --show-sdk-path)\"\nCHOST=\"x86_64-apple-darwin\"\nBuild\n\n\n# Create universal binary\ncd \"${PLATFORMS}/${PLATFORM_ARM}/lib\"\nLIB_NAME=`find . -iname *.a`\ncd -\nmkdir -p \"${UNIVERSAL}\" &> /dev/null\nlipo -create -output \"${UNIVERSAL}/${LIB_NAME}\" \"${PLATFORMS}/${PLATFORM_ARM}/lib/${LIB_NAME}\" \"${PLATFORMS}/${PLATFORM_ISIM}/lib/${LIB_NAME}\"\n\necho \"BYE\"\n```\n\n\n## The Expected Results\n\nAssuming you are at the project root, run the script and you should get:\n\n- The static libs for arm64 family and iOS simulator under `./\\_build/platforms/<ARCH>/lib`\n- The universal binary for all architectures combined\n\nRunning a `lipo` check on the universal binary should give you something like these:\n\n```sh\n$ lipo -info /path/to/mylib/_build/arm/lib/libmylib.a\nArchitectures in the fat file: /path/to/mylib/_build/arm/lib/libmylib.a are: arm64 arm64e \n```\n\n```sh\n$ lipo -info /path/to/mylib/_build/x86_64-sim/lib/libmylib.a\nNon-fat file: /path/to/mylib/_build/x86_64-sim/lib/libmylib.a is architecture: x86_64\n```\n\n```sh\n$ lipo -info /path/to/mylib/_build/universal/libmylib.a\nArchitectures in the fat file: /path/to/mylib/_build/universal/libmylib.a are: x86_64 arm64 arm64e \n```\n\n## The Lessons Learned\n\nI feel obliged to write down the major gotchas that may be help in the future\n\n### Compiler Executables\n\nI lost most of my time to this. I started by using the autotools compiler environment variables this way:\n\n```sh\nCC=clang\n```\n\nI then always ended up with `x86_64` instead of `arm64` as my arm builds. The correct way is shown in the solution. Before getting there, I was on the wrong track of distrusting the architecture triplets that I copied from the Internet. I've tried numerous triplets, i.e., arch-vendor-os, to no avail. GNU is not famous on giving you a list of standard names that just work. The closest lists I could find are:\n\n- [Libtool platforms](http://git.savannah.gnu.org/cgit/libtool.git/tree/doc/PLATFORMS)\n- [LLVM's llvm::Triple Class](http://llvm.org/doxygen/classllvm_1_1Triple.html)\n\nIt proved that none of them help with my situation.\n\n To make it worse, `config.guess`  always gives me the wrong `x86_64` as well:\n\n```sh\n$ ./config.guess\nx86_64-apple-darwin18.7.0\n```\n\nKnowing that autotools is just a wrapper over the real compilers, I've also tried to understand how the compiler works behind autotools. I created an Xcode project and watched the IDE build log, hunting for clues on magic flags. This proved useless as well, including the intriguing clang flag `-target arm64-apple-ios13.1`, not to be confused with the `--target` flag for `configure`.\n\nThe cross-compile idea also made me tweak the build/host/target combination over and over, only to find that having `--host` alone will suffice, the rest is implied by the assigned toolchain variables and flags.\n\n### Bitcode\n\nSince iOS 9, [enabling bitcode is required for library providers](https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2). However, to enabling bitcode without causing compiler errors such as:\n\n```sh\nld: -bind_at_load and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together\n```\n\nI have to put in a trick to signify the build machine version, which works around a supposed `libtool` bug:\n\n```sh\nexport MACOSX_DEPLOYMENT_TARGET=\"10.4\"\n```\n\n### Shared libs\n\nWithout adding `--disabled-shared`, autotools generate both dynamic and static libs for the project. This turns out to cue Xcode to try to load shared libs first (CRASH) even when I have not specified `-l` for the dylibs. So `--disabled-shared` is mandatory for using static libs.\n\n## Conclusions\n\nAutotools-based open-source projects have a long history from Desktop ages. Although the new build systems like CMakes improve the cross-platform build environment,  the mobile devs inevitably bump into dinosaur autotools-based repos, rigged with traps. Patience in research is the only cure, IMHO. \n\nIn Part 2 (schedule TBD), I'll build a Framework for iOS using autotools.\n\n\n## References\n\n- [bitcode](https://stackoverflow.com/q/53121019/987846)\n- [Compiler Executables](https://stackoverflow.com/q/26812060/987846)\n- [Cross-compile for ARM with Autoconf](https://stackoverflow.com/questions/15234959/cross-compiling-for-arm-with-autoconf)\n- [Shared Libs](https://stackoverflow.com/q/28679461/987846)\n\n\n\n","slug":"Build-a-GNU-Autotools-based-project-for-iOS-Part-1","published":1,"updated":"2019-10-17T09:08:39.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfnt500000enz6q7mg5gi","content":"<p>The open-source movement started in the middle of the Desktop domination, which could explain why there are much fewer resources in the mobile wild.<br>Recently I tried to build a few renowned C/C++ open-source projects for iOS, only to find that:</p>\n<ol>\n<li>Nothing works out of the box;</li>\n<li>The scattered info on the Internet is often inconsistent or out of date.</li>\n</ol>\n<p>… familiar pattern for a platform with breaking changes every so often, keeping everyone busy and unable to document things tightly. But here is my $0.02. Hope it’ll help me and someone who got bruises out of trials-and-errors.</p>\n<p>In Part 1, I’ll focus on how I managed to build static libs for iOS.</p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><p>Check my setup before getting excited. You know why, having tried and failed upon many StackOverflow tips.</p>\n<ul>\n<li>macOS 10.14.6</li>\n<li>iOS 13.1</li>\n<li>Xcode 11.1</li>\n</ul>\n<p>If you can’t get my solution working for your own projects, e.g., when it’s based on a more recent environment, it’s quite possible that you need a next-gen tip.</p>\n<h2 id=\"The-Working-Solution\"><a href=\"#The-Working-Solution\" class=\"headerlink\" title=\"The Working Solution\"></a>The Working Solution</h2><p>For the impatient, here is the build script to place in the root folder of your autotool-based project</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#! /bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Build for iOS 64bit-ARM variants and iOS Simulator</span></div><div class=\"line\"><span class=\"comment\"># - Place the script at project root</span></div><div class=\"line\"><span class=\"comment\"># - Customize MIN_IOS_VERSION and other flags as needed</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"comment\"># Test Environment</span></div><div class=\"line\"><span class=\"comment\"># - macOS 10.14.6</span></div><div class=\"line\"><span class=\"comment\"># - iOS 13.1</span></div><div class=\"line\"><span class=\"comment\"># - Xcode 11.1</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">Build</span></span>() &#123;</div><div class=\"line\">    <span class=\"comment\"># Ensure -fembed-bitcode builds, as workaround for libtool macOS bug</span></div><div class=\"line\">    <span class=\"built_in\">export</span> MACOSX_DEPLOYMENT_TARGET=<span class=\"string\">\"10.4\"</span></div><div class=\"line\">    <span class=\"comment\"># Get the correct toolchain for target platforms</span></div><div class=\"line\">    <span class=\"built_in\">export</span> CC=$(xcrun --find --sdk <span class=\"string\">\"<span class=\"variable\">$&#123;SDK&#125;</span>\"</span> clang)</div><div class=\"line\">    <span class=\"built_in\">export</span> CXX=$(xcrun --find --sdk <span class=\"string\">\"<span class=\"variable\">$&#123;SDK&#125;</span>\"</span> clang++)</div><div class=\"line\">    <span class=\"built_in\">export</span> CPP=$(xcrun --find --sdk <span class=\"string\">\"<span class=\"variable\">$&#123;SDK&#125;</span>\"</span> cpp)</div><div class=\"line\">    <span class=\"built_in\">export</span> CFLAGS=<span class=\"string\">\"<span class=\"variable\">$&#123;HOST_FLAGS&#125;</span> <span class=\"variable\">$&#123;OPT_FLAGS&#125;</span>\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> CXXFLAGS=<span class=\"string\">\"<span class=\"variable\">$&#123;HOST_FLAGS&#125;</span> <span class=\"variable\">$&#123;OPT_FLAGS&#125;</span>\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> LDFLAGS=<span class=\"string\">\"<span class=\"variable\">$&#123;HOST_FLAGS&#125;</span>\"</span></div><div class=\"line\"></div><div class=\"line\">    EXEC_PREFIX=<span class=\"string\">\"<span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM&#125;</span>\"</span></div><div class=\"line\">    ./configure \\</div><div class=\"line\">        --host=<span class=\"string\">\"<span class=\"variable\">$&#123;CHOST&#125;</span>\"</span> \\</div><div class=\"line\">        --prefix=<span class=\"string\">\"<span class=\"variable\">$&#123;PREFIX&#125;</span>\"</span> \\</div><div class=\"line\">        --exec-prefix=<span class=\"string\">\"<span class=\"variable\">$&#123;EXEC_PREFIX&#125;</span>\"</span> \\</div><div class=\"line\">        --enable-static \\</div><div class=\"line\">        --disable-shared  <span class=\"comment\"># Avoid Xcode loading dylibs even when staticlibs exist</span></div><div class=\"line\"></div><div class=\"line\">    make clean</div><div class=\"line\">    mkdir -p <span class=\"string\">\"<span class=\"variable\">$&#123;PLATFORMS&#125;</span>\"</span> &amp;&gt; /dev/null</div><div class=\"line\">    make V=1 -j<span class=\"string\">\"<span class=\"variable\">$&#123;MAKE_JOBS&#125;</span>\"</span> --debug=j</div><div class=\"line\">    make install</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HI\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Locations</span></div><div class=\"line\">ScriptDir=<span class=\"string\">\"<span class=\"variable\">$( cd \"$( dirname \"$0\" )</span>\"</span> &amp;&amp; <span class=\"built_in\">pwd</span> )<span class=\"string\">\"</span></div><div class=\"line\">cd - &amp;&gt; /dev/null</div><div class=\"line\">PREFIX=\"<span class=\"variable\">$&#123;ScriptDir&#125;</span><span class=\"string\">\"/_build</span></div><div class=\"line\">PLATFORMS=\"<span class=\"variable\">$&#123;PREFIX&#125;</span><span class=\"string\">\"/platforms</span></div><div class=\"line\">UNIVERSAL=\"<span class=\"variable\">$&#123;PREFIX&#125;</span><span class=\"string\">\"/universal</span></div><div class=\"line\"></div><div class=\"line\"># Compiler options</div><div class=\"line\">OPT_FLAGS=\"-O3 -g3 -fembed-bitcode<span class=\"string\">\"</span></div><div class=\"line\">MAKE_JOBS=8</div><div class=\"line\">MIN_IOS_VERSION=8.0</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Build for platforms</div><div class=\"line\">SDK=\"iphoneos<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM=\"arm<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM_ARM=<span class=\"variable\">$&#123;PLATFORM&#125;</span></div><div class=\"line\">ARCH_FLAGS=\"-arch arm64 -arch arm64e<span class=\"string\">\"  # -arch armv7 -arch armv7s</span></div><div class=\"line\">HOST_FLAGS=\"<span class=\"variable\">$&#123;ARCH_FLAGS&#125;</span> -miphoneos-version-min=<span class=\"variable\">$&#123;MIN_IOS_VERSION&#125;</span> -isysroot $(xcrun --sdk <span class=\"variable\">$&#123;SDK&#125;</span> --show-sdk-path)<span class=\"string\">\"</span></div><div class=\"line\">CHOST=\"arm-apple-darwin<span class=\"string\">\"</span></div><div class=\"line\">Build</div><div class=\"line\"></div><div class=\"line\">SDK=\"iphonesimulator<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM=\"x86_64-sim<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM_ISIM=<span class=\"variable\">$&#123;PLATFORM&#125;</span></div><div class=\"line\">ARCH_FLAGS=\"-arch x86_64<span class=\"string\">\"</span></div><div class=\"line\">HOST_FLAGS=\"<span class=\"variable\">$&#123;ARCH_FLAGS&#125;</span> -mios-simulator-version-min=<span class=\"variable\">$&#123;MIN_IOS_VERSION&#125;</span> -isysroot $(xcrun --sdk <span class=\"variable\">$&#123;SDK&#125;</span> --show-sdk-path)<span class=\"string\">\"</span></div><div class=\"line\">CHOST=\"x86_64-apple-darwin<span class=\"string\">\"</span></div><div class=\"line\">Build</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Create universal binary</div><div class=\"line\">cd \"<span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM_ARM&#125;</span>/lib<span class=\"string\">\"</span></div><div class=\"line\">LIB_NAME=`find . -iname *.a`</div><div class=\"line\">cd -</div><div class=\"line\">mkdir -p \"<span class=\"variable\">$&#123;UNIVERSAL&#125;</span><span class=\"string\">\" &amp;&gt; /dev/null</span></div><div class=\"line\">lipo -create -output \"<span class=\"variable\">$&#123;UNIVERSAL&#125;</span>/<span class=\"variable\">$&#123;LIB_NAME&#125;</span><span class=\"string\">\" \"</span><span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM_ARM&#125;</span>/lib/<span class=\"variable\">$&#123;LIB_NAME&#125;</span><span class=\"string\">\" \"</span><span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM_ISIM&#125;</span>/lib/<span class=\"variable\">$&#123;LIB_NAME&#125;</span><span class=\"string\">\"</span></div><div class=\"line\"></div><div class=\"line\">echo \"BYE<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"The-Expected-Results\"><a href=\"#The-Expected-Results\" class=\"headerlink\" title=\"The Expected Results\"></a>The Expected Results</h2><p>Assuming you are at the project root, run the script and you should get:</p>\n<ul>\n<li>The static libs for arm64 family and iOS simulator under <code>./\\_build/platforms/&lt;ARCH&gt;/lib</code></li>\n<li>The universal binary for all architectures combined</li>\n</ul>\n<p>Running a <code>lipo</code> check on the universal binary should give you something like these:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lipo -info /path/to/mylib/_build/arm/lib/libmylib.a</div><div class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: /path/to/mylib/_build/arm/lib/libmylib.a are: arm64 arm64e</div></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lipo -info /path/to/mylib/_build/x86_64-sim/lib/libmylib.a</div><div class=\"line\">Non-fat file: /path/to/mylib/_build/x86_64-sim/lib/libmylib.a is architecture: x86_64</div></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lipo -info /path/to/mylib/_build/universal/libmylib.a</div><div class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: /path/to/mylib/_build/universal/libmylib.a are: x86_64 arm64 arm64e</div></pre></td></tr></table></figure>\n<h2 id=\"The-Lessons-Learned\"><a href=\"#The-Lessons-Learned\" class=\"headerlink\" title=\"The Lessons Learned\"></a>The Lessons Learned</h2><p>I feel obliged to write down the major gotchas that may be help in the future</p>\n<h3 id=\"Compiler-Executables\"><a href=\"#Compiler-Executables\" class=\"headerlink\" title=\"Compiler Executables\"></a>Compiler Executables</h3><p>I lost most of my time to this. I started by using the autotools compiler environment variables this way:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CC=clang</div></pre></td></tr></table></figure>\n<p>I then always ended up with <code>x86_64</code> instead of <code>arm64</code> as my arm builds. The correct way is shown in the solution. Before getting there, I was on the wrong track of distrusting the architecture triplets that I copied from the Internet. I’ve tried numerous triplets, i.e., arch-vendor-os, to no avail. GNU is not famous on giving you a list of standard names that just work. The closest lists I could find are:</p>\n<ul>\n<li><a href=\"http://git.savannah.gnu.org/cgit/libtool.git/tree/doc/PLATFORMS\" target=\"_blank\" rel=\"external\">Libtool platforms</a></li>\n<li><a href=\"http://llvm.org/doxygen/classllvm_1_1Triple.html\" target=\"_blank\" rel=\"external\">LLVM’s llvm::Triple Class</a></li>\n</ul>\n<p>It proved that none of them help with my situation.</p>\n<p> To make it worse, <code>config.guess</code>  always gives me the wrong <code>x86_64</code> as well:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./config.guess</div><div class=\"line\">x86_64-apple-darwin18.7.0</div></pre></td></tr></table></figure>\n<p>Knowing that autotools is just a wrapper over the real compilers, I’ve also tried to understand how the compiler works behind autotools. I created an Xcode project and watched the IDE build log, hunting for clues on magic flags. This proved useless as well, including the intriguing clang flag <code>-target arm64-apple-ios13.1</code>, not to be confused with the <code>--target</code> flag for <code>configure</code>.</p>\n<p>The cross-compile idea also made me tweak the build/host/target combination over and over, only to find that having <code>--host</code> alone will suffice, the rest is implied by the assigned toolchain variables and flags.</p>\n<h3 id=\"Bitcode\"><a href=\"#Bitcode\" class=\"headerlink\" title=\"Bitcode\"></a>Bitcode</h3><p>Since iOS 9, <a href=\"https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2\" target=\"_blank\" rel=\"external\">enabling bitcode is required for library providers</a>. However, to enabling bitcode without causing compiler errors such as:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ld: -bind_at_load and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together</div></pre></td></tr></table></figure>\n<p>I have to put in a trick to signify the build machine version, which works around a supposed <code>libtool</code> bug:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> MACOSX_DEPLOYMENT_TARGET=<span class=\"string\">\"10.4\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Shared-libs\"><a href=\"#Shared-libs\" class=\"headerlink\" title=\"Shared libs\"></a>Shared libs</h3><p>Without adding <code>--disabled-shared</code>, autotools generate both dynamic and static libs for the project. This turns out to cue Xcode to try to load shared libs first (CRASH) even when I have not specified <code>-l</code> for the dylibs. So <code>--disabled-shared</code> is mandatory for using static libs.</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>Autotools-based open-source projects have a long history from Desktop ages. Although the new build systems like CMakes improve the cross-platform build environment,  the mobile devs inevitably bump into dinosaur autotools-based repos, rigged with traps. Patience in research is the only cure, IMHO. </p>\n<p>In Part 2 (schedule TBD), I’ll build a Framework for iOS using autotools.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://stackoverflow.com/q/53121019/987846\" target=\"_blank\" rel=\"external\">bitcode</a></li>\n<li><a href=\"https://stackoverflow.com/q/26812060/987846\" target=\"_blank\" rel=\"external\">Compiler Executables</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15234959/cross-compiling-for-arm-with-autoconf\" target=\"_blank\" rel=\"external\">Cross-compile for ARM with Autoconf</a></li>\n<li><a href=\"https://stackoverflow.com/q/28679461/987846\" target=\"_blank\" rel=\"external\">Shared Libs</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>The open-source movement started in the middle of the Desktop domination, which could explain why there are much fewer resources in the mobile wild.<br>Recently I tried to build a few renowned C/C++ open-source projects for iOS, only to find that:</p>\n<ol>\n<li>Nothing works out of the box;</li>\n<li>The scattered info on the Internet is often inconsistent or out of date.</li>\n</ol>\n<p>… familiar pattern for a platform with breaking changes every so often, keeping everyone busy and unable to document things tightly. But here is my $0.02. Hope it’ll help me and someone who got bruises out of trials-and-errors.</p>\n<p>In Part 1, I’ll focus on how I managed to build static libs for iOS.</p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><p>Check my setup before getting excited. You know why, having tried and failed upon many StackOverflow tips.</p>\n<ul>\n<li>macOS 10.14.6</li>\n<li>iOS 13.1</li>\n<li>Xcode 11.1</li>\n</ul>\n<p>If you can’t get my solution working for your own projects, e.g., when it’s based on a more recent environment, it’s quite possible that you need a next-gen tip.</p>\n<h2 id=\"The-Working-Solution\"><a href=\"#The-Working-Solution\" class=\"headerlink\" title=\"The Working Solution\"></a>The Working Solution</h2><p>For the impatient, here is the build script to place in the root folder of your autotool-based project</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#! /bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Build for iOS 64bit-ARM variants and iOS Simulator</span></div><div class=\"line\"><span class=\"comment\"># - Place the script at project root</span></div><div class=\"line\"><span class=\"comment\"># - Customize MIN_IOS_VERSION and other flags as needed</span></div><div class=\"line\"><span class=\"comment\"># </span></div><div class=\"line\"><span class=\"comment\"># Test Environment</span></div><div class=\"line\"><span class=\"comment\"># - macOS 10.14.6</span></div><div class=\"line\"><span class=\"comment\"># - iOS 13.1</span></div><div class=\"line\"><span class=\"comment\"># - Xcode 11.1</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">Build</span></span>() &#123;</div><div class=\"line\">    <span class=\"comment\"># Ensure -fembed-bitcode builds, as workaround for libtool macOS bug</span></div><div class=\"line\">    <span class=\"built_in\">export</span> MACOSX_DEPLOYMENT_TARGET=<span class=\"string\">\"10.4\"</span></div><div class=\"line\">    <span class=\"comment\"># Get the correct toolchain for target platforms</span></div><div class=\"line\">    <span class=\"built_in\">export</span> CC=$(xcrun --find --sdk <span class=\"string\">\"<span class=\"variable\">$&#123;SDK&#125;</span>\"</span> clang)</div><div class=\"line\">    <span class=\"built_in\">export</span> CXX=$(xcrun --find --sdk <span class=\"string\">\"<span class=\"variable\">$&#123;SDK&#125;</span>\"</span> clang++)</div><div class=\"line\">    <span class=\"built_in\">export</span> CPP=$(xcrun --find --sdk <span class=\"string\">\"<span class=\"variable\">$&#123;SDK&#125;</span>\"</span> cpp)</div><div class=\"line\">    <span class=\"built_in\">export</span> CFLAGS=<span class=\"string\">\"<span class=\"variable\">$&#123;HOST_FLAGS&#125;</span> <span class=\"variable\">$&#123;OPT_FLAGS&#125;</span>\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> CXXFLAGS=<span class=\"string\">\"<span class=\"variable\">$&#123;HOST_FLAGS&#125;</span> <span class=\"variable\">$&#123;OPT_FLAGS&#125;</span>\"</span></div><div class=\"line\">    <span class=\"built_in\">export</span> LDFLAGS=<span class=\"string\">\"<span class=\"variable\">$&#123;HOST_FLAGS&#125;</span>\"</span></div><div class=\"line\"></div><div class=\"line\">    EXEC_PREFIX=<span class=\"string\">\"<span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM&#125;</span>\"</span></div><div class=\"line\">    ./configure \\</div><div class=\"line\">        --host=<span class=\"string\">\"<span class=\"variable\">$&#123;CHOST&#125;</span>\"</span> \\</div><div class=\"line\">        --prefix=<span class=\"string\">\"<span class=\"variable\">$&#123;PREFIX&#125;</span>\"</span> \\</div><div class=\"line\">        --exec-prefix=<span class=\"string\">\"<span class=\"variable\">$&#123;EXEC_PREFIX&#125;</span>\"</span> \\</div><div class=\"line\">        --enable-static \\</div><div class=\"line\">        --disable-shared  <span class=\"comment\"># Avoid Xcode loading dylibs even when staticlibs exist</span></div><div class=\"line\"></div><div class=\"line\">    make clean</div><div class=\"line\">    mkdir -p <span class=\"string\">\"<span class=\"variable\">$&#123;PLATFORMS&#125;</span>\"</span> &amp;&gt; /dev/null</div><div class=\"line\">    make V=1 -j<span class=\"string\">\"<span class=\"variable\">$&#123;MAKE_JOBS&#125;</span>\"</span> --debug=j</div><div class=\"line\">    make install</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"HI\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Locations</span></div><div class=\"line\">ScriptDir=<span class=\"string\">\"<span class=\"variable\">$( cd \"$( dirname \"$0\" )</span>\"</span> &amp;&amp; <span class=\"built_in\">pwd</span> )<span class=\"string\">\"</span></div><div class=\"line\">cd - &amp;&gt; /dev/null</div><div class=\"line\">PREFIX=\"<span class=\"variable\">$&#123;ScriptDir&#125;</span><span class=\"string\">\"/_build</span></div><div class=\"line\">PLATFORMS=\"<span class=\"variable\">$&#123;PREFIX&#125;</span><span class=\"string\">\"/platforms</span></div><div class=\"line\">UNIVERSAL=\"<span class=\"variable\">$&#123;PREFIX&#125;</span><span class=\"string\">\"/universal</span></div><div class=\"line\"></div><div class=\"line\"># Compiler options</div><div class=\"line\">OPT_FLAGS=\"-O3 -g3 -fembed-bitcode<span class=\"string\">\"</span></div><div class=\"line\">MAKE_JOBS=8</div><div class=\"line\">MIN_IOS_VERSION=8.0</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Build for platforms</div><div class=\"line\">SDK=\"iphoneos<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM=\"arm<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM_ARM=<span class=\"variable\">$&#123;PLATFORM&#125;</span></div><div class=\"line\">ARCH_FLAGS=\"-arch arm64 -arch arm64e<span class=\"string\">\"  # -arch armv7 -arch armv7s</span></div><div class=\"line\">HOST_FLAGS=\"<span class=\"variable\">$&#123;ARCH_FLAGS&#125;</span> -miphoneos-version-min=<span class=\"variable\">$&#123;MIN_IOS_VERSION&#125;</span> -isysroot $(xcrun --sdk <span class=\"variable\">$&#123;SDK&#125;</span> --show-sdk-path)<span class=\"string\">\"</span></div><div class=\"line\">CHOST=\"arm-apple-darwin<span class=\"string\">\"</span></div><div class=\"line\">Build</div><div class=\"line\"></div><div class=\"line\">SDK=\"iphonesimulator<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM=\"x86_64-sim<span class=\"string\">\"</span></div><div class=\"line\">PLATFORM_ISIM=<span class=\"variable\">$&#123;PLATFORM&#125;</span></div><div class=\"line\">ARCH_FLAGS=\"-arch x86_64<span class=\"string\">\"</span></div><div class=\"line\">HOST_FLAGS=\"<span class=\"variable\">$&#123;ARCH_FLAGS&#125;</span> -mios-simulator-version-min=<span class=\"variable\">$&#123;MIN_IOS_VERSION&#125;</span> -isysroot $(xcrun --sdk <span class=\"variable\">$&#123;SDK&#125;</span> --show-sdk-path)<span class=\"string\">\"</span></div><div class=\"line\">CHOST=\"x86_64-apple-darwin<span class=\"string\">\"</span></div><div class=\"line\">Build</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Create universal binary</div><div class=\"line\">cd \"<span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM_ARM&#125;</span>/lib<span class=\"string\">\"</span></div><div class=\"line\">LIB_NAME=`find . -iname *.a`</div><div class=\"line\">cd -</div><div class=\"line\">mkdir -p \"<span class=\"variable\">$&#123;UNIVERSAL&#125;</span><span class=\"string\">\" &amp;&gt; /dev/null</span></div><div class=\"line\">lipo -create -output \"<span class=\"variable\">$&#123;UNIVERSAL&#125;</span>/<span class=\"variable\">$&#123;LIB_NAME&#125;</span><span class=\"string\">\" \"</span><span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM_ARM&#125;</span>/lib/<span class=\"variable\">$&#123;LIB_NAME&#125;</span><span class=\"string\">\" \"</span><span class=\"variable\">$&#123;PLATFORMS&#125;</span>/<span class=\"variable\">$&#123;PLATFORM_ISIM&#125;</span>/lib/<span class=\"variable\">$&#123;LIB_NAME&#125;</span><span class=\"string\">\"</span></div><div class=\"line\"></div><div class=\"line\">echo \"BYE<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"The-Expected-Results\"><a href=\"#The-Expected-Results\" class=\"headerlink\" title=\"The Expected Results\"></a>The Expected Results</h2><p>Assuming you are at the project root, run the script and you should get:</p>\n<ul>\n<li>The static libs for arm64 family and iOS simulator under <code>./\\_build/platforms/&lt;ARCH&gt;/lib</code></li>\n<li>The universal binary for all architectures combined</li>\n</ul>\n<p>Running a <code>lipo</code> check on the universal binary should give you something like these:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lipo -info /path/to/mylib/_build/arm/lib/libmylib.a</div><div class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: /path/to/mylib/_build/arm/lib/libmylib.a are: arm64 arm64e</div></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lipo -info /path/to/mylib/_build/x86_64-sim/lib/libmylib.a</div><div class=\"line\">Non-fat file: /path/to/mylib/_build/x86_64-sim/lib/libmylib.a is architecture: x86_64</div></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ lipo -info /path/to/mylib/_build/universal/libmylib.a</div><div class=\"line\">Architectures <span class=\"keyword\">in</span> the fat file: /path/to/mylib/_build/universal/libmylib.a are: x86_64 arm64 arm64e</div></pre></td></tr></table></figure>\n<h2 id=\"The-Lessons-Learned\"><a href=\"#The-Lessons-Learned\" class=\"headerlink\" title=\"The Lessons Learned\"></a>The Lessons Learned</h2><p>I feel obliged to write down the major gotchas that may be help in the future</p>\n<h3 id=\"Compiler-Executables\"><a href=\"#Compiler-Executables\" class=\"headerlink\" title=\"Compiler Executables\"></a>Compiler Executables</h3><p>I lost most of my time to this. I started by using the autotools compiler environment variables this way:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CC=clang</div></pre></td></tr></table></figure>\n<p>I then always ended up with <code>x86_64</code> instead of <code>arm64</code> as my arm builds. The correct way is shown in the solution. Before getting there, I was on the wrong track of distrusting the architecture triplets that I copied from the Internet. I’ve tried numerous triplets, i.e., arch-vendor-os, to no avail. GNU is not famous on giving you a list of standard names that just work. The closest lists I could find are:</p>\n<ul>\n<li><a href=\"http://git.savannah.gnu.org/cgit/libtool.git/tree/doc/PLATFORMS\" target=\"_blank\" rel=\"external\">Libtool platforms</a></li>\n<li><a href=\"http://llvm.org/doxygen/classllvm_1_1Triple.html\" target=\"_blank\" rel=\"external\">LLVM’s llvm::Triple Class</a></li>\n</ul>\n<p>It proved that none of them help with my situation.</p>\n<p> To make it worse, <code>config.guess</code>  always gives me the wrong <code>x86_64</code> as well:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./config.guess</div><div class=\"line\">x86_64-apple-darwin18.7.0</div></pre></td></tr></table></figure>\n<p>Knowing that autotools is just a wrapper over the real compilers, I’ve also tried to understand how the compiler works behind autotools. I created an Xcode project and watched the IDE build log, hunting for clues on magic flags. This proved useless as well, including the intriguing clang flag <code>-target arm64-apple-ios13.1</code>, not to be confused with the <code>--target</code> flag for <code>configure</code>.</p>\n<p>The cross-compile idea also made me tweak the build/host/target combination over and over, only to find that having <code>--host</code> alone will suffice, the rest is implied by the assigned toolchain variables and flags.</p>\n<h3 id=\"Bitcode\"><a href=\"#Bitcode\" class=\"headerlink\" title=\"Bitcode\"></a>Bitcode</h3><p>Since iOS 9, <a href=\"https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2\" target=\"_blank\" rel=\"external\">enabling bitcode is required for library providers</a>. However, to enabling bitcode without causing compiler errors such as:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ld: -bind_at_load and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together</div></pre></td></tr></table></figure>\n<p>I have to put in a trick to signify the build machine version, which works around a supposed <code>libtool</code> bug:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> MACOSX_DEPLOYMENT_TARGET=<span class=\"string\">\"10.4\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"Shared-libs\"><a href=\"#Shared-libs\" class=\"headerlink\" title=\"Shared libs\"></a>Shared libs</h3><p>Without adding <code>--disabled-shared</code>, autotools generate both dynamic and static libs for the project. This turns out to cue Xcode to try to load shared libs first (CRASH) even when I have not specified <code>-l</code> for the dylibs. So <code>--disabled-shared</code> is mandatory for using static libs.</p>\n<h2 id=\"Conclusions\"><a href=\"#Conclusions\" class=\"headerlink\" title=\"Conclusions\"></a>Conclusions</h2><p>Autotools-based open-source projects have a long history from Desktop ages. Although the new build systems like CMakes improve the cross-platform build environment,  the mobile devs inevitably bump into dinosaur autotools-based repos, rigged with traps. Patience in research is the only cure, IMHO. </p>\n<p>In Part 2 (schedule TBD), I’ll build a Framework for iOS using autotools.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://stackoverflow.com/q/53121019/987846\" target=\"_blank\" rel=\"external\">bitcode</a></li>\n<li><a href=\"https://stackoverflow.com/q/26812060/987846\" target=\"_blank\" rel=\"external\">Compiler Executables</a></li>\n<li><a href=\"https://stackoverflow.com/questions/15234959/cross-compiling-for-arm-with-autoconf\" target=\"_blank\" rel=\"external\">Cross-compile for ARM with Autoconf</a></li>\n<li><a href=\"https://stackoverflow.com/q/28679461/987846\" target=\"_blank\" rel=\"external\">Shared Libs</a></li>\n</ul>\n"},{"title":"GDC17 音频见闻 - 空间音频 Spatial Audio（2）","date":"2017-03-13T09:55:57.000Z","_content":"\n## Wwise 2017.1 的空间音频新功能\n\n{% asset_img sa-wwise-wal.jpg 全新 Spatial Audio 测试地图：Wwise Audio Lab %}\n\n上篇说到微软的 Project Triton 未来的方向恰好与 Wwise 2017.1 的一些新功能不谋而合，简单地说，Wwise","source":"_posts/GDC17-Audio-Spatial-Audio-2.md","raw":"---\ntitle: GDC17 音频见闻 - 空间音频 Spatial Audio（2）\ndate: 2017-03-13 17:55:57\ncategories: \n\n- GameAudio\ntags: conference, gdc17, reverb, obstruction-occlusion, spatialaudio\n---\n\n## Wwise 2017.1 的空间音频新功能\n\n{% asset_img sa-wwise-wal.jpg 全新 Spatial Audio 测试地图：Wwise Audio Lab %}\n\n上篇说到微软的 Project Triton 未来的方向恰好与 Wwise 2017.1 的一些新功能不谋而合，简单地说，Wwise","slug":"GDC17-Audio-Spatial-Audio-2","published":1,"updated":"2019-10-17T09:02:54.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfnt900020enzzqslyzhk","content":"<h2 id=\"Wwise-2017-1-的空间音频新功能\"><a href=\"#Wwise-2017-1-的空间音频新功能\" class=\"headerlink\" title=\"Wwise 2017.1 的空间音频新功能\"></a>Wwise 2017.1 的空间音频新功能</h2><img src=\"/2017/03/13/GDC17-Audio-Spatial-Audio-2/sa-wwise-wal.jpg\" title=\"全新 Spatial Audio 测试地图：Wwise Audio Lab\">\n<p>上篇说到微软的 Project Triton 未来的方向恰好与 Wwise 2017.1 的一些新功能不谋而合，简单地说，Wwise</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Wwise-2017-1-的空间音频新功能\"><a href=\"#Wwise-2017-1-的空间音频新功能\" class=\"headerlink\" title=\"Wwise 2017.1 的空间音频新功能\"></a>Wwise 2017.1 的空间音频新功能</h2><img src=\"/2017/03/13/GDC17-Audio-Spatial-Audio-2/sa-wwise-wal.jpg\" title=\"全新 Spatial Audio 测试地图：Wwise Audio Lab\">\n<p>上篇说到微软的 Project Triton 未来的方向恰好与 Wwise 2017.1 的一些新功能不谋而合，简单地说，Wwise</p>\n"},{"title":"GDC17 音频见闻 - 空间音频 Spatial Audio（1）","date":"2017-03-13T05:50:33.000Z","_content":"\n## 《Gears of War 4》中的环境声学预处理技术\n\n继 Binaural 和 Ambisonics 之后，今年 GDC 上的空间音频热门关键字多了*混响*（Reverberation）、*声障和声笼*（Obstruction & Occlusion）这些环境声学概念，标志着对沉浸音频体验发起的又一次冲锋。这些游戏音频界的旧瓶里最受瞩目的新酒之一当数微软研究院和《战争机器4》（GoW4）开发组的 [Project Triton](http://schedule.gdconf.com/session/gears-of-war-4-project-triton-pre-computed-environmental-wave-acoustics)，即通过预先演算声波传播物理参数来辅助人工设计的环境声学效果方案。本次的演讲实际上是微软已启动六年之久系列研究的首次产品化成果。演讲幻灯片[已放出](http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx)。以下尝试稍加总结。\n\n### 成果\n\n这乍一看很学术范的技术主要是为了解决游戏环境声学设计中的一大痛点：传统设计方法依赖在游戏地图中手工标注或绘制声学区域，再挂接音频效果器来实现室内混响和声障／声笼效果；音频中间件如 Wwise 的效果器控制参数一般是够用的，但在游戏中手工标注的工作量巨大且容易出错，实际开发工期紧，很难打磨调优。\n\n不巧，玩家极易通过生活经验察觉这类设计错误，后果严重，参见《刺客信条：大革命》中曾出现的[全局 bug](http://forums.ubi.com/showthread.php/973716-AC-Unity-Sound-Bug-Forums)。音频设计界早就希望能像物理渲染界一样自动化这个过程，为创意设计赢得时间。\n\n演讲中放出的*最终*解决方案：\n\n{% asset_img sa-triton-game-integration.jpg Triton 系统整合示意图 %}\n\n- 离线预处理：在游戏地图中自动选取采样位置，对各个位置上的发声体-听者结对（emitter-listener pair）根据几何数据自动做 3D 声波传播模拟并生成原始声学数据库；\n- 解析：从原始声学数据自动提炼出一组感知参数值：直达波能量、反射波能量、反射波衰减率（wetness）和混响衰减率；\n- 接入音频中间件：运行时通过查询数据库获取感知参数值，用来控制 Wwise 中的声障／声笼滤波器和辅助总线上的混响效果器，产生实时互动的声学效果。\n\n用这种方法，设计师不再需要手动标注环境声学区域，可以专注于艺术效果设计，即通过感知参数来控制音频效果输出。结果不但错误少，且游戏中的实时性能也达到甚至优于项目初始要求。\n\n一些细节：\n\n- 声障值和声笼值分别用初始能量（直达声比例）和反射能量来代表；\n- 区分室外和室内情况，方法是通过在室外设置理想边界，并测量从玩家位置发声后能抵达这条边界的能量占总能量的比例来推算*室内-室外比*，以此来做到平滑过渡；\n- 原始声学数据计算用 100 台机器需要约 4 小时计算时间，初始数据为 50 TB，做解析后降为 100 MB。\n\n### 经历\n\n很多学术报告大概也就到此为止了，让一部分听众感觉高山仰止，另一部分不知所云。然而这次两位主讲人–微软研究院的 Nikunj Raghuvanshi 和 Coalition 工作室的 John Tennant –继续披露了研发和产品化的详细经过，以机器人领域的[*恐怖谷*](http://baike.baidu.com/item/恐怖谷理论)现象为纲，讲述了从真实到艺术真实的探索（微信游戏音频群里尾巴老师语），体现了对基础研究和产品化过程深刻的理解，是演讲中我个人最喜欢的部分。\n\n{% asset_img  sa-triton-uncanny-valley.jpg %}\n\n从 2011 年的 V1.0 到 2014 年的 V2.0 直到最终版，项目经历了标准的恐怖谷历程：\n\n1. V1.0 中初尝预处理甜头后，发现一些问题亟待解决，比如区分室内外和消除混响效果中的浑浊；\n2. 于是寄希望于自动化和仿真路线，火力全开，将模型复杂化：从 FDN 混响换成卷积混响，声学数据因此变成冲激响应，在增加室外效果器组分支的同时还增加了对早期反射和后期混响的区分，导致要控制 12 个混响单元；\n3. 不幸跌入恐怖谷，为了自救而后退一步，着重解决艺术真实问题，最后简化了模型，按时保质完成了产品化。\n\n一些真实和艺术真实的折衷处理：\n\n- 冲激响应路线很难控制质量：录音和测量人员不同，因此高度依赖配准，为后期调试带来困难，终弃；\n- 混响效果受输入声音动态范围影响，将输入的*真实*动态范围做了艺术限制之后，清晰度得到提升；\n- 与传统影视建立的艺术效果标准相比，物理计算中得出的直达声能量以及衰减时间，结合游戏具体玩法后，会出现不合心理期望的情况，终弃。\n\n有意思的是，上面的道理很多其实是马后炮：是在主动作出简化混响模型的决定后从实践中领悟到的，又一次说明奥卡姆剃刀原则的普适性。\n\n### 未来\n\nTriton 项目的未来计划包括在预处理模型中加入：\n\n- 直达分量方向性、早期反射、户外回声；\n- 动态几何结构，比如活动的门窗和物理毁坏。\n\n巧的是，Triton 和 Wwise 不谋而合，这几条正是 GDC17 上 Wwise 2017.1 版本展出的新 Spatial Audio 功能的一部分，请看下篇。\n\n### 相关资料\n\n- 演讲幻灯片: ['Gears of War 4', Project Triton: Pre-Computed Environmental Wave Acoustics](http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx)\n- Engadget 文章：[Microsoft Research helped 'Gears of War 4' sound so good](https://www.engadget.com/2016/10/25/gears-of-war-4-microsoft-research-triton/)\n- Triton V1.0 论文：[Raghuvanshi, et. al., SIGGRAPH 2010, “Precomputed wave simulation for real-time sound propagation of dynamic sources in complex scenes”\n](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/6.pdf)\n- Triton V2.0 论文：[Raghuvanshi & Snyder, SIGGRAPH 2014, \u000b“Parametric wave field coding for precomputed sound propagation”\n](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/ParametricWaveField.pdf)\n","source":"_posts/GDC17-音频见闻（1）-空间音频-Spatial-Audio.md","raw":"---\ntitle: GDC17 音频见闻 - 空间音频 Spatial Audio（1）\ndate: 2017-03-13 13:50:33\ncategories: \n\n- GameAudio\ntags: conference, gdc17, reverb, obstruction-occlusion, spatialaudio\n---\n\n## 《Gears of War 4》中的环境声学预处理技术\n\n继 Binaural 和 Ambisonics 之后，今年 GDC 上的空间音频热门关键字多了*混响*（Reverberation）、*声障和声笼*（Obstruction & Occlusion）这些环境声学概念，标志着对沉浸音频体验发起的又一次冲锋。这些游戏音频界的旧瓶里最受瞩目的新酒之一当数微软研究院和《战争机器4》（GoW4）开发组的 [Project Triton](http://schedule.gdconf.com/session/gears-of-war-4-project-triton-pre-computed-environmental-wave-acoustics)，即通过预先演算声波传播物理参数来辅助人工设计的环境声学效果方案。本次的演讲实际上是微软已启动六年之久系列研究的首次产品化成果。演讲幻灯片[已放出](http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx)。以下尝试稍加总结。\n\n### 成果\n\n这乍一看很学术范的技术主要是为了解决游戏环境声学设计中的一大痛点：传统设计方法依赖在游戏地图中手工标注或绘制声学区域，再挂接音频效果器来实现室内混响和声障／声笼效果；音频中间件如 Wwise 的效果器控制参数一般是够用的，但在游戏中手工标注的工作量巨大且容易出错，实际开发工期紧，很难打磨调优。\n\n不巧，玩家极易通过生活经验察觉这类设计错误，后果严重，参见《刺客信条：大革命》中曾出现的[全局 bug](http://forums.ubi.com/showthread.php/973716-AC-Unity-Sound-Bug-Forums)。音频设计界早就希望能像物理渲染界一样自动化这个过程，为创意设计赢得时间。\n\n演讲中放出的*最终*解决方案：\n\n{% asset_img sa-triton-game-integration.jpg Triton 系统整合示意图 %}\n\n- 离线预处理：在游戏地图中自动选取采样位置，对各个位置上的发声体-听者结对（emitter-listener pair）根据几何数据自动做 3D 声波传播模拟并生成原始声学数据库；\n- 解析：从原始声学数据自动提炼出一组感知参数值：直达波能量、反射波能量、反射波衰减率（wetness）和混响衰减率；\n- 接入音频中间件：运行时通过查询数据库获取感知参数值，用来控制 Wwise 中的声障／声笼滤波器和辅助总线上的混响效果器，产生实时互动的声学效果。\n\n用这种方法，设计师不再需要手动标注环境声学区域，可以专注于艺术效果设计，即通过感知参数来控制音频效果输出。结果不但错误少，且游戏中的实时性能也达到甚至优于项目初始要求。\n\n一些细节：\n\n- 声障值和声笼值分别用初始能量（直达声比例）和反射能量来代表；\n- 区分室外和室内情况，方法是通过在室外设置理想边界，并测量从玩家位置发声后能抵达这条边界的能量占总能量的比例来推算*室内-室外比*，以此来做到平滑过渡；\n- 原始声学数据计算用 100 台机器需要约 4 小时计算时间，初始数据为 50 TB，做解析后降为 100 MB。\n\n### 经历\n\n很多学术报告大概也就到此为止了，让一部分听众感觉高山仰止，另一部分不知所云。然而这次两位主讲人–微软研究院的 Nikunj Raghuvanshi 和 Coalition 工作室的 John Tennant –继续披露了研发和产品化的详细经过，以机器人领域的[*恐怖谷*](http://baike.baidu.com/item/恐怖谷理论)现象为纲，讲述了从真实到艺术真实的探索（微信游戏音频群里尾巴老师语），体现了对基础研究和产品化过程深刻的理解，是演讲中我个人最喜欢的部分。\n\n{% asset_img  sa-triton-uncanny-valley.jpg %}\n\n从 2011 年的 V1.0 到 2014 年的 V2.0 直到最终版，项目经历了标准的恐怖谷历程：\n\n1. V1.0 中初尝预处理甜头后，发现一些问题亟待解决，比如区分室内外和消除混响效果中的浑浊；\n2. 于是寄希望于自动化和仿真路线，火力全开，将模型复杂化：从 FDN 混响换成卷积混响，声学数据因此变成冲激响应，在增加室外效果器组分支的同时还增加了对早期反射和后期混响的区分，导致要控制 12 个混响单元；\n3. 不幸跌入恐怖谷，为了自救而后退一步，着重解决艺术真实问题，最后简化了模型，按时保质完成了产品化。\n\n一些真实和艺术真实的折衷处理：\n\n- 冲激响应路线很难控制质量：录音和测量人员不同，因此高度依赖配准，为后期调试带来困难，终弃；\n- 混响效果受输入声音动态范围影响，将输入的*真实*动态范围做了艺术限制之后，清晰度得到提升；\n- 与传统影视建立的艺术效果标准相比，物理计算中得出的直达声能量以及衰减时间，结合游戏具体玩法后，会出现不合心理期望的情况，终弃。\n\n有意思的是，上面的道理很多其实是马后炮：是在主动作出简化混响模型的决定后从实践中领悟到的，又一次说明奥卡姆剃刀原则的普适性。\n\n### 未来\n\nTriton 项目的未来计划包括在预处理模型中加入：\n\n- 直达分量方向性、早期反射、户外回声；\n- 动态几何结构，比如活动的门窗和物理毁坏。\n\n巧的是，Triton 和 Wwise 不谋而合，这几条正是 GDC17 上 Wwise 2017.1 版本展出的新 Spatial Audio 功能的一部分，请看下篇。\n\n### 相关资料\n\n- 演讲幻灯片: ['Gears of War 4', Project Triton: Pre-Computed Environmental Wave Acoustics](http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx)\n- Engadget 文章：[Microsoft Research helped 'Gears of War 4' sound so good](https://www.engadget.com/2016/10/25/gears-of-war-4-microsoft-research-triton/)\n- Triton V1.0 论文：[Raghuvanshi, et. al., SIGGRAPH 2010, “Precomputed wave simulation for real-time sound propagation of dynamic sources in complex scenes”\n](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/6.pdf)\n- Triton V2.0 论文：[Raghuvanshi & Snyder, SIGGRAPH 2014, \u000b“Parametric wave field coding for precomputed sound propagation”\n](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/ParametricWaveField.pdf)\n","slug":"GDC17-音频见闻（1）-空间音频-Spatial-Audio","published":1,"updated":"2019-10-17T09:02:54.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfntb00040enzdkwnzv82","content":"<h2 id=\"《Gears-of-War-4》中的环境声学预处理技术\"><a href=\"#《Gears-of-War-4》中的环境声学预处理技术\" class=\"headerlink\" title=\"《Gears of War 4》中的环境声学预处理技术\"></a>《Gears of War 4》中的环境声学预处理技术</h2><p>继 Binaural 和 Ambisonics 之后，今年 GDC 上的空间音频热门关键字多了<em>混响</em>（Reverberation）、<em>声障和声笼</em>（Obstruction &amp; Occlusion）这些环境声学概念，标志着对沉浸音频体验发起的又一次冲锋。这些游戏音频界的旧瓶里最受瞩目的新酒之一当数微软研究院和《战争机器4》（GoW4）开发组的 <a href=\"http://schedule.gdconf.com/session/gears-of-war-4-project-triton-pre-computed-environmental-wave-acoustics\" target=\"_blank\" rel=\"external\">Project Triton</a>，即通过预先演算声波传播物理参数来辅助人工设计的环境声学效果方案。本次的演讲实际上是微软已启动六年之久系列研究的首次产品化成果。演讲幻灯片<a href=\"http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx\" target=\"_blank\" rel=\"external\">已放出</a>。以下尝试稍加总结。</p>\n<h3 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h3><p>这乍一看很学术范的技术主要是为了解决游戏环境声学设计中的一大痛点：传统设计方法依赖在游戏地图中手工标注或绘制声学区域，再挂接音频效果器来实现室内混响和声障／声笼效果；音频中间件如 Wwise 的效果器控制参数一般是够用的，但在游戏中手工标注的工作量巨大且容易出错，实际开发工期紧，很难打磨调优。</p>\n<p>不巧，玩家极易通过生活经验察觉这类设计错误，后果严重，参见《刺客信条：大革命》中曾出现的<a href=\"http://forums.ubi.com/showthread.php/973716-AC-Unity-Sound-Bug-Forums\" target=\"_blank\" rel=\"external\">全局 bug</a>。音频设计界早就希望能像物理渲染界一样自动化这个过程，为创意设计赢得时间。</p>\n<p>演讲中放出的<em>最终</em>解决方案：</p>\n<img src=\"/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-game-integration.jpg\" title=\"Triton 系统整合示意图\">\n<ul>\n<li>离线预处理：在游戏地图中自动选取采样位置，对各个位置上的发声体-听者结对（emitter-listener pair）根据几何数据自动做 3D 声波传播模拟并生成原始声学数据库；</li>\n<li>解析：从原始声学数据自动提炼出一组感知参数值：直达波能量、反射波能量、反射波衰减率（wetness）和混响衰减率；</li>\n<li>接入音频中间件：运行时通过查询数据库获取感知参数值，用来控制 Wwise 中的声障／声笼滤波器和辅助总线上的混响效果器，产生实时互动的声学效果。</li>\n</ul>\n<p>用这种方法，设计师不再需要手动标注环境声学区域，可以专注于艺术效果设计，即通过感知参数来控制音频效果输出。结果不但错误少，且游戏中的实时性能也达到甚至优于项目初始要求。</p>\n<p>一些细节：</p>\n<ul>\n<li>声障值和声笼值分别用初始能量（直达声比例）和反射能量来代表；</li>\n<li>区分室外和室内情况，方法是通过在室外设置理想边界，并测量从玩家位置发声后能抵达这条边界的能量占总能量的比例来推算<em>室内-室外比</em>，以此来做到平滑过渡；</li>\n<li>原始声学数据计算用 100 台机器需要约 4 小时计算时间，初始数据为 50 TB，做解析后降为 100 MB。</li>\n</ul>\n<h3 id=\"经历\"><a href=\"#经历\" class=\"headerlink\" title=\"经历\"></a>经历</h3><p>很多学术报告大概也就到此为止了，让一部分听众感觉高山仰止，另一部分不知所云。然而这次两位主讲人–微软研究院的 Nikunj Raghuvanshi 和 Coalition 工作室的 John Tennant –继续披露了研发和产品化的详细经过，以机器人领域的<a href=\"http://baike.baidu.com/item/恐怖谷理论\" target=\"_blank\" rel=\"external\"><em>恐怖谷</em></a>现象为纲，讲述了从真实到艺术真实的探索（微信游戏音频群里尾巴老师语），体现了对基础研究和产品化过程深刻的理解，是演讲中我个人最喜欢的部分。</p>\n<img src=\"/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-uncanny-valley.jpg\">\n<p>从 2011 年的 V1.0 到 2014 年的 V2.0 直到最终版，项目经历了标准的恐怖谷历程：</p>\n<ol>\n<li>V1.0 中初尝预处理甜头后，发现一些问题亟待解决，比如区分室内外和消除混响效果中的浑浊；</li>\n<li>于是寄希望于自动化和仿真路线，火力全开，将模型复杂化：从 FDN 混响换成卷积混响，声学数据因此变成冲激响应，在增加室外效果器组分支的同时还增加了对早期反射和后期混响的区分，导致要控制 12 个混响单元；</li>\n<li>不幸跌入恐怖谷，为了自救而后退一步，着重解决艺术真实问题，最后简化了模型，按时保质完成了产品化。</li>\n</ol>\n<p>一些真实和艺术真实的折衷处理：</p>\n<ul>\n<li>冲激响应路线很难控制质量：录音和测量人员不同，因此高度依赖配准，为后期调试带来困难，终弃；</li>\n<li>混响效果受输入声音动态范围影响，将输入的<em>真实</em>动态范围做了艺术限制之后，清晰度得到提升；</li>\n<li>与传统影视建立的艺术效果标准相比，物理计算中得出的直达声能量以及衰减时间，结合游戏具体玩法后，会出现不合心理期望的情况，终弃。</li>\n</ul>\n<p>有意思的是，上面的道理很多其实是马后炮：是在主动作出简化混响模型的决定后从实践中领悟到的，又一次说明奥卡姆剃刀原则的普适性。</p>\n<h3 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h3><p>Triton 项目的未来计划包括在预处理模型中加入：</p>\n<ul>\n<li>直达分量方向性、早期反射、户外回声；</li>\n<li>动态几何结构，比如活动的门窗和物理毁坏。</li>\n</ul>\n<p>巧的是，Triton 和 Wwise 不谋而合，这几条正是 GDC17 上 Wwise 2017.1 版本展出的新 Spatial Audio 功能的一部分，请看下篇。</p>\n<h3 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h3><ul>\n<li>演讲幻灯片: <a href=\"http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx\" target=\"_blank\" rel=\"external\">‘Gears of War 4’, Project Triton: Pre-Computed Environmental Wave Acoustics</a></li>\n<li>Engadget 文章：<a href=\"https://www.engadget.com/2016/10/25/gears-of-war-4-microsoft-research-triton/\" target=\"_blank\" rel=\"external\">Microsoft Research helped ‘Gears of War 4’ sound so good</a></li>\n<li>Triton V1.0 论文：<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/6.pdf\" target=\"_blank\" rel=\"external\">Raghuvanshi, et. al., SIGGRAPH 2010, “Precomputed wave simulation for real-time sound propagation of dynamic sources in complex scenes”\n</a></li>\n<li>Triton V2.0 论文：<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/ParametricWaveField.pdf\" target=\"_blank\" rel=\"external\">Raghuvanshi &amp; Snyder, SIGGRAPH 2014, \u000b“Parametric wave field coding for precomputed sound propagation”\n</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"《Gears-of-War-4》中的环境声学预处理技术\"><a href=\"#《Gears-of-War-4》中的环境声学预处理技术\" class=\"headerlink\" title=\"《Gears of War 4》中的环境声学预处理技术\"></a>《Gears of War 4》中的环境声学预处理技术</h2><p>继 Binaural 和 Ambisonics 之后，今年 GDC 上的空间音频热门关键字多了<em>混响</em>（Reverberation）、<em>声障和声笼</em>（Obstruction &amp; Occlusion）这些环境声学概念，标志着对沉浸音频体验发起的又一次冲锋。这些游戏音频界的旧瓶里最受瞩目的新酒之一当数微软研究院和《战争机器4》（GoW4）开发组的 <a href=\"http://schedule.gdconf.com/session/gears-of-war-4-project-triton-pre-computed-environmental-wave-acoustics\" target=\"_blank\" rel=\"external\">Project Triton</a>，即通过预先演算声波传播物理参数来辅助人工设计的环境声学效果方案。本次的演讲实际上是微软已启动六年之久系列研究的首次产品化成果。演讲幻灯片<a href=\"http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx\" target=\"_blank\" rel=\"external\">已放出</a>。以下尝试稍加总结。</p>\n<h3 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h3><p>这乍一看很学术范的技术主要是为了解决游戏环境声学设计中的一大痛点：传统设计方法依赖在游戏地图中手工标注或绘制声学区域，再挂接音频效果器来实现室内混响和声障／声笼效果；音频中间件如 Wwise 的效果器控制参数一般是够用的，但在游戏中手工标注的工作量巨大且容易出错，实际开发工期紧，很难打磨调优。</p>\n<p>不巧，玩家极易通过生活经验察觉这类设计错误，后果严重，参见《刺客信条：大革命》中曾出现的<a href=\"http://forums.ubi.com/showthread.php/973716-AC-Unity-Sound-Bug-Forums\" target=\"_blank\" rel=\"external\">全局 bug</a>。音频设计界早就希望能像物理渲染界一样自动化这个过程，为创意设计赢得时间。</p>\n<p>演讲中放出的<em>最终</em>解决方案：</p>\n<img src=\"/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-game-integration.jpg\" title=\"Triton 系统整合示意图\">\n<ul>\n<li>离线预处理：在游戏地图中自动选取采样位置，对各个位置上的发声体-听者结对（emitter-listener pair）根据几何数据自动做 3D 声波传播模拟并生成原始声学数据库；</li>\n<li>解析：从原始声学数据自动提炼出一组感知参数值：直达波能量、反射波能量、反射波衰减率（wetness）和混响衰减率；</li>\n<li>接入音频中间件：运行时通过查询数据库获取感知参数值，用来控制 Wwise 中的声障／声笼滤波器和辅助总线上的混响效果器，产生实时互动的声学效果。</li>\n</ul>\n<p>用这种方法，设计师不再需要手动标注环境声学区域，可以专注于艺术效果设计，即通过感知参数来控制音频效果输出。结果不但错误少，且游戏中的实时性能也达到甚至优于项目初始要求。</p>\n<p>一些细节：</p>\n<ul>\n<li>声障值和声笼值分别用初始能量（直达声比例）和反射能量来代表；</li>\n<li>区分室外和室内情况，方法是通过在室外设置理想边界，并测量从玩家位置发声后能抵达这条边界的能量占总能量的比例来推算<em>室内-室外比</em>，以此来做到平滑过渡；</li>\n<li>原始声学数据计算用 100 台机器需要约 4 小时计算时间，初始数据为 50 TB，做解析后降为 100 MB。</li>\n</ul>\n<h3 id=\"经历\"><a href=\"#经历\" class=\"headerlink\" title=\"经历\"></a>经历</h3><p>很多学术报告大概也就到此为止了，让一部分听众感觉高山仰止，另一部分不知所云。然而这次两位主讲人–微软研究院的 Nikunj Raghuvanshi 和 Coalition 工作室的 John Tennant –继续披露了研发和产品化的详细经过，以机器人领域的<a href=\"http://baike.baidu.com/item/恐怖谷理论\" target=\"_blank\" rel=\"external\"><em>恐怖谷</em></a>现象为纲，讲述了从真实到艺术真实的探索（微信游戏音频群里尾巴老师语），体现了对基础研究和产品化过程深刻的理解，是演讲中我个人最喜欢的部分。</p>\n<img src=\"/2017/03/13/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-uncanny-valley.jpg\">\n<p>从 2011 年的 V1.0 到 2014 年的 V2.0 直到最终版，项目经历了标准的恐怖谷历程：</p>\n<ol>\n<li>V1.0 中初尝预处理甜头后，发现一些问题亟待解决，比如区分室内外和消除混响效果中的浑浊；</li>\n<li>于是寄希望于自动化和仿真路线，火力全开，将模型复杂化：从 FDN 混响换成卷积混响，声学数据因此变成冲激响应，在增加室外效果器组分支的同时还增加了对早期反射和后期混响的区分，导致要控制 12 个混响单元；</li>\n<li>不幸跌入恐怖谷，为了自救而后退一步，着重解决艺术真实问题，最后简化了模型，按时保质完成了产品化。</li>\n</ol>\n<p>一些真实和艺术真实的折衷处理：</p>\n<ul>\n<li>冲激响应路线很难控制质量：录音和测量人员不同，因此高度依赖配准，为后期调试带来困难，终弃；</li>\n<li>混响效果受输入声音动态范围影响，将输入的<em>真实</em>动态范围做了艺术限制之后，清晰度得到提升；</li>\n<li>与传统影视建立的艺术效果标准相比，物理计算中得出的直达声能量以及衰减时间，结合游戏具体玩法后，会出现不合心理期望的情况，终弃。</li>\n</ul>\n<p>有意思的是，上面的道理很多其实是马后炮：是在主动作出简化混响模型的决定后从实践中领悟到的，又一次说明奥卡姆剃刀原则的普适性。</p>\n<h3 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h3><p>Triton 项目的未来计划包括在预处理模型中加入：</p>\n<ul>\n<li>直达分量方向性、早期反射、户外回声；</li>\n<li>动态几何结构，比如活动的门窗和物理毁坏。</li>\n</ul>\n<p>巧的是，Triton 和 Wwise 不谋而合，这几条正是 GDC17 上 Wwise 2017.1 版本展出的新 Spatial Audio 功能的一部分，请看下篇。</p>\n<h3 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h3><ul>\n<li>演讲幻灯片: <a href=\"http://www.nikunjr.com/Projects/Triton/Triton-GDC2017.pptx\" target=\"_blank\" rel=\"external\">‘Gears of War 4’, Project Triton: Pre-Computed Environmental Wave Acoustics</a></li>\n<li>Engadget 文章：<a href=\"https://www.engadget.com/2016/10/25/gears-of-war-4-microsoft-research-triton/\" target=\"_blank\" rel=\"external\">Microsoft Research helped ‘Gears of War 4’ sound so good</a></li>\n<li>Triton V1.0 论文：<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/10/6.pdf\" target=\"_blank\" rel=\"external\">Raghuvanshi, et. al., SIGGRAPH 2010, “Precomputed wave simulation for real-time sound propagation of dynamic sources in complex scenes”\n</a></li>\n<li>Triton V2.0 论文：<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/ParametricWaveField.pdf\" target=\"_blank\" rel=\"external\">Raghuvanshi &amp; Snyder, SIGGRAPH 2014, \u000b“Parametric wave field coding for precomputed sound propagation”\n</a></li>\n</ul>\n"},{"title":"补记 MIGS 2016 上的演讲见闻","date":"2017-01-15T11:52:13.000Z","_content":"\n最近一次的[蒙特利尔国际游戏峰会 MIGS 2016](http://www.migs16.com/en/)过去一阵子了，只有3岁的 MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还是有些有用的技术演讲，在此追记一下自己去过那几场的要点，主要是音频专场。<!--more-->\n\n{% asset_img migs16-01.jpg %}\n\n## [Leonard Paul “用 Pure Data 为游戏实现 Procedural Audio”](http://www.migs16.com/en/events/procedural-game-audio-with-pure-data/)\n\n{% asset_img migs16-02.jpg %}\n\n音频设计师和教师 [Leonard Paul](http://www.migs16.com/en/leonard-j-paul-2/) 以 [Unity 示例游戏](https://unity3d.com/learn/tutorials/projects/tanks-tutorial)作为蓝本介绍了用 Pure Data（PD）实现 procedural audio（下称 PA）音频设计一些可能性。会后他还发布了这次演讲的[幻灯](https://t.co/7ay9kxzhOV)和[录音](https://t.co/7s0o9Xhoiy)。\n\n在这个例子中 Leonard 展示了几个 PD patch。通过自己设计实现从 PD 到 Unity 的一整套 OSC（Open Sound Control）消息服务机制，建立了一条简单的音频原型迭代的管线：在 PD 中创建和修改设计，在 Unity 中测试，两端通过 OSC 沟通来试听和调整混音等。演示的声音大多采用简单的加法／减法／模态（Modal）实时合成方法，坦克碰撞声采用了 [Karplus-Strong](https://en.wikipedia.org/wiki/Karplus–Strong_string_synthesis) 算法。\n\n关于 PD 生态的现状，Leonard 说 [libpd](https://github.com/libpd/libpd) 的性能还达不到游戏要求的实时性，但 [Enzien Audio](https://enzienaudio.com) 的 Heavy 系统的性能很有希望。目前 Heavy 支持大部分 PD 的对象，只有极少数关键对象比如 [expr～](http://yadegari.org/expr/expr.html) 不支持。\n\nLeonard 也表示在游戏项目中选用 PD 这样的系统有一些注意事项：\n\n- 不应该为 PA 而 PA。从审美上不是所有的游戏都适合 PA，演讲采用的坦克游戏碰巧是美式动漫风，所以适合用常用的合成技术表现；\n- 用 PD “做出声音”只是音频设计流程中的一方面，走这条路还需要自己实现通信协议、混音器、voice 控制，性能优化这些一般中间件里有的东西；\n- 同一个功能可能有不同品质和性能代价的算法实现，可以考虑根据实时性能的波动切换算法以达到最优性价比；\n- 在条件允许下，比如大公司和大型项目中一般还是以中间件为出发点。\n\n**感想：**利用创意编程工具实现 PA 目前还是一个技术性很强的领域，Leonard 自我介绍时强调自己的编程背景并已经有 20 多年使用 Max（90 年代初还没有 MSP）和 PD 的经验也侧面佐证了这一点。\n\n## [RJ Mattingly \"手工打造游戏音频利器\"](http://www.migs16.com/en/events/making-the-sharpest/)\n\n{% asset_img migs16-03.jpg %}\n\n[RJ Mattingly](http://www.migs16.com/en/rj-mattingly-2/) 是 PopCap 的技术声音设计师。PopCap 现在全面采用 Unity + Wwise 的音频开发流程，在演讲中他介绍了为优化 PopCap 内部工作流程写的一些小脚本工具，基本都用 Python 语言实现。\n\n### SoundBank 管线工具\n\nPopCap 的 SoundBank 处理管线见上图。\n\n他们早期基于 Perforce 的流程中声音设计师不但提交 Wwise 工程文件，还提交 SoundBank。这样一来因为 SoundBank 是团队共享的，所以容易出现冲突。RJ 的第一个显而易见的改进便是规定设计师不提交 SoundBank（设计产物），而只提交工程文件（设计本身），并在 [Jenkins](https://jenkins.io) 管线中通过脚本使用 Wwise 自带的命令行工具 [WwiseCli](https://www.audiokinetic.com/library/edge/?source=SDK&id=bankscommandline.html) 生成项目的唯一一份 SoundBank，解决了冲突问题。\n\n一个常见的人为错误是在生成 SoundBank 时漏加了文件或者多个 SoundBank 中有重复的音频源文件，这些错误有时几个礼拜之后才会发现。于是 RJ 利用 Wwise 中 SoundBank 生成的后处理 [post-generation step](https://www.audiokinetic.com/library/edge/?source=Help&id=defining_custom_user_steps_to_be_performed_pre_post_soundbank_generation) 写了一个脚本来分析 Wwise 自动生成的日志，找到与缺少和重复文件相关的信息，并自动群发邮件。这样一来，错误一般都能当天发现并修正。\n\n\n### Event 工具\n\n在性能优化上，Wwise 中虽然有最大复音数限制机制，但有些时候项目会想从 Event 层面来做限制，比如三消游戏《Bejeweled》系列中的爆炸道具如不加限制会引爆上百个事件，目前 Wwise 中没有提供由设计师来指定事件数限制的流程。因为 Wwise 事件下有 Notes 这个属性，因为属性保存在事件所在的 WorkUnit（.wwu）文件中，RJ 于是把 Notes 当作特殊字段来用，写了一个脚本工具在 Notes 中加入自定义的事件限制文本编码，设计师可以在 Wwise 中进一步手动调整，然后工具会分析 .wwu 并生成游戏程序可以读取的 metadata 作为事件限制的参考数据。\n\n### 动画配声工具\n\n在《Plants vs. Zombies: Heroes》中有 300 多个角色，每个角色有 5-20 个动画序列，所以手工配声工作量巨大。于是 RJ 写了一个 Unity UI 拓展能够改进这个流程，并能够自动比较 Unity 端登记的动画 Event 和 Wwise 设计工具端的 Event，保证在 Unity 端登记的 Wwise Event 确实存在。\n\n设计师往往喜欢把 Unity 的动画导出成视频文件然后到 DAW 中配声，但 Unity 没有这种导出支持。于是 RJ 写了工具自动导出动画成视频，方法是：将动画帧自动截屏成图片，再用 [ffmpeg](https://ffmpeg.org) 的命令行工具将这些图片批量组装成视频文件。\n\n## [Benoit Alary \"用于虚拟声学空间的沉浸式混响\"](http://www.migs16.com/en/blog/events/immersive-reverberation/)\n\nAudiokinetic 的 Benoit Alary 做了关于 Audiokinetic 研发的新互动混响插件（代号 *SynthSpace*）的演讲，作为早先[这篇博客](https://blog.audiokinetic.com/migs/)的展开并演示了原型效果。\n\n传统混响技术有其局限性。参数混响比如 [FDN 算法族](https://ccrma.stanford.edu/~jos/pasp/FDN_Reverberation.html) 难以加入逼真的互动效果，比如玩家在室内走动时，很难根据玩家离墙的远近自动调整早期反射效果。而在其它方面相对参数混响有优势的卷积混响如果想要克服这一点，则需要录制多个冲激响应（IR）来捕捉整个空间。暴雪在《Overwatch》中为了改进这点研发了自己的内部 Wwise 插件 Quad Delay 用来加入与环境互动的反射效果，见他们的 [GDC 2016 演讲](http://gdcvault.com/play/1023010/Overwatch-The-Elusive-Goal-Play)。\n\n以往在解决这个问题上有两派：\n\n- 几何方法：将混响问题中的声音传播退化为类几何光学问题，研究从声源出发的理想射线在封闭空间中的几何反射。但这种简化做法不考虑声波的干涉等性质，如果用于整个混响过程，则效果有局限。\n- 波方法：直接模拟声波传播，考虑所有波的性质包括干涉。这种做法运算量巨大，目前唯一实际的做法是离线计算好各种参数并储存为数据库供应用程序实时检索使用，但对设计流程来说离线计算的开销可能就是小时甚至天的数量级。另一个问题是，波方法需要每秒 4 万次以上的反射取样，因此在数字音频采样率的限制下对高频的表现不会很好。\n\n在游戏等媒体应用中，实际需求往往并不是完全逼真地模拟现实中的混响，而是需要给音频设计师足够的控制来达到某种艺术效果。\n\n目前的趋势是混成混响（Hybrid Reverb）技术：拆分混响过程，利用几何方法来控制早期反射（early reflection），而用传统混响来控制后期混响（late reverb）。\n\n*SynthSpace* 的这款 Wwise 混音器插件就是给高品质混响用户群特别是 VR／AR 项目准备的实用工具。\n\n{% asset_img migs16-04.JPG %}\n{% asset_img migs16-05.JPG %}\n\n它的用法是在一条混响总线上加入此插件，实时接收游戏发送的空间鞋盒（shoebox）模型以及发声体和听者在空间中的位置，基于这些数据进行实时反射计算，取代参数混响中的 Pre-Delay 参数，设计师可以在 Wwise 中对反射等效果和性能需求做精确的设计，再结合其它混响效果实现完整的互动混响。《Overwatch》的 Quad Delay 插件是基于 4 个平面方向的环绕声方案，相比之下，*SynthSpace* 支持 6 个方向的三维空间，因而也支持 spatial audio，在传统游戏和 VR/AR 中都有用武之地。\n\n演示用到了 Wwise 后续将发布的全新 3D 测试游戏地图，将作为 Cube Demo 基础上更适合测试声学效果的 demo 安装包。*SynthSpace* 将于 2017 年内面世，到时候可能会有正式的新名字。\n\n## [Olivier Deriviere \"环境音乐，互动配乐的下一步?\"](http://www.migs16.com/en/blog/events/environmental-music/)\n\n[Olivier Deriviere](http://olivierderiviere.com) 之前在 [《Remember Me》（2013）](https://www.youtube.com/watch?v=kWyf90LXLAg) 中将战斗音乐的互动性推到了新高度，这次他介绍了在万代南梦宫新作[《Get Even》](https://www.youtube.com/watch?v=E9qQz0X7QYM)中的新实验：利用 Wwise 和 3D Audio 将环境声和音乐融为一体。之前在《DOOM》（2016）中已嗅到这种味道。这场据说是这届 MIGS 上最值得去的音频演讲，可惜没有去成，不过游戏在 GDC 2017 上会有首秀，很期待。\n\n## [Wolff Dobson \"机器学习、游戏和你\"](http://www.migs16.com/en/blog/events/machine-learning-games-and-you/)\n\n这是去的唯一一场非音频演讲。来自 Google 机器学习组的 [Wolff Dobson](http://www.migs16.com/en/blog/2016/10/16/wolff-dobson-2/)这场大半是科普机器学习特别是深度学习及其新进展，也指出了游戏中机器学习的一些应用的可能性和已经用到的场合：\n\n- 分析玩家的入坑、内购、弃坑规律，在预测到可能行为时推送合适的内容促进留存率；\n- 分析游戏中玩家聊天记录判断情绪；\n- 分析监测作弊行为；\n- 分析玩家的玩法特征，让游戏内容作出适配；\n- 分析电影中的真人动作和物理系统来自动生成游戏物理系统和动画；\n- 分析玩家的操作和策略，利用[强化学习](http://baike.baidu.com/view/1627904.htm)给玩家策略建议；\n- 分析生物面部特征，做出更自动化的捏脸系统；\n- 自动生成内容：关卡、对白、NPC。\n\n他也强调“玩家的乐趣”是终极目标，而不是为了机器学习而学习。比如，在角色扮演和第一人称游戏里面玩家的视野和注意力受限，所以镜头外的 AI 其实必要性不大，因为玩家要么注意不到，要么可能把 NPC 在 GPS 上的“出色”表现理解为是机器作弊。\n\n他也提到了一些游戏以外的机器学习应用：\n\n![](https://github.com/david-gpu/srez/raw/master/srez_sample_output.png)\n\n[图片低清转高清](https://github.com/david-gpu/srez)\n\n{% asset_img migs16-06.png %}\n\n[实时混合油画滤镜](https://www.youtube.com/watch?v=6ZHiARZmiUI)\n\n![](https://github.com/Newmu/dcgan_code/blob/master/images/lsun_bedrooms_five_epoch_samples.png?raw=true)\n\n![](https://github.com/Newmu/dcgan_code/blob/master/images/albums_128px.png?raw=true)\n[自动生成卧室照片、唱片封套](https://github.com/Newmu/dcgan_code)（之前我在朋友圈转过）\n\n![](https://tctechcrunch2011.files.wordpress.com/2016/09/trash2.jpg?w=738)\n\n[自动垃圾分类](https://techcrunch.com/2016/09/13/auto-trash-sorts-garbage-automatically-at-the-techcrunch-disrupt-hackathon/)\n\n","source":"_posts/migs-2016.md","raw":"---\ntitle: 补记 MIGS 2016 上的演讲见闻\ndate: 2017-01-15 19:52:13\n\ncategories: \n\n- GameAudio\n\n\ntags: \n\n- conference\n- wwise\n- proceduralaudio\n- reverb\n- machinelearning\n\n---\n\n最近一次的[蒙特利尔国际游戏峰会 MIGS 2016](http://www.migs16.com/en/)过去一阵子了，只有3岁的 MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还是有些有用的技术演讲，在此追记一下自己去过那几场的要点，主要是音频专场。<!--more-->\n\n{% asset_img migs16-01.jpg %}\n\n## [Leonard Paul “用 Pure Data 为游戏实现 Procedural Audio”](http://www.migs16.com/en/events/procedural-game-audio-with-pure-data/)\n\n{% asset_img migs16-02.jpg %}\n\n音频设计师和教师 [Leonard Paul](http://www.migs16.com/en/leonard-j-paul-2/) 以 [Unity 示例游戏](https://unity3d.com/learn/tutorials/projects/tanks-tutorial)作为蓝本介绍了用 Pure Data（PD）实现 procedural audio（下称 PA）音频设计一些可能性。会后他还发布了这次演讲的[幻灯](https://t.co/7ay9kxzhOV)和[录音](https://t.co/7s0o9Xhoiy)。\n\n在这个例子中 Leonard 展示了几个 PD patch。通过自己设计实现从 PD 到 Unity 的一整套 OSC（Open Sound Control）消息服务机制，建立了一条简单的音频原型迭代的管线：在 PD 中创建和修改设计，在 Unity 中测试，两端通过 OSC 沟通来试听和调整混音等。演示的声音大多采用简单的加法／减法／模态（Modal）实时合成方法，坦克碰撞声采用了 [Karplus-Strong](https://en.wikipedia.org/wiki/Karplus–Strong_string_synthesis) 算法。\n\n关于 PD 生态的现状，Leonard 说 [libpd](https://github.com/libpd/libpd) 的性能还达不到游戏要求的实时性，但 [Enzien Audio](https://enzienaudio.com) 的 Heavy 系统的性能很有希望。目前 Heavy 支持大部分 PD 的对象，只有极少数关键对象比如 [expr～](http://yadegari.org/expr/expr.html) 不支持。\n\nLeonard 也表示在游戏项目中选用 PD 这样的系统有一些注意事项：\n\n- 不应该为 PA 而 PA。从审美上不是所有的游戏都适合 PA，演讲采用的坦克游戏碰巧是美式动漫风，所以适合用常用的合成技术表现；\n- 用 PD “做出声音”只是音频设计流程中的一方面，走这条路还需要自己实现通信协议、混音器、voice 控制，性能优化这些一般中间件里有的东西；\n- 同一个功能可能有不同品质和性能代价的算法实现，可以考虑根据实时性能的波动切换算法以达到最优性价比；\n- 在条件允许下，比如大公司和大型项目中一般还是以中间件为出发点。\n\n**感想：**利用创意编程工具实现 PA 目前还是一个技术性很强的领域，Leonard 自我介绍时强调自己的编程背景并已经有 20 多年使用 Max（90 年代初还没有 MSP）和 PD 的经验也侧面佐证了这一点。\n\n## [RJ Mattingly \"手工打造游戏音频利器\"](http://www.migs16.com/en/events/making-the-sharpest/)\n\n{% asset_img migs16-03.jpg %}\n\n[RJ Mattingly](http://www.migs16.com/en/rj-mattingly-2/) 是 PopCap 的技术声音设计师。PopCap 现在全面采用 Unity + Wwise 的音频开发流程，在演讲中他介绍了为优化 PopCap 内部工作流程写的一些小脚本工具，基本都用 Python 语言实现。\n\n### SoundBank 管线工具\n\nPopCap 的 SoundBank 处理管线见上图。\n\n他们早期基于 Perforce 的流程中声音设计师不但提交 Wwise 工程文件，还提交 SoundBank。这样一来因为 SoundBank 是团队共享的，所以容易出现冲突。RJ 的第一个显而易见的改进便是规定设计师不提交 SoundBank（设计产物），而只提交工程文件（设计本身），并在 [Jenkins](https://jenkins.io) 管线中通过脚本使用 Wwise 自带的命令行工具 [WwiseCli](https://www.audiokinetic.com/library/edge/?source=SDK&id=bankscommandline.html) 生成项目的唯一一份 SoundBank，解决了冲突问题。\n\n一个常见的人为错误是在生成 SoundBank 时漏加了文件或者多个 SoundBank 中有重复的音频源文件，这些错误有时几个礼拜之后才会发现。于是 RJ 利用 Wwise 中 SoundBank 生成的后处理 [post-generation step](https://www.audiokinetic.com/library/edge/?source=Help&id=defining_custom_user_steps_to_be_performed_pre_post_soundbank_generation) 写了一个脚本来分析 Wwise 自动生成的日志，找到与缺少和重复文件相关的信息，并自动群发邮件。这样一来，错误一般都能当天发现并修正。\n\n\n### Event 工具\n\n在性能优化上，Wwise 中虽然有最大复音数限制机制，但有些时候项目会想从 Event 层面来做限制，比如三消游戏《Bejeweled》系列中的爆炸道具如不加限制会引爆上百个事件，目前 Wwise 中没有提供由设计师来指定事件数限制的流程。因为 Wwise 事件下有 Notes 这个属性，因为属性保存在事件所在的 WorkUnit（.wwu）文件中，RJ 于是把 Notes 当作特殊字段来用，写了一个脚本工具在 Notes 中加入自定义的事件限制文本编码，设计师可以在 Wwise 中进一步手动调整，然后工具会分析 .wwu 并生成游戏程序可以读取的 metadata 作为事件限制的参考数据。\n\n### 动画配声工具\n\n在《Plants vs. Zombies: Heroes》中有 300 多个角色，每个角色有 5-20 个动画序列，所以手工配声工作量巨大。于是 RJ 写了一个 Unity UI 拓展能够改进这个流程，并能够自动比较 Unity 端登记的动画 Event 和 Wwise 设计工具端的 Event，保证在 Unity 端登记的 Wwise Event 确实存在。\n\n设计师往往喜欢把 Unity 的动画导出成视频文件然后到 DAW 中配声，但 Unity 没有这种导出支持。于是 RJ 写了工具自动导出动画成视频，方法是：将动画帧自动截屏成图片，再用 [ffmpeg](https://ffmpeg.org) 的命令行工具将这些图片批量组装成视频文件。\n\n## [Benoit Alary \"用于虚拟声学空间的沉浸式混响\"](http://www.migs16.com/en/blog/events/immersive-reverberation/)\n\nAudiokinetic 的 Benoit Alary 做了关于 Audiokinetic 研发的新互动混响插件（代号 *SynthSpace*）的演讲，作为早先[这篇博客](https://blog.audiokinetic.com/migs/)的展开并演示了原型效果。\n\n传统混响技术有其局限性。参数混响比如 [FDN 算法族](https://ccrma.stanford.edu/~jos/pasp/FDN_Reverberation.html) 难以加入逼真的互动效果，比如玩家在室内走动时，很难根据玩家离墙的远近自动调整早期反射效果。而在其它方面相对参数混响有优势的卷积混响如果想要克服这一点，则需要录制多个冲激响应（IR）来捕捉整个空间。暴雪在《Overwatch》中为了改进这点研发了自己的内部 Wwise 插件 Quad Delay 用来加入与环境互动的反射效果，见他们的 [GDC 2016 演讲](http://gdcvault.com/play/1023010/Overwatch-The-Elusive-Goal-Play)。\n\n以往在解决这个问题上有两派：\n\n- 几何方法：将混响问题中的声音传播退化为类几何光学问题，研究从声源出发的理想射线在封闭空间中的几何反射。但这种简化做法不考虑声波的干涉等性质，如果用于整个混响过程，则效果有局限。\n- 波方法：直接模拟声波传播，考虑所有波的性质包括干涉。这种做法运算量巨大，目前唯一实际的做法是离线计算好各种参数并储存为数据库供应用程序实时检索使用，但对设计流程来说离线计算的开销可能就是小时甚至天的数量级。另一个问题是，波方法需要每秒 4 万次以上的反射取样，因此在数字音频采样率的限制下对高频的表现不会很好。\n\n在游戏等媒体应用中，实际需求往往并不是完全逼真地模拟现实中的混响，而是需要给音频设计师足够的控制来达到某种艺术效果。\n\n目前的趋势是混成混响（Hybrid Reverb）技术：拆分混响过程，利用几何方法来控制早期反射（early reflection），而用传统混响来控制后期混响（late reverb）。\n\n*SynthSpace* 的这款 Wwise 混音器插件就是给高品质混响用户群特别是 VR／AR 项目准备的实用工具。\n\n{% asset_img migs16-04.JPG %}\n{% asset_img migs16-05.JPG %}\n\n它的用法是在一条混响总线上加入此插件，实时接收游戏发送的空间鞋盒（shoebox）模型以及发声体和听者在空间中的位置，基于这些数据进行实时反射计算，取代参数混响中的 Pre-Delay 参数，设计师可以在 Wwise 中对反射等效果和性能需求做精确的设计，再结合其它混响效果实现完整的互动混响。《Overwatch》的 Quad Delay 插件是基于 4 个平面方向的环绕声方案，相比之下，*SynthSpace* 支持 6 个方向的三维空间，因而也支持 spatial audio，在传统游戏和 VR/AR 中都有用武之地。\n\n演示用到了 Wwise 后续将发布的全新 3D 测试游戏地图，将作为 Cube Demo 基础上更适合测试声学效果的 demo 安装包。*SynthSpace* 将于 2017 年内面世，到时候可能会有正式的新名字。\n\n## [Olivier Deriviere \"环境音乐，互动配乐的下一步?\"](http://www.migs16.com/en/blog/events/environmental-music/)\n\n[Olivier Deriviere](http://olivierderiviere.com) 之前在 [《Remember Me》（2013）](https://www.youtube.com/watch?v=kWyf90LXLAg) 中将战斗音乐的互动性推到了新高度，这次他介绍了在万代南梦宫新作[《Get Even》](https://www.youtube.com/watch?v=E9qQz0X7QYM)中的新实验：利用 Wwise 和 3D Audio 将环境声和音乐融为一体。之前在《DOOM》（2016）中已嗅到这种味道。这场据说是这届 MIGS 上最值得去的音频演讲，可惜没有去成，不过游戏在 GDC 2017 上会有首秀，很期待。\n\n## [Wolff Dobson \"机器学习、游戏和你\"](http://www.migs16.com/en/blog/events/machine-learning-games-and-you/)\n\n这是去的唯一一场非音频演讲。来自 Google 机器学习组的 [Wolff Dobson](http://www.migs16.com/en/blog/2016/10/16/wolff-dobson-2/)这场大半是科普机器学习特别是深度学习及其新进展，也指出了游戏中机器学习的一些应用的可能性和已经用到的场合：\n\n- 分析玩家的入坑、内购、弃坑规律，在预测到可能行为时推送合适的内容促进留存率；\n- 分析游戏中玩家聊天记录判断情绪；\n- 分析监测作弊行为；\n- 分析玩家的玩法特征，让游戏内容作出适配；\n- 分析电影中的真人动作和物理系统来自动生成游戏物理系统和动画；\n- 分析玩家的操作和策略，利用[强化学习](http://baike.baidu.com/view/1627904.htm)给玩家策略建议；\n- 分析生物面部特征，做出更自动化的捏脸系统；\n- 自动生成内容：关卡、对白、NPC。\n\n他也强调“玩家的乐趣”是终极目标，而不是为了机器学习而学习。比如，在角色扮演和第一人称游戏里面玩家的视野和注意力受限，所以镜头外的 AI 其实必要性不大，因为玩家要么注意不到，要么可能把 NPC 在 GPS 上的“出色”表现理解为是机器作弊。\n\n他也提到了一些游戏以外的机器学习应用：\n\n![](https://github.com/david-gpu/srez/raw/master/srez_sample_output.png)\n\n[图片低清转高清](https://github.com/david-gpu/srez)\n\n{% asset_img migs16-06.png %}\n\n[实时混合油画滤镜](https://www.youtube.com/watch?v=6ZHiARZmiUI)\n\n![](https://github.com/Newmu/dcgan_code/blob/master/images/lsun_bedrooms_five_epoch_samples.png?raw=true)\n\n![](https://github.com/Newmu/dcgan_code/blob/master/images/albums_128px.png?raw=true)\n[自动生成卧室照片、唱片封套](https://github.com/Newmu/dcgan_code)（之前我在朋友圈转过）\n\n![](https://tctechcrunch2011.files.wordpress.com/2016/09/trash2.jpg?w=738)\n\n[自动垃圾分类](https://techcrunch.com/2016/09/13/auto-trash-sorts-garbage-automatically-at-the-techcrunch-disrupt-hackathon/)\n\n","slug":"migs-2016","published":1,"updated":"2019-10-17T09:02:54.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfntd00060enzg9bb841c","content":"<p>最近一次的<a href=\"http://www.migs16.com/en/\" target=\"_blank\" rel=\"external\">蒙特利尔国际游戏峰会 MIGS 2016</a>过去一阵子了，只有3岁的 MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还是有些有用的技术演讲，在此追记一下自己去过那几场的要点，主要是音频专场。<a id=\"more\"></a></p>\n<img src=\"/2017/01/15/migs-2016/migs16-01.jpg\">\n<h2 id=\"Leonard-Paul-“用-Pure-Data-为游戏实现-Procedural-Audio”\"><a href=\"#Leonard-Paul-“用-Pure-Data-为游戏实现-Procedural-Audio”\" class=\"headerlink\" title=\"Leonard Paul “用 Pure Data 为游戏实现 Procedural Audio”\"></a><a href=\"http://www.migs16.com/en/events/procedural-game-audio-with-pure-data/\" target=\"_blank\" rel=\"external\">Leonard Paul “用 Pure Data 为游戏实现 Procedural Audio”</a></h2><img src=\"/2017/01/15/migs-2016/migs16-02.jpg\">\n<p>音频设计师和教师 <a href=\"http://www.migs16.com/en/leonard-j-paul-2/\" target=\"_blank\" rel=\"external\">Leonard Paul</a> 以 <a href=\"https://unity3d.com/learn/tutorials/projects/tanks-tutorial\" target=\"_blank\" rel=\"external\">Unity 示例游戏</a>作为蓝本介绍了用 Pure Data（PD）实现 procedural audio（下称 PA）音频设计一些可能性。会后他还发布了这次演讲的<a href=\"https://t.co/7ay9kxzhOV\" target=\"_blank\" rel=\"external\">幻灯</a>和<a href=\"https://t.co/7s0o9Xhoiy\" target=\"_blank\" rel=\"external\">录音</a>。</p>\n<p>在这个例子中 Leonard 展示了几个 PD patch。通过自己设计实现从 PD 到 Unity 的一整套 OSC（Open Sound Control）消息服务机制，建立了一条简单的音频原型迭代的管线：在 PD 中创建和修改设计，在 Unity 中测试，两端通过 OSC 沟通来试听和调整混音等。演示的声音大多采用简单的加法／减法／模态（Modal）实时合成方法，坦克碰撞声采用了 <a href=\"https://en.wikipedia.org/wiki/Karplus–Strong_string_synthesis\" target=\"_blank\" rel=\"external\">Karplus-Strong</a> 算法。</p>\n<p>关于 PD 生态的现状，Leonard 说 <a href=\"https://github.com/libpd/libpd\" target=\"_blank\" rel=\"external\">libpd</a> 的性能还达不到游戏要求的实时性，但 <a href=\"https://enzienaudio.com\" target=\"_blank\" rel=\"external\">Enzien Audio</a> 的 Heavy 系统的性能很有希望。目前 Heavy 支持大部分 PD 的对象，只有极少数关键对象比如 <a href=\"http://yadegari.org/expr/expr.html\" target=\"_blank\" rel=\"external\">expr～</a> 不支持。</p>\n<p>Leonard 也表示在游戏项目中选用 PD 这样的系统有一些注意事项：</p>\n<ul>\n<li>不应该为 PA 而 PA。从审美上不是所有的游戏都适合 PA，演讲采用的坦克游戏碰巧是美式动漫风，所以适合用常用的合成技术表现；</li>\n<li>用 PD “做出声音”只是音频设计流程中的一方面，走这条路还需要自己实现通信协议、混音器、voice 控制，性能优化这些一般中间件里有的东西；</li>\n<li>同一个功能可能有不同品质和性能代价的算法实现，可以考虑根据实时性能的波动切换算法以达到最优性价比；</li>\n<li>在条件允许下，比如大公司和大型项目中一般还是以中间件为出发点。</li>\n</ul>\n<p><strong>感想：</strong>利用创意编程工具实现 PA 目前还是一个技术性很强的领域，Leonard 自我介绍时强调自己的编程背景并已经有 20 多年使用 Max（90 年代初还没有 MSP）和 PD 的经验也侧面佐证了这一点。</p>\n<h2 id=\"RJ-Mattingly-“手工打造游戏音频利器”\"><a href=\"#RJ-Mattingly-“手工打造游戏音频利器”\" class=\"headerlink\" title=\"RJ Mattingly “手工打造游戏音频利器”\"></a><a href=\"http://www.migs16.com/en/events/making-the-sharpest/\" target=\"_blank\" rel=\"external\">RJ Mattingly “手工打造游戏音频利器”</a></h2><img src=\"/2017/01/15/migs-2016/migs16-03.jpg\">\n<p><a href=\"http://www.migs16.com/en/rj-mattingly-2/\" target=\"_blank\" rel=\"external\">RJ Mattingly</a> 是 PopCap 的技术声音设计师。PopCap 现在全面采用 Unity + Wwise 的音频开发流程，在演讲中他介绍了为优化 PopCap 内部工作流程写的一些小脚本工具，基本都用 Python 语言实现。</p>\n<h3 id=\"SoundBank-管线工具\"><a href=\"#SoundBank-管线工具\" class=\"headerlink\" title=\"SoundBank 管线工具\"></a>SoundBank 管线工具</h3><p>PopCap 的 SoundBank 处理管线见上图。</p>\n<p>他们早期基于 Perforce 的流程中声音设计师不但提交 Wwise 工程文件，还提交 SoundBank。这样一来因为 SoundBank 是团队共享的，所以容易出现冲突。RJ 的第一个显而易见的改进便是规定设计师不提交 SoundBank（设计产物），而只提交工程文件（设计本身），并在 <a href=\"https://jenkins.io\" target=\"_blank\" rel=\"external\">Jenkins</a> 管线中通过脚本使用 Wwise 自带的命令行工具 <a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=bankscommandline.html\" target=\"_blank\" rel=\"external\">WwiseCli</a> 生成项目的唯一一份 SoundBank，解决了冲突问题。</p>\n<p>一个常见的人为错误是在生成 SoundBank 时漏加了文件或者多个 SoundBank 中有重复的音频源文件，这些错误有时几个礼拜之后才会发现。于是 RJ 利用 Wwise 中 SoundBank 生成的后处理 <a href=\"https://www.audiokinetic.com/library/edge/?source=Help&amp;id=defining_custom_user_steps_to_be_performed_pre_post_soundbank_generation\" target=\"_blank\" rel=\"external\">post-generation step</a> 写了一个脚本来分析 Wwise 自动生成的日志，找到与缺少和重复文件相关的信息，并自动群发邮件。这样一来，错误一般都能当天发现并修正。</p>\n<h3 id=\"Event-工具\"><a href=\"#Event-工具\" class=\"headerlink\" title=\"Event 工具\"></a>Event 工具</h3><p>在性能优化上，Wwise 中虽然有最大复音数限制机制，但有些时候项目会想从 Event 层面来做限制，比如三消游戏《Bejeweled》系列中的爆炸道具如不加限制会引爆上百个事件，目前 Wwise 中没有提供由设计师来指定事件数限制的流程。因为 Wwise 事件下有 Notes 这个属性，因为属性保存在事件所在的 WorkUnit（.wwu）文件中，RJ 于是把 Notes 当作特殊字段来用，写了一个脚本工具在 Notes 中加入自定义的事件限制文本编码，设计师可以在 Wwise 中进一步手动调整，然后工具会分析 .wwu 并生成游戏程序可以读取的 metadata 作为事件限制的参考数据。</p>\n<h3 id=\"动画配声工具\"><a href=\"#动画配声工具\" class=\"headerlink\" title=\"动画配声工具\"></a>动画配声工具</h3><p>在《Plants vs. Zombies: Heroes》中有 300 多个角色，每个角色有 5-20 个动画序列，所以手工配声工作量巨大。于是 RJ 写了一个 Unity UI 拓展能够改进这个流程，并能够自动比较 Unity 端登记的动画 Event 和 Wwise 设计工具端的 Event，保证在 Unity 端登记的 Wwise Event 确实存在。</p>\n<p>设计师往往喜欢把 Unity 的动画导出成视频文件然后到 DAW 中配声，但 Unity 没有这种导出支持。于是 RJ 写了工具自动导出动画成视频，方法是：将动画帧自动截屏成图片，再用 <a href=\"https://ffmpeg.org\" target=\"_blank\" rel=\"external\">ffmpeg</a> 的命令行工具将这些图片批量组装成视频文件。</p>\n<h2 id=\"Benoit-Alary-“用于虚拟声学空间的沉浸式混响”\"><a href=\"#Benoit-Alary-“用于虚拟声学空间的沉浸式混响”\" class=\"headerlink\" title=\"Benoit Alary “用于虚拟声学空间的沉浸式混响”\"></a><a href=\"http://www.migs16.com/en/blog/events/immersive-reverberation/\" target=\"_blank\" rel=\"external\">Benoit Alary “用于虚拟声学空间的沉浸式混响”</a></h2><p>Audiokinetic 的 Benoit Alary 做了关于 Audiokinetic 研发的新互动混响插件（代号 <em>SynthSpace</em>）的演讲，作为早先<a href=\"https://blog.audiokinetic.com/migs/\" target=\"_blank\" rel=\"external\">这篇博客</a>的展开并演示了原型效果。</p>\n<p>传统混响技术有其局限性。参数混响比如 <a href=\"https://ccrma.stanford.edu/~jos/pasp/FDN_Reverberation.html\" target=\"_blank\" rel=\"external\">FDN 算法族</a> 难以加入逼真的互动效果，比如玩家在室内走动时，很难根据玩家离墙的远近自动调整早期反射效果。而在其它方面相对参数混响有优势的卷积混响如果想要克服这一点，则需要录制多个冲激响应（IR）来捕捉整个空间。暴雪在《Overwatch》中为了改进这点研发了自己的内部 Wwise 插件 Quad Delay 用来加入与环境互动的反射效果，见他们的 <a href=\"http://gdcvault.com/play/1023010/Overwatch-The-Elusive-Goal-Play\" target=\"_blank\" rel=\"external\">GDC 2016 演讲</a>。</p>\n<p>以往在解决这个问题上有两派：</p>\n<ul>\n<li>几何方法：将混响问题中的声音传播退化为类几何光学问题，研究从声源出发的理想射线在封闭空间中的几何反射。但这种简化做法不考虑声波的干涉等性质，如果用于整个混响过程，则效果有局限。</li>\n<li>波方法：直接模拟声波传播，考虑所有波的性质包括干涉。这种做法运算量巨大，目前唯一实际的做法是离线计算好各种参数并储存为数据库供应用程序实时检索使用，但对设计流程来说离线计算的开销可能就是小时甚至天的数量级。另一个问题是，波方法需要每秒 4 万次以上的反射取样，因此在数字音频采样率的限制下对高频的表现不会很好。</li>\n</ul>\n<p>在游戏等媒体应用中，实际需求往往并不是完全逼真地模拟现实中的混响，而是需要给音频设计师足够的控制来达到某种艺术效果。</p>\n<p>目前的趋势是混成混响（Hybrid Reverb）技术：拆分混响过程，利用几何方法来控制早期反射（early reflection），而用传统混响来控制后期混响（late reverb）。</p>\n<p><em>SynthSpace</em> 的这款 Wwise 混音器插件就是给高品质混响用户群特别是 VR／AR 项目准备的实用工具。</p>\n<img src=\"/2017/01/15/migs-2016/migs16-04.JPG\">\n<img src=\"/2017/01/15/migs-2016/migs16-05.JPG\">\n<p>它的用法是在一条混响总线上加入此插件，实时接收游戏发送的空间鞋盒（shoebox）模型以及发声体和听者在空间中的位置，基于这些数据进行实时反射计算，取代参数混响中的 Pre-Delay 参数，设计师可以在 Wwise 中对反射等效果和性能需求做精确的设计，再结合其它混响效果实现完整的互动混响。《Overwatch》的 Quad Delay 插件是基于 4 个平面方向的环绕声方案，相比之下，<em>SynthSpace</em> 支持 6 个方向的三维空间，因而也支持 spatial audio，在传统游戏和 VR/AR 中都有用武之地。</p>\n<p>演示用到了 Wwise 后续将发布的全新 3D 测试游戏地图，将作为 Cube Demo 基础上更适合测试声学效果的 demo 安装包。<em>SynthSpace</em> 将于 2017 年内面世，到时候可能会有正式的新名字。</p>\n<h2 id=\"Olivier-Deriviere-“环境音乐，互动配乐的下一步-”\"><a href=\"#Olivier-Deriviere-“环境音乐，互动配乐的下一步-”\" class=\"headerlink\" title=\"Olivier Deriviere “环境音乐，互动配乐的下一步?”\"></a><a href=\"http://www.migs16.com/en/blog/events/environmental-music/\" target=\"_blank\" rel=\"external\">Olivier Deriviere “环境音乐，互动配乐的下一步?”</a></h2><p><a href=\"http://olivierderiviere.com\" target=\"_blank\" rel=\"external\">Olivier Deriviere</a> 之前在 <a href=\"https://www.youtube.com/watch?v=kWyf90LXLAg\" target=\"_blank\" rel=\"external\">《Remember Me》（2013）</a> 中将战斗音乐的互动性推到了新高度，这次他介绍了在万代南梦宫新作<a href=\"https://www.youtube.com/watch?v=E9qQz0X7QYM\" target=\"_blank\" rel=\"external\">《Get Even》</a>中的新实验：利用 Wwise 和 3D Audio 将环境声和音乐融为一体。之前在《DOOM》（2016）中已嗅到这种味道。这场据说是这届 MIGS 上最值得去的音频演讲，可惜没有去成，不过游戏在 GDC 2017 上会有首秀，很期待。</p>\n<h2 id=\"Wolff-Dobson-“机器学习、游戏和你”\"><a href=\"#Wolff-Dobson-“机器学习、游戏和你”\" class=\"headerlink\" title=\"Wolff Dobson “机器学习、游戏和你”\"></a><a href=\"http://www.migs16.com/en/blog/events/machine-learning-games-and-you/\" target=\"_blank\" rel=\"external\">Wolff Dobson “机器学习、游戏和你”</a></h2><p>这是去的唯一一场非音频演讲。来自 Google 机器学习组的 <a href=\"http://www.migs16.com/en/blog/2016/10/16/wolff-dobson-2/\" target=\"_blank\" rel=\"external\">Wolff Dobson</a>这场大半是科普机器学习特别是深度学习及其新进展，也指出了游戏中机器学习的一些应用的可能性和已经用到的场合：</p>\n<ul>\n<li>分析玩家的入坑、内购、弃坑规律，在预测到可能行为时推送合适的内容促进留存率；</li>\n<li>分析游戏中玩家聊天记录判断情绪；</li>\n<li>分析监测作弊行为；</li>\n<li>分析玩家的玩法特征，让游戏内容作出适配；</li>\n<li>分析电影中的真人动作和物理系统来自动生成游戏物理系统和动画；</li>\n<li>分析玩家的操作和策略，利用<a href=\"http://baike.baidu.com/view/1627904.htm\" target=\"_blank\" rel=\"external\">强化学习</a>给玩家策略建议；</li>\n<li>分析生物面部特征，做出更自动化的捏脸系统；</li>\n<li>自动生成内容：关卡、对白、NPC。</li>\n</ul>\n<p>他也强调“玩家的乐趣”是终极目标，而不是为了机器学习而学习。比如，在角色扮演和第一人称游戏里面玩家的视野和注意力受限，所以镜头外的 AI 其实必要性不大，因为玩家要么注意不到，要么可能把 NPC 在 GPS 上的“出色”表现理解为是机器作弊。</p>\n<p>他也提到了一些游戏以外的机器学习应用：</p>\n<p><img src=\"https://github.com/david-gpu/srez/raw/master/srez_sample_output.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/david-gpu/srez\" target=\"_blank\" rel=\"external\">图片低清转高清</a></p>\n<img src=\"/2017/01/15/migs-2016/migs16-06.png\">\n<p><a href=\"https://www.youtube.com/watch?v=6ZHiARZmiUI\" target=\"_blank\" rel=\"external\">实时混合油画滤镜</a></p>\n<p><img src=\"https://github.com/Newmu/dcgan_code/blob/master/images/lsun_bedrooms_five_epoch_samples.png?raw=true\" alt=\"\"></p>\n<p><img src=\"https://github.com/Newmu/dcgan_code/blob/master/images/albums_128px.png?raw=true\" alt=\"\"><br><a href=\"https://github.com/Newmu/dcgan_code\" target=\"_blank\" rel=\"external\">自动生成卧室照片、唱片封套</a>（之前我在朋友圈转过）</p>\n<p><img src=\"https://tctechcrunch2011.files.wordpress.com/2016/09/trash2.jpg?w=738\" alt=\"\"></p>\n<p><a href=\"https://techcrunch.com/2016/09/13/auto-trash-sorts-garbage-automatically-at-the-techcrunch-disrupt-hackathon/\" target=\"_blank\" rel=\"external\">自动垃圾分类</a></p>\n","site":{"data":{}},"excerpt":"<p>最近一次的<a href=\"http://www.migs16.com/en/\" target=\"_blank\" rel=\"external\">蒙特利尔国际游戏峰会 MIGS 2016</a>过去一阵子了，只有3岁的 MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还是有些有用的技术演讲，在此追记一下自己去过那几场的要点，主要是音频专场。","more":"</p>\n<img src=\"/2017/01/15/migs-2016/migs16-01.jpg\">\n<h2 id=\"Leonard-Paul-“用-Pure-Data-为游戏实现-Procedural-Audio”\"><a href=\"#Leonard-Paul-“用-Pure-Data-为游戏实现-Procedural-Audio”\" class=\"headerlink\" title=\"Leonard Paul “用 Pure Data 为游戏实现 Procedural Audio”\"></a><a href=\"http://www.migs16.com/en/events/procedural-game-audio-with-pure-data/\" target=\"_blank\" rel=\"external\">Leonard Paul “用 Pure Data 为游戏实现 Procedural Audio”</a></h2><img src=\"/2017/01/15/migs-2016/migs16-02.jpg\">\n<p>音频设计师和教师 <a href=\"http://www.migs16.com/en/leonard-j-paul-2/\" target=\"_blank\" rel=\"external\">Leonard Paul</a> 以 <a href=\"https://unity3d.com/learn/tutorials/projects/tanks-tutorial\" target=\"_blank\" rel=\"external\">Unity 示例游戏</a>作为蓝本介绍了用 Pure Data（PD）实现 procedural audio（下称 PA）音频设计一些可能性。会后他还发布了这次演讲的<a href=\"https://t.co/7ay9kxzhOV\" target=\"_blank\" rel=\"external\">幻灯</a>和<a href=\"https://t.co/7s0o9Xhoiy\" target=\"_blank\" rel=\"external\">录音</a>。</p>\n<p>在这个例子中 Leonard 展示了几个 PD patch。通过自己设计实现从 PD 到 Unity 的一整套 OSC（Open Sound Control）消息服务机制，建立了一条简单的音频原型迭代的管线：在 PD 中创建和修改设计，在 Unity 中测试，两端通过 OSC 沟通来试听和调整混音等。演示的声音大多采用简单的加法／减法／模态（Modal）实时合成方法，坦克碰撞声采用了 <a href=\"https://en.wikipedia.org/wiki/Karplus–Strong_string_synthesis\" target=\"_blank\" rel=\"external\">Karplus-Strong</a> 算法。</p>\n<p>关于 PD 生态的现状，Leonard 说 <a href=\"https://github.com/libpd/libpd\" target=\"_blank\" rel=\"external\">libpd</a> 的性能还达不到游戏要求的实时性，但 <a href=\"https://enzienaudio.com\" target=\"_blank\" rel=\"external\">Enzien Audio</a> 的 Heavy 系统的性能很有希望。目前 Heavy 支持大部分 PD 的对象，只有极少数关键对象比如 <a href=\"http://yadegari.org/expr/expr.html\" target=\"_blank\" rel=\"external\">expr～</a> 不支持。</p>\n<p>Leonard 也表示在游戏项目中选用 PD 这样的系统有一些注意事项：</p>\n<ul>\n<li>不应该为 PA 而 PA。从审美上不是所有的游戏都适合 PA，演讲采用的坦克游戏碰巧是美式动漫风，所以适合用常用的合成技术表现；</li>\n<li>用 PD “做出声音”只是音频设计流程中的一方面，走这条路还需要自己实现通信协议、混音器、voice 控制，性能优化这些一般中间件里有的东西；</li>\n<li>同一个功能可能有不同品质和性能代价的算法实现，可以考虑根据实时性能的波动切换算法以达到最优性价比；</li>\n<li>在条件允许下，比如大公司和大型项目中一般还是以中间件为出发点。</li>\n</ul>\n<p><strong>感想：</strong>利用创意编程工具实现 PA 目前还是一个技术性很强的领域，Leonard 自我介绍时强调自己的编程背景并已经有 20 多年使用 Max（90 年代初还没有 MSP）和 PD 的经验也侧面佐证了这一点。</p>\n<h2 id=\"RJ-Mattingly-“手工打造游戏音频利器”\"><a href=\"#RJ-Mattingly-“手工打造游戏音频利器”\" class=\"headerlink\" title=\"RJ Mattingly “手工打造游戏音频利器”\"></a><a href=\"http://www.migs16.com/en/events/making-the-sharpest/\" target=\"_blank\" rel=\"external\">RJ Mattingly “手工打造游戏音频利器”</a></h2><img src=\"/2017/01/15/migs-2016/migs16-03.jpg\">\n<p><a href=\"http://www.migs16.com/en/rj-mattingly-2/\" target=\"_blank\" rel=\"external\">RJ Mattingly</a> 是 PopCap 的技术声音设计师。PopCap 现在全面采用 Unity + Wwise 的音频开发流程，在演讲中他介绍了为优化 PopCap 内部工作流程写的一些小脚本工具，基本都用 Python 语言实现。</p>\n<h3 id=\"SoundBank-管线工具\"><a href=\"#SoundBank-管线工具\" class=\"headerlink\" title=\"SoundBank 管线工具\"></a>SoundBank 管线工具</h3><p>PopCap 的 SoundBank 处理管线见上图。</p>\n<p>他们早期基于 Perforce 的流程中声音设计师不但提交 Wwise 工程文件，还提交 SoundBank。这样一来因为 SoundBank 是团队共享的，所以容易出现冲突。RJ 的第一个显而易见的改进便是规定设计师不提交 SoundBank（设计产物），而只提交工程文件（设计本身），并在 <a href=\"https://jenkins.io\" target=\"_blank\" rel=\"external\">Jenkins</a> 管线中通过脚本使用 Wwise 自带的命令行工具 <a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=bankscommandline.html\" target=\"_blank\" rel=\"external\">WwiseCli</a> 生成项目的唯一一份 SoundBank，解决了冲突问题。</p>\n<p>一个常见的人为错误是在生成 SoundBank 时漏加了文件或者多个 SoundBank 中有重复的音频源文件，这些错误有时几个礼拜之后才会发现。于是 RJ 利用 Wwise 中 SoundBank 生成的后处理 <a href=\"https://www.audiokinetic.com/library/edge/?source=Help&amp;id=defining_custom_user_steps_to_be_performed_pre_post_soundbank_generation\" target=\"_blank\" rel=\"external\">post-generation step</a> 写了一个脚本来分析 Wwise 自动生成的日志，找到与缺少和重复文件相关的信息，并自动群发邮件。这样一来，错误一般都能当天发现并修正。</p>\n<h3 id=\"Event-工具\"><a href=\"#Event-工具\" class=\"headerlink\" title=\"Event 工具\"></a>Event 工具</h3><p>在性能优化上，Wwise 中虽然有最大复音数限制机制，但有些时候项目会想从 Event 层面来做限制，比如三消游戏《Bejeweled》系列中的爆炸道具如不加限制会引爆上百个事件，目前 Wwise 中没有提供由设计师来指定事件数限制的流程。因为 Wwise 事件下有 Notes 这个属性，因为属性保存在事件所在的 WorkUnit（.wwu）文件中，RJ 于是把 Notes 当作特殊字段来用，写了一个脚本工具在 Notes 中加入自定义的事件限制文本编码，设计师可以在 Wwise 中进一步手动调整，然后工具会分析 .wwu 并生成游戏程序可以读取的 metadata 作为事件限制的参考数据。</p>\n<h3 id=\"动画配声工具\"><a href=\"#动画配声工具\" class=\"headerlink\" title=\"动画配声工具\"></a>动画配声工具</h3><p>在《Plants vs. Zombies: Heroes》中有 300 多个角色，每个角色有 5-20 个动画序列，所以手工配声工作量巨大。于是 RJ 写了一个 Unity UI 拓展能够改进这个流程，并能够自动比较 Unity 端登记的动画 Event 和 Wwise 设计工具端的 Event，保证在 Unity 端登记的 Wwise Event 确实存在。</p>\n<p>设计师往往喜欢把 Unity 的动画导出成视频文件然后到 DAW 中配声，但 Unity 没有这种导出支持。于是 RJ 写了工具自动导出动画成视频，方法是：将动画帧自动截屏成图片，再用 <a href=\"https://ffmpeg.org\" target=\"_blank\" rel=\"external\">ffmpeg</a> 的命令行工具将这些图片批量组装成视频文件。</p>\n<h2 id=\"Benoit-Alary-“用于虚拟声学空间的沉浸式混响”\"><a href=\"#Benoit-Alary-“用于虚拟声学空间的沉浸式混响”\" class=\"headerlink\" title=\"Benoit Alary “用于虚拟声学空间的沉浸式混响”\"></a><a href=\"http://www.migs16.com/en/blog/events/immersive-reverberation/\" target=\"_blank\" rel=\"external\">Benoit Alary “用于虚拟声学空间的沉浸式混响”</a></h2><p>Audiokinetic 的 Benoit Alary 做了关于 Audiokinetic 研发的新互动混响插件（代号 <em>SynthSpace</em>）的演讲，作为早先<a href=\"https://blog.audiokinetic.com/migs/\" target=\"_blank\" rel=\"external\">这篇博客</a>的展开并演示了原型效果。</p>\n<p>传统混响技术有其局限性。参数混响比如 <a href=\"https://ccrma.stanford.edu/~jos/pasp/FDN_Reverberation.html\" target=\"_blank\" rel=\"external\">FDN 算法族</a> 难以加入逼真的互动效果，比如玩家在室内走动时，很难根据玩家离墙的远近自动调整早期反射效果。而在其它方面相对参数混响有优势的卷积混响如果想要克服这一点，则需要录制多个冲激响应（IR）来捕捉整个空间。暴雪在《Overwatch》中为了改进这点研发了自己的内部 Wwise 插件 Quad Delay 用来加入与环境互动的反射效果，见他们的 <a href=\"http://gdcvault.com/play/1023010/Overwatch-The-Elusive-Goal-Play\" target=\"_blank\" rel=\"external\">GDC 2016 演讲</a>。</p>\n<p>以往在解决这个问题上有两派：</p>\n<ul>\n<li>几何方法：将混响问题中的声音传播退化为类几何光学问题，研究从声源出发的理想射线在封闭空间中的几何反射。但这种简化做法不考虑声波的干涉等性质，如果用于整个混响过程，则效果有局限。</li>\n<li>波方法：直接模拟声波传播，考虑所有波的性质包括干涉。这种做法运算量巨大，目前唯一实际的做法是离线计算好各种参数并储存为数据库供应用程序实时检索使用，但对设计流程来说离线计算的开销可能就是小时甚至天的数量级。另一个问题是，波方法需要每秒 4 万次以上的反射取样，因此在数字音频采样率的限制下对高频的表现不会很好。</li>\n</ul>\n<p>在游戏等媒体应用中，实际需求往往并不是完全逼真地模拟现实中的混响，而是需要给音频设计师足够的控制来达到某种艺术效果。</p>\n<p>目前的趋势是混成混响（Hybrid Reverb）技术：拆分混响过程，利用几何方法来控制早期反射（early reflection），而用传统混响来控制后期混响（late reverb）。</p>\n<p><em>SynthSpace</em> 的这款 Wwise 混音器插件就是给高品质混响用户群特别是 VR／AR 项目准备的实用工具。</p>\n<img src=\"/2017/01/15/migs-2016/migs16-04.JPG\">\n<img src=\"/2017/01/15/migs-2016/migs16-05.JPG\">\n<p>它的用法是在一条混响总线上加入此插件，实时接收游戏发送的空间鞋盒（shoebox）模型以及发声体和听者在空间中的位置，基于这些数据进行实时反射计算，取代参数混响中的 Pre-Delay 参数，设计师可以在 Wwise 中对反射等效果和性能需求做精确的设计，再结合其它混响效果实现完整的互动混响。《Overwatch》的 Quad Delay 插件是基于 4 个平面方向的环绕声方案，相比之下，<em>SynthSpace</em> 支持 6 个方向的三维空间，因而也支持 spatial audio，在传统游戏和 VR/AR 中都有用武之地。</p>\n<p>演示用到了 Wwise 后续将发布的全新 3D 测试游戏地图，将作为 Cube Demo 基础上更适合测试声学效果的 demo 安装包。<em>SynthSpace</em> 将于 2017 年内面世，到时候可能会有正式的新名字。</p>\n<h2 id=\"Olivier-Deriviere-“环境音乐，互动配乐的下一步-”\"><a href=\"#Olivier-Deriviere-“环境音乐，互动配乐的下一步-”\" class=\"headerlink\" title=\"Olivier Deriviere “环境音乐，互动配乐的下一步?”\"></a><a href=\"http://www.migs16.com/en/blog/events/environmental-music/\" target=\"_blank\" rel=\"external\">Olivier Deriviere “环境音乐，互动配乐的下一步?”</a></h2><p><a href=\"http://olivierderiviere.com\" target=\"_blank\" rel=\"external\">Olivier Deriviere</a> 之前在 <a href=\"https://www.youtube.com/watch?v=kWyf90LXLAg\" target=\"_blank\" rel=\"external\">《Remember Me》（2013）</a> 中将战斗音乐的互动性推到了新高度，这次他介绍了在万代南梦宫新作<a href=\"https://www.youtube.com/watch?v=E9qQz0X7QYM\" target=\"_blank\" rel=\"external\">《Get Even》</a>中的新实验：利用 Wwise 和 3D Audio 将环境声和音乐融为一体。之前在《DOOM》（2016）中已嗅到这种味道。这场据说是这届 MIGS 上最值得去的音频演讲，可惜没有去成，不过游戏在 GDC 2017 上会有首秀，很期待。</p>\n<h2 id=\"Wolff-Dobson-“机器学习、游戏和你”\"><a href=\"#Wolff-Dobson-“机器学习、游戏和你”\" class=\"headerlink\" title=\"Wolff Dobson “机器学习、游戏和你”\"></a><a href=\"http://www.migs16.com/en/blog/events/machine-learning-games-and-you/\" target=\"_blank\" rel=\"external\">Wolff Dobson “机器学习、游戏和你”</a></h2><p>这是去的唯一一场非音频演讲。来自 Google 机器学习组的 <a href=\"http://www.migs16.com/en/blog/2016/10/16/wolff-dobson-2/\" target=\"_blank\" rel=\"external\">Wolff Dobson</a>这场大半是科普机器学习特别是深度学习及其新进展，也指出了游戏中机器学习的一些应用的可能性和已经用到的场合：</p>\n<ul>\n<li>分析玩家的入坑、内购、弃坑规律，在预测到可能行为时推送合适的内容促进留存率；</li>\n<li>分析游戏中玩家聊天记录判断情绪；</li>\n<li>分析监测作弊行为；</li>\n<li>分析玩家的玩法特征，让游戏内容作出适配；</li>\n<li>分析电影中的真人动作和物理系统来自动生成游戏物理系统和动画；</li>\n<li>分析玩家的操作和策略，利用<a href=\"http://baike.baidu.com/view/1627904.htm\" target=\"_blank\" rel=\"external\">强化学习</a>给玩家策略建议；</li>\n<li>分析生物面部特征，做出更自动化的捏脸系统；</li>\n<li>自动生成内容：关卡、对白、NPC。</li>\n</ul>\n<p>他也强调“玩家的乐趣”是终极目标，而不是为了机器学习而学习。比如，在角色扮演和第一人称游戏里面玩家的视野和注意力受限，所以镜头外的 AI 其实必要性不大，因为玩家要么注意不到，要么可能把 NPC 在 GPS 上的“出色”表现理解为是机器作弊。</p>\n<p>他也提到了一些游戏以外的机器学习应用：</p>\n<p><img src=\"https://github.com/david-gpu/srez/raw/master/srez_sample_output.png\" alt=\"\"></p>\n<p><a href=\"https://github.com/david-gpu/srez\" target=\"_blank\" rel=\"external\">图片低清转高清</a></p>\n<img src=\"/2017/01/15/migs-2016/migs16-06.png\">\n<p><a href=\"https://www.youtube.com/watch?v=6ZHiARZmiUI\" target=\"_blank\" rel=\"external\">实时混合油画滤镜</a></p>\n<p><img src=\"https://github.com/Newmu/dcgan_code/blob/master/images/lsun_bedrooms_five_epoch_samples.png?raw=true\" alt=\"\"></p>\n<p><img src=\"https://github.com/Newmu/dcgan_code/blob/master/images/albums_128px.png?raw=true\" alt=\"\"><br><a href=\"https://github.com/Newmu/dcgan_code\" target=\"_blank\" rel=\"external\">自动生成卧室照片、唱片封套</a>（之前我在朋友圈转过）</p>\n<p><img src=\"https://tctechcrunch2011.files.wordpress.com/2016/09/trash2.jpg?w=738\" alt=\"\"></p>\n<p><a href=\"https://techcrunch.com/2016/09/13/auto-trash-sorts-garbage-automatically-at-the-techcrunch-disrupt-hackathon/\" target=\"_blank\" rel=\"external\">自动垃圾分类</a></p>"},{"title":"第一天","date":"2016-12-25T05:54:17.000Z","_content":"\n之前玩公众号，但发现在引用外链和离线写作方面有限制。很多时候我期待的是自由外链引用、离线为主、一键发布、迭代迁移方便的博客流程。\n\nGitHub 的静态站点系统 [GitHub Pages](https://pages.github.com) 支持按照软件开发流程来管理博客，通过纯文本标记格式比如 [Markdown](https://en.wikipedia.org/wiki/Markdown) 写作存为本地文件，再一键发布到远程。\n\n所以来 GitHub 试试。\n","source":"_posts/Hello-Hexo-你好-Hexo.md","raw":"---\ntitle: 第一天\ndate: 2016-12-25 13:54:17\ncategories: \n\n- Writing\n\n\ntags: \n\n- github\n---\n\n之前玩公众号，但发现在引用外链和离线写作方面有限制。很多时候我期待的是自由外链引用、离线为主、一键发布、迭代迁移方便的博客流程。\n\nGitHub 的静态站点系统 [GitHub Pages](https://pages.github.com) 支持按照软件开发流程来管理博客，通过纯文本标记格式比如 [Markdown](https://en.wikipedia.org/wiki/Markdown) 写作存为本地文件，再一键发布到远程。\n\n所以来 GitHub 试试。\n","slug":"Hello-Hexo-你好-Hexo","published":1,"updated":"2019-10-17T09:02:54.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfntf00070enzy1f5h92o","content":"<p>之前玩公众号，但发现在引用外链和离线写作方面有限制。很多时候我期待的是自由外链引用、离线为主、一键发布、迭代迁移方便的博客流程。</p>\n<p>GitHub 的静态站点系统 <a href=\"https://pages.github.com\" target=\"_blank\" rel=\"external\">GitHub Pages</a> 支持按照软件开发流程来管理博客，通过纯文本标记格式比如 <a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">Markdown</a> 写作存为本地文件，再一键发布到远程。</p>\n<p>所以来 GitHub 试试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前玩公众号，但发现在引用外链和离线写作方面有限制。很多时候我期待的是自由外链引用、离线为主、一键发布、迭代迁移方便的博客流程。</p>\n<p>GitHub 的静态站点系统 <a href=\"https://pages.github.com\" target=\"_blank\" rel=\"external\">GitHub Pages</a> 支持按照软件开发流程来管理博客，通过纯文本标记格式比如 <a href=\"https://en.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"external\">Markdown</a> 写作存为本地文件，再一键发布到远程。</p>\n<p>所以来 GitHub 试试。</p>\n"},{"title":"快速试听 Wwise 互动音乐的过渡","date":"2017-10-29T10:23:07.000Z","_content":"\n本文探讨的所有问题和解决方案都**基于 Wwise 2017.1.x**。不对后续版本负责。\n\n## 起因：听一下过渡好难\n\n利用 Wwise 的互动音乐功能可以用小段音乐编组搭建出动态和互动的曲式和织体，但搭完了之后你还是得用耳朵试听乐段间的过渡，确保衔接在音乐意义上是无缝的。截至 Wwise 2017.1，不少人在这里遇到了麻烦，见下图：\n\n<!--![](quick-auditioning-music-transitions/mpe.png)-->\n\n{% asset_img mpe.png %}\n\n这个例子来自 Wwise 自带的示例工程`Sample Project`（可以从Wwise Launcher 的`SAMPLES`页下打开），在 Music Playlist Editor 中，`Stealth`这个 Music Playlist Container 中有一个 Sequence Continuous 模式的 Music Segment 编组，图中正在试听前两个 Music Segment 间的过渡。这时，由于`Stealth`采用的过渡规则中，Source 段用了`Exit source at Exit Cue`这条同步规则，见下图：\n\n<!--![](quick-auditioning-music-transitions/transition-exit-cue.png)-->\n\n{% asset_img transition-exit-cue.png %}\n\nExit Cue 一般靠近曲子尾声，所以你必须把`Stealth_Seg_01`从头听到 Exit Cue 处才能开始试听和`Stealth_Seg_02`间的过渡，如果曲子很长，这样就很浪费时间；还有更惨的：当要听的过渡在一个很长的连续列表的中间靠后时，即便同步点是 Next Bar 这样近距离的，每次你还都得从最顶上听起。如下图：\n\n<!--![](quick-auditioning-music-transitions/mpe-mid-seg.png)-->\n\n{% asset_img mpe-mid-seg.png %}\n\n要听`Seg 02b (B)`到下一段的过渡时，你每次都得从`Seg 01a (A)`听起。上图里还比较仁慈，每个段落都只循环了一次，万一有些会循环有限次，万一播着中间接了个电话，... 你懂的。\n\n于是你又下意识地跑到 Music Segment Editor 界面中想对着波形迅速定位到过渡点附近听，结果发现一次又只能试听一个 Segment，见下图：\n\n<!--![](quick-auditioning-music-transitions/mse.png)-->\n\n{% asset_img mse.png %}\n\n所以还是快不起来。\n\n在别的情况下，也会有类似问题：\n\n- 确认单个 Music Segment 的循环无缝时。\n- 试听 Music Switch Container 下的状态切换时。\n\n需要强调的是，麻烦大小和设计有关，短小的 Music Segment 可能几乎感觉不到。\n\n面对这些情况，**你的需求大概是这么三条**：\n\n1. 能从播放列表中直接挑出任何一对 Music Segment 来听过渡，不管它们在什么地方。\n2. 能定位到过渡点附近开始听。\n3. 能试听单曲循环的首尾衔接。\n\n换句话说：如今主流媒体播放器能做到的一些事情。\n\n<!--![](quick-auditioning-music-transitions/media-player.png)-->\n\n{% asset_image media-player.png %}\n\n上图中，如果你想听`Say`和`Architect`这两首曲子间的过渡（假设有的话），那么只需要鼠标双击`Say`这首，然后用底部进度条定位到尾部收听即可。如果要测自循环，则只需要把循环模式调到单曲循环就行了（注：Wwise 中由于有同步点的问题，常规的进度条还不够）。\n\n相比之下，我们发现：**Wwise 虽然提供了搭建非线性音乐结构的一整套工具，但其 UI 的预览功能不支持线性媒体播放器中的列表定点播放体验。** 当然，反过来大多数线性媒体播放器也不支持 Wwise 提供的众多非线性播放功能。\n\n在 Wwise 在 UI 上做出改进之前，我们暂时还得面对这个问题。\n\n好消息是，“解决方法“（Hack）还是有的，虽然都不完美！\n我们来看看到 Wwise 2017.1 版本为止，目前已知的三种方法。我把它们按从直观到抽象排了序。\n\n\n## 方法一：手动拼接法\n\n看到标题你估计已经有点失望了。没错，这个方法很简单粗暴：通过复制粘贴把想要一起听过渡的几个 Clip 放到 Music Segment Editor 的多轨界面上，手动确保各个 Clip 的 Exit Cue 和 Entry Cue 彼此对齐，最后通过光标直接定位到过渡点附近收听播放。如果要测某一轨的无缝循环，那就把该轨上的内容复制一遍紧贴在自己的尾巴上。\n\n实际操作中有个麻烦：在 Music Segment Editor 下对齐来自两个 Music Segment 的 Clip 时，只有一个 Segment 的 Exit Cue 和 Entry Cue 能显示出来，另一个的则看不到。所以你可能要另想办法来对齐同步点，比如用 Clip handle 临时裁剪掉看不到 cue 的 Music Segment 的 Pre-Entry 或者 Post-Exit 部分，不然很难肉眼对齐。\n\n这个方法的优点是：\n\n1. 概念简单，接近 DAW 里面的操作习惯。\n2. 能通过交互来精确定位到过渡点附近。\n3. 可以试听任何 Music Segment 甚至单个 Clip 的组合。\n\n但缺点很明显：\n\n1. 用来拼接 Music Segment 的临时操作会改动 Music Segment，污染了设计本身。事后还得清理现场。虽然可以创建专门的“测试段落”，但就要维护这个多轨测试对象，并不轻松。\n2. 很难快速测试多轨 Music Segment 间的过渡。上面说的 Clip handle 操作对各轨可能都要做一遍。\n3. 手动操作繁琐，对齐容易出错。\n\n这个方法大约只适合粗略测单轨循环的情况。如果非要走这条路，倒还不如直接在 DAW 里面对素材做这些工作来得简单。\n\n\n## 方法二：快进播放法\n\n这个是 [Wwise 201 认证教程](https://www.audiokinetic.com/courses/wwise201/?source=wwise201&id=configuring_multi_group_playlists_setting_randomized_loop_counts) 中推荐的方法，海内外的一些设计师都有这样用的，见下图：\n\n<!--![](quick-auditioning-music-transitions/playbackspeed.png)-->\n\n{% asset_img playbackspeed.png %}\n\n将父级容器的播放速度调大，那么播放时过渡涉及的 Music Segment 就能快进到过渡点附近。这时候如果想精听，则可以降回原速，除非你告诉我专业人士的耳朵都是 4 倍速的！\n\n这个方法的优点是：\n\n1. 概念简单。\n2. 对设计的污染少。只动一个播放速度参数，用后还是很容易调回来的，因为默认值一般都是 1。\n\n但是缺点仍然很明显：\n\n1. 在 Music Playlist Editor 中，依然无法直接收听任意一对 Music Segment 的过渡，只能从头顺序播放。\n2. 这是一种渐进操作，无法一步定位到过渡点附近。\n3. 操作上对反射神经有一定要求 ...\n\n\n## 方法三：Seek 法\n\n这个技巧是海外设计师 Aaron Brown 分享的。基本原理是立足于 Event 及其 Seek（即寻址跳转）这个 Action。跟前两种方法相比，它更能满足本文开始分析的三条需求，但实际操作要绕点路。\n\nAaron Brown 的原始分享可以在 Wwise 的非官方 Facebook 群`Wwise Wizards & Witches`中找到，但是他只给了粗略的示意图，如下图所示：\n\n<!--![](quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg)-->\n\n{% asset_img wwise-tips-audition-transitions.jpg %}\n\n但我实操后发现在 Wwise 2017.1 中上面的方法并不能凑效，要修改一些做法。下面详细讲解一下。\n\n### 原理\n\n这个方法是希望避免肉眼定位和等待，实现一键定位到音乐的过渡点附近，按照原速收听过渡。\n\nWwise 的 Event 中有 Seek 这个 Action 可以定位到播放文件中的指定位置。**前两种方法其实也做了这个定位，只不过是用肉眼和手工操作来确保的：开始试听过渡的播放点必须要在同步点之前。**而针对这点，Seek Action 只需设好跳转位置的数值就可以。并且，它还有服务于互动音乐的[一条诱人的特性](https://www2.audiokinetic.com/library/edge/?source=Help&id=event_actions_list#bp1307910)：\n\n- Seek Action 的 Seek Percent（按百分比跳转）模式下，跳转是相对于 Entry Cue 和 Exit Cue 进行的。\n\n打个比方，不管这些 Cue 设定在 Music Segment 的什么位置，即使我们把跳转设在 99% 处（即 Seek Percent 为 99%），它也绝对不会超出 Exit Cue 而误入 Post-Exit 段；对于单曲循环的情况，跳转百分比位置是相对循环区间来算的。有了这个条件，我们就可以放心定义跳转点来一键空降到过渡点附近了。\n\n不过 Seek Action 还有[一条重要的限制](https://www2.audiokinetic.com/library/edge/?source=Help&id=event_actions_list#seek_seekall_notes_and_restrictions)：\n\n- Music Playlist Container 和 Motion 对象不支持 Seek。\n\n而 Music Segment 不能控制过渡，只能依赖其父级容器，所以在 Event 中实现过渡的唯一希望就是 Music Switch Container 了。你大概明白了吧？**我们要使用 State 切换来模拟所有的过渡情况，在切换状态之前执行 Seek 动作来直接跳转到过渡点之前的邻近位置，就能达到“直接”播放过渡段的目的。**\n\nState 切换要模拟的情况包括:\n\n1. 工程自身互动音乐设计中的状态过渡。\n2. Music Playlist Container 里面的相邻 Music Segment 间过渡。\n3. Music Segment 单曲循环的首尾衔接。\n\n看起来好像很复杂，但其实只需要把要做过渡的 Music Segment 提取出来，分别关联一个 State，指派给一个测试用的 Music Switch Container 就可以了。\n\n下面我们通过一个实例来说明做法。\n\n\n### 做法示例\n\n我们还是以 Wwise 安装包自带的`Sample Project`为例来说明 Seek 法的具体操作。简单起见，我们就挑选下图中选中的两个 Music Segment 来举例：\n\n<!--![](quick-auditioning-music-transitions/sample-segments.png)\n-->\n\n{% asset_img sample-segments.png %}\n\n这两个 Segment 也是`Stealth`这个 Music Playlist Container 中顺序播放的相邻对象（见本文第一张图），采用的过渡同步点为 Exit Cue。\n\n**首先，创建一个专用的 Music Switch Container，把`Steath_Seg_01`和`Steath_Seg_02`复制到它下面。**见下图：\n\n<!--![](quick-auditioning-music-transitions/sample-dup-msc.png)-->\n\n{% asset_img sample-dup-msc.png %}\n\n创建新的 Music Switch Container 是有原因的：在指定 Music Switch Container 的状态路径的时候，路径对应播放对象只能是该 Music Switch Container 的直接子对象，也就是说之前位于`Stealth`下面的对象如果不挪出来就无法直接关联到 State 上面去；而如果复制到原 Music Switch Container 下面，就又会污染设计。所以比较好的做法是直接创建一个新的 Music Switch Container。\n\n这个专用容器的过渡规则一般只需要用默认的`Any to Any`规则就可以，但要注意默认会播放源段的 Post-Exit 和目标段的 Pre-Entry，不启用淡变。当然，你完全可以按需要来定制整条规则。这里我们重点强调 Exit Cue 的情况。\n\n**接着，创建一个新的 State Group，然后为两个 Music Segment 各创建一个 State。**见下图：\n \n<!--![](quick-auditioning-music-transitions/sample-states.png)-->\n\n{% asset_img sample-states.png %}\n\n**下一步，回到测试专用的 Music Switch Container，设置好状态路径，让上面的 State 和 Music Segment 一一对应。**见下图：\n\n<!--![](quick-auditioning-music-transitions/sample-paths.png)-->\n\n{% asset_img sample-paths.png %}\n\n**最后，我们创建测试事件**。里面依序包含如下 Action：\n\n<!--![](quick-auditioning-music-transitions/sample-event.png)-->\n\n{% asset_img sample-event.png %}\n\n\n- 我们让第一个 Set State Action（状态初始化）比 Play Action 稍早一点执行，确保在播放之前状态已经初始化成源状态，播放源 Segment。这里我们把 Play Action 的 Delay 设为`0.01`， Set State 的 Delay 为 `0`。\n- Seek Action 也比播放略提前，Seek 模式为`Seek Percent`，位置为`90%`。你可以视需要修改这个位置。注意：Aaron Brown 在 Wwise 2016.2 中采用 Seek All 这个 Action，Scope 设为 Global，但经测试发现在 Wwise 2017.1 中这个做法无效，要使用 Seek 才行。\n- 后一个 Set State Action 也就是状态切换的动作比播放稍晚一点，确保不会覆盖第一个 Set State 操作，导致源 Segment 没能播放起来。所以这里的 Delay 设为`0.02`。\n\n现在测试一下这个 Event，看是不是能一步到位试听过渡？\n\n如果要试听一个 Music Segment 单曲循环的首尾衔接，则可以把问题转化为“从这个段落过渡到它自己的副本”，唯一需要改变的就是要复制源 Music Segment，把它作为目标段落即可。\n\n你可能会问：“我就用同一个 Music Segment，给它关联两个不同的 State 不行吗？”然而 Wwise 中，基于 State/Switch 过渡时前后必须为两个不同的对象，音乐引擎才会启动过渡行为。所以必须给原 Music Segment 做一个副本，才能通过切换 State 来测试自循环过渡。\n\n为了简单，示例中我们就地在工程已有的 Work Unit 中创建试听用的临时对象和其它元素。这样做还是污染了现有设计的，因为 Work Unit 对应 XML 文件，是 Wwise 工程的设计内容实体。所以比较好的做法是创建测试专用的 Work Unit，这样就不会污染，且很容易一键删除所有测试元素。注意，测试对象只要保证不打到 SoundBank 里就不会影响游戏的实际性能。\n\n### 进一步讨论\n\n为了试听一个小小的过渡，Seek 法看起来并不直观，需要好几步操作，这是它最明显的缺点。但是我们可以看到 Seek 法有独特的优势：\n\n1. 它可以满足我们的三条需求。\n2. 它不需要人工肉眼对位，也不依赖反应。这点别的工具很难做到。\n3. 设好的 Event、Music Switch Container 和 State 可以作为一套可复用的测试框架保留下来，用同一套框架甚至同一个事件测试各种过渡，只用反复改变事件 Action 列表中的 两个 State 就好。\n4. 整个流程可以通过 Wwise Authoring API（WAAPI）自动化脚本来加速。\n\n除以上三种方法之外，还可以用 WAAPI 做后端来写一个简单的媒体播放器播放列表界面来达到传统的体验。\n\n\n## 小结\n\n本文针对很多人提到的“听一下过渡好难”的痛点，总结了一下在不编程或自己写第三方 UI 的情况下，现有能加速试听过渡的方案，希望能给大家一点帮助，权当抛砖引玉，欢迎大家指正和探讨其它可能的技巧和方案。\n","source":"_posts/quick-auditioning-music-transitions.md","raw":"---\ntitle: 快速试听 Wwise 互动音乐的过渡\ndate: 2017-10-29 18:23:07\ncategories: GameAudio\ntags: wwise, interactivemusic\n---\n\n本文探讨的所有问题和解决方案都**基于 Wwise 2017.1.x**。不对后续版本负责。\n\n## 起因：听一下过渡好难\n\n利用 Wwise 的互动音乐功能可以用小段音乐编组搭建出动态和互动的曲式和织体，但搭完了之后你还是得用耳朵试听乐段间的过渡，确保衔接在音乐意义上是无缝的。截至 Wwise 2017.1，不少人在这里遇到了麻烦，见下图：\n\n<!--![](quick-auditioning-music-transitions/mpe.png)-->\n\n{% asset_img mpe.png %}\n\n这个例子来自 Wwise 自带的示例工程`Sample Project`（可以从Wwise Launcher 的`SAMPLES`页下打开），在 Music Playlist Editor 中，`Stealth`这个 Music Playlist Container 中有一个 Sequence Continuous 模式的 Music Segment 编组，图中正在试听前两个 Music Segment 间的过渡。这时，由于`Stealth`采用的过渡规则中，Source 段用了`Exit source at Exit Cue`这条同步规则，见下图：\n\n<!--![](quick-auditioning-music-transitions/transition-exit-cue.png)-->\n\n{% asset_img transition-exit-cue.png %}\n\nExit Cue 一般靠近曲子尾声，所以你必须把`Stealth_Seg_01`从头听到 Exit Cue 处才能开始试听和`Stealth_Seg_02`间的过渡，如果曲子很长，这样就很浪费时间；还有更惨的：当要听的过渡在一个很长的连续列表的中间靠后时，即便同步点是 Next Bar 这样近距离的，每次你还都得从最顶上听起。如下图：\n\n<!--![](quick-auditioning-music-transitions/mpe-mid-seg.png)-->\n\n{% asset_img mpe-mid-seg.png %}\n\n要听`Seg 02b (B)`到下一段的过渡时，你每次都得从`Seg 01a (A)`听起。上图里还比较仁慈，每个段落都只循环了一次，万一有些会循环有限次，万一播着中间接了个电话，... 你懂的。\n\n于是你又下意识地跑到 Music Segment Editor 界面中想对着波形迅速定位到过渡点附近听，结果发现一次又只能试听一个 Segment，见下图：\n\n<!--![](quick-auditioning-music-transitions/mse.png)-->\n\n{% asset_img mse.png %}\n\n所以还是快不起来。\n\n在别的情况下，也会有类似问题：\n\n- 确认单个 Music Segment 的循环无缝时。\n- 试听 Music Switch Container 下的状态切换时。\n\n需要强调的是，麻烦大小和设计有关，短小的 Music Segment 可能几乎感觉不到。\n\n面对这些情况，**你的需求大概是这么三条**：\n\n1. 能从播放列表中直接挑出任何一对 Music Segment 来听过渡，不管它们在什么地方。\n2. 能定位到过渡点附近开始听。\n3. 能试听单曲循环的首尾衔接。\n\n换句话说：如今主流媒体播放器能做到的一些事情。\n\n<!--![](quick-auditioning-music-transitions/media-player.png)-->\n\n{% asset_image media-player.png %}\n\n上图中，如果你想听`Say`和`Architect`这两首曲子间的过渡（假设有的话），那么只需要鼠标双击`Say`这首，然后用底部进度条定位到尾部收听即可。如果要测自循环，则只需要把循环模式调到单曲循环就行了（注：Wwise 中由于有同步点的问题，常规的进度条还不够）。\n\n相比之下，我们发现：**Wwise 虽然提供了搭建非线性音乐结构的一整套工具，但其 UI 的预览功能不支持线性媒体播放器中的列表定点播放体验。** 当然，反过来大多数线性媒体播放器也不支持 Wwise 提供的众多非线性播放功能。\n\n在 Wwise 在 UI 上做出改进之前，我们暂时还得面对这个问题。\n\n好消息是，“解决方法“（Hack）还是有的，虽然都不完美！\n我们来看看到 Wwise 2017.1 版本为止，目前已知的三种方法。我把它们按从直观到抽象排了序。\n\n\n## 方法一：手动拼接法\n\n看到标题你估计已经有点失望了。没错，这个方法很简单粗暴：通过复制粘贴把想要一起听过渡的几个 Clip 放到 Music Segment Editor 的多轨界面上，手动确保各个 Clip 的 Exit Cue 和 Entry Cue 彼此对齐，最后通过光标直接定位到过渡点附近收听播放。如果要测某一轨的无缝循环，那就把该轨上的内容复制一遍紧贴在自己的尾巴上。\n\n实际操作中有个麻烦：在 Music Segment Editor 下对齐来自两个 Music Segment 的 Clip 时，只有一个 Segment 的 Exit Cue 和 Entry Cue 能显示出来，另一个的则看不到。所以你可能要另想办法来对齐同步点，比如用 Clip handle 临时裁剪掉看不到 cue 的 Music Segment 的 Pre-Entry 或者 Post-Exit 部分，不然很难肉眼对齐。\n\n这个方法的优点是：\n\n1. 概念简单，接近 DAW 里面的操作习惯。\n2. 能通过交互来精确定位到过渡点附近。\n3. 可以试听任何 Music Segment 甚至单个 Clip 的组合。\n\n但缺点很明显：\n\n1. 用来拼接 Music Segment 的临时操作会改动 Music Segment，污染了设计本身。事后还得清理现场。虽然可以创建专门的“测试段落”，但就要维护这个多轨测试对象，并不轻松。\n2. 很难快速测试多轨 Music Segment 间的过渡。上面说的 Clip handle 操作对各轨可能都要做一遍。\n3. 手动操作繁琐，对齐容易出错。\n\n这个方法大约只适合粗略测单轨循环的情况。如果非要走这条路，倒还不如直接在 DAW 里面对素材做这些工作来得简单。\n\n\n## 方法二：快进播放法\n\n这个是 [Wwise 201 认证教程](https://www.audiokinetic.com/courses/wwise201/?source=wwise201&id=configuring_multi_group_playlists_setting_randomized_loop_counts) 中推荐的方法，海内外的一些设计师都有这样用的，见下图：\n\n<!--![](quick-auditioning-music-transitions/playbackspeed.png)-->\n\n{% asset_img playbackspeed.png %}\n\n将父级容器的播放速度调大，那么播放时过渡涉及的 Music Segment 就能快进到过渡点附近。这时候如果想精听，则可以降回原速，除非你告诉我专业人士的耳朵都是 4 倍速的！\n\n这个方法的优点是：\n\n1. 概念简单。\n2. 对设计的污染少。只动一个播放速度参数，用后还是很容易调回来的，因为默认值一般都是 1。\n\n但是缺点仍然很明显：\n\n1. 在 Music Playlist Editor 中，依然无法直接收听任意一对 Music Segment 的过渡，只能从头顺序播放。\n2. 这是一种渐进操作，无法一步定位到过渡点附近。\n3. 操作上对反射神经有一定要求 ...\n\n\n## 方法三：Seek 法\n\n这个技巧是海外设计师 Aaron Brown 分享的。基本原理是立足于 Event 及其 Seek（即寻址跳转）这个 Action。跟前两种方法相比，它更能满足本文开始分析的三条需求，但实际操作要绕点路。\n\nAaron Brown 的原始分享可以在 Wwise 的非官方 Facebook 群`Wwise Wizards & Witches`中找到，但是他只给了粗略的示意图，如下图所示：\n\n<!--![](quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg)-->\n\n{% asset_img wwise-tips-audition-transitions.jpg %}\n\n但我实操后发现在 Wwise 2017.1 中上面的方法并不能凑效，要修改一些做法。下面详细讲解一下。\n\n### 原理\n\n这个方法是希望避免肉眼定位和等待，实现一键定位到音乐的过渡点附近，按照原速收听过渡。\n\nWwise 的 Event 中有 Seek 这个 Action 可以定位到播放文件中的指定位置。**前两种方法其实也做了这个定位，只不过是用肉眼和手工操作来确保的：开始试听过渡的播放点必须要在同步点之前。**而针对这点，Seek Action 只需设好跳转位置的数值就可以。并且，它还有服务于互动音乐的[一条诱人的特性](https://www2.audiokinetic.com/library/edge/?source=Help&id=event_actions_list#bp1307910)：\n\n- Seek Action 的 Seek Percent（按百分比跳转）模式下，跳转是相对于 Entry Cue 和 Exit Cue 进行的。\n\n打个比方，不管这些 Cue 设定在 Music Segment 的什么位置，即使我们把跳转设在 99% 处（即 Seek Percent 为 99%），它也绝对不会超出 Exit Cue 而误入 Post-Exit 段；对于单曲循环的情况，跳转百分比位置是相对循环区间来算的。有了这个条件，我们就可以放心定义跳转点来一键空降到过渡点附近了。\n\n不过 Seek Action 还有[一条重要的限制](https://www2.audiokinetic.com/library/edge/?source=Help&id=event_actions_list#seek_seekall_notes_and_restrictions)：\n\n- Music Playlist Container 和 Motion 对象不支持 Seek。\n\n而 Music Segment 不能控制过渡，只能依赖其父级容器，所以在 Event 中实现过渡的唯一希望就是 Music Switch Container 了。你大概明白了吧？**我们要使用 State 切换来模拟所有的过渡情况，在切换状态之前执行 Seek 动作来直接跳转到过渡点之前的邻近位置，就能达到“直接”播放过渡段的目的。**\n\nState 切换要模拟的情况包括:\n\n1. 工程自身互动音乐设计中的状态过渡。\n2. Music Playlist Container 里面的相邻 Music Segment 间过渡。\n3. Music Segment 单曲循环的首尾衔接。\n\n看起来好像很复杂，但其实只需要把要做过渡的 Music Segment 提取出来，分别关联一个 State，指派给一个测试用的 Music Switch Container 就可以了。\n\n下面我们通过一个实例来说明做法。\n\n\n### 做法示例\n\n我们还是以 Wwise 安装包自带的`Sample Project`为例来说明 Seek 法的具体操作。简单起见，我们就挑选下图中选中的两个 Music Segment 来举例：\n\n<!--![](quick-auditioning-music-transitions/sample-segments.png)\n-->\n\n{% asset_img sample-segments.png %}\n\n这两个 Segment 也是`Stealth`这个 Music Playlist Container 中顺序播放的相邻对象（见本文第一张图），采用的过渡同步点为 Exit Cue。\n\n**首先，创建一个专用的 Music Switch Container，把`Steath_Seg_01`和`Steath_Seg_02`复制到它下面。**见下图：\n\n<!--![](quick-auditioning-music-transitions/sample-dup-msc.png)-->\n\n{% asset_img sample-dup-msc.png %}\n\n创建新的 Music Switch Container 是有原因的：在指定 Music Switch Container 的状态路径的时候，路径对应播放对象只能是该 Music Switch Container 的直接子对象，也就是说之前位于`Stealth`下面的对象如果不挪出来就无法直接关联到 State 上面去；而如果复制到原 Music Switch Container 下面，就又会污染设计。所以比较好的做法是直接创建一个新的 Music Switch Container。\n\n这个专用容器的过渡规则一般只需要用默认的`Any to Any`规则就可以，但要注意默认会播放源段的 Post-Exit 和目标段的 Pre-Entry，不启用淡变。当然，你完全可以按需要来定制整条规则。这里我们重点强调 Exit Cue 的情况。\n\n**接着，创建一个新的 State Group，然后为两个 Music Segment 各创建一个 State。**见下图：\n \n<!--![](quick-auditioning-music-transitions/sample-states.png)-->\n\n{% asset_img sample-states.png %}\n\n**下一步，回到测试专用的 Music Switch Container，设置好状态路径，让上面的 State 和 Music Segment 一一对应。**见下图：\n\n<!--![](quick-auditioning-music-transitions/sample-paths.png)-->\n\n{% asset_img sample-paths.png %}\n\n**最后，我们创建测试事件**。里面依序包含如下 Action：\n\n<!--![](quick-auditioning-music-transitions/sample-event.png)-->\n\n{% asset_img sample-event.png %}\n\n\n- 我们让第一个 Set State Action（状态初始化）比 Play Action 稍早一点执行，确保在播放之前状态已经初始化成源状态，播放源 Segment。这里我们把 Play Action 的 Delay 设为`0.01`， Set State 的 Delay 为 `0`。\n- Seek Action 也比播放略提前，Seek 模式为`Seek Percent`，位置为`90%`。你可以视需要修改这个位置。注意：Aaron Brown 在 Wwise 2016.2 中采用 Seek All 这个 Action，Scope 设为 Global，但经测试发现在 Wwise 2017.1 中这个做法无效，要使用 Seek 才行。\n- 后一个 Set State Action 也就是状态切换的动作比播放稍晚一点，确保不会覆盖第一个 Set State 操作，导致源 Segment 没能播放起来。所以这里的 Delay 设为`0.02`。\n\n现在测试一下这个 Event，看是不是能一步到位试听过渡？\n\n如果要试听一个 Music Segment 单曲循环的首尾衔接，则可以把问题转化为“从这个段落过渡到它自己的副本”，唯一需要改变的就是要复制源 Music Segment，把它作为目标段落即可。\n\n你可能会问：“我就用同一个 Music Segment，给它关联两个不同的 State 不行吗？”然而 Wwise 中，基于 State/Switch 过渡时前后必须为两个不同的对象，音乐引擎才会启动过渡行为。所以必须给原 Music Segment 做一个副本，才能通过切换 State 来测试自循环过渡。\n\n为了简单，示例中我们就地在工程已有的 Work Unit 中创建试听用的临时对象和其它元素。这样做还是污染了现有设计的，因为 Work Unit 对应 XML 文件，是 Wwise 工程的设计内容实体。所以比较好的做法是创建测试专用的 Work Unit，这样就不会污染，且很容易一键删除所有测试元素。注意，测试对象只要保证不打到 SoundBank 里就不会影响游戏的实际性能。\n\n### 进一步讨论\n\n为了试听一个小小的过渡，Seek 法看起来并不直观，需要好几步操作，这是它最明显的缺点。但是我们可以看到 Seek 法有独特的优势：\n\n1. 它可以满足我们的三条需求。\n2. 它不需要人工肉眼对位，也不依赖反应。这点别的工具很难做到。\n3. 设好的 Event、Music Switch Container 和 State 可以作为一套可复用的测试框架保留下来，用同一套框架甚至同一个事件测试各种过渡，只用反复改变事件 Action 列表中的 两个 State 就好。\n4. 整个流程可以通过 Wwise Authoring API（WAAPI）自动化脚本来加速。\n\n除以上三种方法之外，还可以用 WAAPI 做后端来写一个简单的媒体播放器播放列表界面来达到传统的体验。\n\n\n## 小结\n\n本文针对很多人提到的“听一下过渡好难”的痛点，总结了一下在不编程或自己写第三方 UI 的情况下，现有能加速试听过渡的方案，希望能给大家一点帮助，权当抛砖引玉，欢迎大家指正和探讨其它可能的技巧和方案。\n","slug":"quick-auditioning-music-transitions","published":1,"updated":"2019-10-17T09:02:54.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfnth000a0enzmbalgwmv","content":"<p>本文探讨的所有问题和解决方案都<strong>基于 Wwise 2017.1.x</strong>。不对后续版本负责。</p>\n<h2 id=\"起因：听一下过渡好难\"><a href=\"#起因：听一下过渡好难\" class=\"headerlink\" title=\"起因：听一下过渡好难\"></a>起因：听一下过渡好难</h2><p>利用 Wwise 的互动音乐功能可以用小段音乐编组搭建出动态和互动的曲式和织体，但搭完了之后你还是得用耳朵试听乐段间的过渡，确保衔接在音乐意义上是无缝的。截至 Wwise 2017.1，不少人在这里遇到了麻烦，见下图：</p>\n<!--![](quick-auditioning-music-transitions/mpe.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/mpe.png\">\n<p>这个例子来自 Wwise 自带的示例工程<code>Sample Project</code>（可以从Wwise Launcher 的<code>SAMPLES</code>页下打开），在 Music Playlist Editor 中，<code>Stealth</code>这个 Music Playlist Container 中有一个 Sequence Continuous 模式的 Music Segment 编组，图中正在试听前两个 Music Segment 间的过渡。这时，由于<code>Stealth</code>采用的过渡规则中，Source 段用了<code>Exit source at Exit Cue</code>这条同步规则，见下图：</p>\n<!--![](quick-auditioning-music-transitions/transition-exit-cue.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/transition-exit-cue.png\">\n<p>Exit Cue 一般靠近曲子尾声，所以你必须把<code>Stealth_Seg_01</code>从头听到 Exit Cue 处才能开始试听和<code>Stealth_Seg_02</code>间的过渡，如果曲子很长，这样就很浪费时间；还有更惨的：当要听的过渡在一个很长的连续列表的中间靠后时，即便同步点是 Next Bar 这样近距离的，每次你还都得从最顶上听起。如下图：</p>\n<!--![](quick-auditioning-music-transitions/mpe-mid-seg.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/mpe-mid-seg.png\">\n<p>要听<code>Seg 02b (B)</code>到下一段的过渡时，你每次都得从<code>Seg 01a (A)</code>听起。上图里还比较仁慈，每个段落都只循环了一次，万一有些会循环有限次，万一播着中间接了个电话，… 你懂的。</p>\n<p>于是你又下意识地跑到 Music Segment Editor 界面中想对着波形迅速定位到过渡点附近听，结果发现一次又只能试听一个 Segment，见下图：</p>\n<!--![](quick-auditioning-music-transitions/mse.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/mse.png\">\n<p>所以还是快不起来。</p>\n<p>在别的情况下，也会有类似问题：</p>\n<ul>\n<li>确认单个 Music Segment 的循环无缝时。</li>\n<li>试听 Music Switch Container 下的状态切换时。</li>\n</ul>\n<p>需要强调的是，麻烦大小和设计有关，短小的 Music Segment 可能几乎感觉不到。</p>\n<p>面对这些情况，<strong>你的需求大概是这么三条</strong>：</p>\n<ol>\n<li>能从播放列表中直接挑出任何一对 Music Segment 来听过渡，不管它们在什么地方。</li>\n<li>能定位到过渡点附近开始听。</li>\n<li>能试听单曲循环的首尾衔接。</li>\n</ol>\n<p>换句话说：如今主流媒体播放器能做到的一些事情。</p>\n<!--![](quick-auditioning-music-transitions/media-player.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/media-player.png\">\n<p>上图中，如果你想听<code>Say</code>和<code>Architect</code>这两首曲子间的过渡（假设有的话），那么只需要鼠标双击<code>Say</code>这首，然后用底部进度条定位到尾部收听即可。如果要测自循环，则只需要把循环模式调到单曲循环就行了（注：Wwise 中由于有同步点的问题，常规的进度条还不够）。</p>\n<p>相比之下，我们发现：<strong>Wwise 虽然提供了搭建非线性音乐结构的一整套工具，但其 UI 的预览功能不支持线性媒体播放器中的列表定点播放体验。</strong> 当然，反过来大多数线性媒体播放器也不支持 Wwise 提供的众多非线性播放功能。</p>\n<p>在 Wwise 在 UI 上做出改进之前，我们暂时还得面对这个问题。</p>\n<p>好消息是，“解决方法“（Hack）还是有的，虽然都不完美！<br>我们来看看到 Wwise 2017.1 版本为止，目前已知的三种方法。我把它们按从直观到抽象排了序。</p>\n<h2 id=\"方法一：手动拼接法\"><a href=\"#方法一：手动拼接法\" class=\"headerlink\" title=\"方法一：手动拼接法\"></a>方法一：手动拼接法</h2><p>看到标题你估计已经有点失望了。没错，这个方法很简单粗暴：通过复制粘贴把想要一起听过渡的几个 Clip 放到 Music Segment Editor 的多轨界面上，手动确保各个 Clip 的 Exit Cue 和 Entry Cue 彼此对齐，最后通过光标直接定位到过渡点附近收听播放。如果要测某一轨的无缝循环，那就把该轨上的内容复制一遍紧贴在自己的尾巴上。</p>\n<p>实际操作中有个麻烦：在 Music Segment Editor 下对齐来自两个 Music Segment 的 Clip 时，只有一个 Segment 的 Exit Cue 和 Entry Cue 能显示出来，另一个的则看不到。所以你可能要另想办法来对齐同步点，比如用 Clip handle 临时裁剪掉看不到 cue 的 Music Segment 的 Pre-Entry 或者 Post-Exit 部分，不然很难肉眼对齐。</p>\n<p>这个方法的优点是：</p>\n<ol>\n<li>概念简单，接近 DAW 里面的操作习惯。</li>\n<li>能通过交互来精确定位到过渡点附近。</li>\n<li>可以试听任何 Music Segment 甚至单个 Clip 的组合。</li>\n</ol>\n<p>但缺点很明显：</p>\n<ol>\n<li>用来拼接 Music Segment 的临时操作会改动 Music Segment，污染了设计本身。事后还得清理现场。虽然可以创建专门的“测试段落”，但就要维护这个多轨测试对象，并不轻松。</li>\n<li>很难快速测试多轨 Music Segment 间的过渡。上面说的 Clip handle 操作对各轨可能都要做一遍。</li>\n<li>手动操作繁琐，对齐容易出错。</li>\n</ol>\n<p>这个方法大约只适合粗略测单轨循环的情况。如果非要走这条路，倒还不如直接在 DAW 里面对素材做这些工作来得简单。</p>\n<h2 id=\"方法二：快进播放法\"><a href=\"#方法二：快进播放法\" class=\"headerlink\" title=\"方法二：快进播放法\"></a>方法二：快进播放法</h2><p>这个是 <a href=\"https://www.audiokinetic.com/courses/wwise201/?source=wwise201&amp;id=configuring_multi_group_playlists_setting_randomized_loop_counts\" target=\"_blank\" rel=\"external\">Wwise 201 认证教程</a> 中推荐的方法，海内外的一些设计师都有这样用的，见下图：</p>\n<!--![](quick-auditioning-music-transitions/playbackspeed.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/playbackspeed.png\">\n<p>将父级容器的播放速度调大，那么播放时过渡涉及的 Music Segment 就能快进到过渡点附近。这时候如果想精听，则可以降回原速，除非你告诉我专业人士的耳朵都是 4 倍速的！</p>\n<p>这个方法的优点是：</p>\n<ol>\n<li>概念简单。</li>\n<li>对设计的污染少。只动一个播放速度参数，用后还是很容易调回来的，因为默认值一般都是 1。</li>\n</ol>\n<p>但是缺点仍然很明显：</p>\n<ol>\n<li>在 Music Playlist Editor 中，依然无法直接收听任意一对 Music Segment 的过渡，只能从头顺序播放。</li>\n<li>这是一种渐进操作，无法一步定位到过渡点附近。</li>\n<li>操作上对反射神经有一定要求 …</li>\n</ol>\n<h2 id=\"方法三：Seek-法\"><a href=\"#方法三：Seek-法\" class=\"headerlink\" title=\"方法三：Seek 法\"></a>方法三：Seek 法</h2><p>这个技巧是海外设计师 Aaron Brown 分享的。基本原理是立足于 Event 及其 Seek（即寻址跳转）这个 Action。跟前两种方法相比，它更能满足本文开始分析的三条需求，但实际操作要绕点路。</p>\n<p>Aaron Brown 的原始分享可以在 Wwise 的非官方 Facebook 群<code>Wwise Wizards &amp; Witches</code>中找到，但是他只给了粗略的示意图，如下图所示：</p>\n<!--![](quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg\">\n<p>但我实操后发现在 Wwise 2017.1 中上面的方法并不能凑效，要修改一些做法。下面详细讲解一下。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>这个方法是希望避免肉眼定位和等待，实现一键定位到音乐的过渡点附近，按照原速收听过渡。</p>\n<p>Wwise 的 Event 中有 Seek 这个 Action 可以定位到播放文件中的指定位置。<strong>前两种方法其实也做了这个定位，只不过是用肉眼和手工操作来确保的：开始试听过渡的播放点必须要在同步点之前。</strong>而针对这点，Seek Action 只需设好跳转位置的数值就可以。并且，它还有服务于互动音乐的<a href=\"https://www2.audiokinetic.com/library/edge/?source=Help&amp;id=event_actions_list#bp1307910\" target=\"_blank\" rel=\"external\">一条诱人的特性</a>：</p>\n<ul>\n<li>Seek Action 的 Seek Percent（按百分比跳转）模式下，跳转是相对于 Entry Cue 和 Exit Cue 进行的。</li>\n</ul>\n<p>打个比方，不管这些 Cue 设定在 Music Segment 的什么位置，即使我们把跳转设在 99% 处（即 Seek Percent 为 99%），它也绝对不会超出 Exit Cue 而误入 Post-Exit 段；对于单曲循环的情况，跳转百分比位置是相对循环区间来算的。有了这个条件，我们就可以放心定义跳转点来一键空降到过渡点附近了。</p>\n<p>不过 Seek Action 还有<a href=\"https://www2.audiokinetic.com/library/edge/?source=Help&amp;id=event_actions_list#seek_seekall_notes_and_restrictions\" target=\"_blank\" rel=\"external\">一条重要的限制</a>：</p>\n<ul>\n<li>Music Playlist Container 和 Motion 对象不支持 Seek。</li>\n</ul>\n<p>而 Music Segment 不能控制过渡，只能依赖其父级容器，所以在 Event 中实现过渡的唯一希望就是 Music Switch Container 了。你大概明白了吧？<strong>我们要使用 State 切换来模拟所有的过渡情况，在切换状态之前执行 Seek 动作来直接跳转到过渡点之前的邻近位置，就能达到“直接”播放过渡段的目的。</strong></p>\n<p>State 切换要模拟的情况包括:</p>\n<ol>\n<li>工程自身互动音乐设计中的状态过渡。</li>\n<li>Music Playlist Container 里面的相邻 Music Segment 间过渡。</li>\n<li>Music Segment 单曲循环的首尾衔接。</li>\n</ol>\n<p>看起来好像很复杂，但其实只需要把要做过渡的 Music Segment 提取出来，分别关联一个 State，指派给一个测试用的 Music Switch Container 就可以了。</p>\n<p>下面我们通过一个实例来说明做法。</p>\n<h3 id=\"做法示例\"><a href=\"#做法示例\" class=\"headerlink\" title=\"做法示例\"></a>做法示例</h3><p>我们还是以 Wwise 安装包自带的<code>Sample Project</code>为例来说明 Seek 法的具体操作。简单起见，我们就挑选下图中选中的两个 Music Segment 来举例：</p>\n<!--![](quick-auditioning-music-transitions/sample-segments.png)\n-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-segments.png\">\n<p>这两个 Segment 也是<code>Stealth</code>这个 Music Playlist Container 中顺序播放的相邻对象（见本文第一张图），采用的过渡同步点为 Exit Cue。</p>\n<p><strong>首先，创建一个专用的 Music Switch Container，把<code>Steath_Seg_01</code>和<code>Steath_Seg_02</code>复制到它下面。</strong>见下图：</p>\n<!--![](quick-auditioning-music-transitions/sample-dup-msc.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-dup-msc.png\">\n<p>创建新的 Music Switch Container 是有原因的：在指定 Music Switch Container 的状态路径的时候，路径对应播放对象只能是该 Music Switch Container 的直接子对象，也就是说之前位于<code>Stealth</code>下面的对象如果不挪出来就无法直接关联到 State 上面去；而如果复制到原 Music Switch Container 下面，就又会污染设计。所以比较好的做法是直接创建一个新的 Music Switch Container。</p>\n<p>这个专用容器的过渡规则一般只需要用默认的<code>Any to Any</code>规则就可以，但要注意默认会播放源段的 Post-Exit 和目标段的 Pre-Entry，不启用淡变。当然，你完全可以按需要来定制整条规则。这里我们重点强调 Exit Cue 的情况。</p>\n<p><strong>接着，创建一个新的 State Group，然后为两个 Music Segment 各创建一个 State。</strong>见下图：</p>\n<!--![](quick-auditioning-music-transitions/sample-states.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-states.png\">\n<p><strong>下一步，回到测试专用的 Music Switch Container，设置好状态路径，让上面的 State 和 Music Segment 一一对应。</strong>见下图：</p>\n<!--![](quick-auditioning-music-transitions/sample-paths.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-paths.png\">\n<p><strong>最后，我们创建测试事件</strong>。里面依序包含如下 Action：</p>\n<!--![](quick-auditioning-music-transitions/sample-event.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-event.png\">\n<ul>\n<li>我们让第一个 Set State Action（状态初始化）比 Play Action 稍早一点执行，确保在播放之前状态已经初始化成源状态，播放源 Segment。这里我们把 Play Action 的 Delay 设为<code>0.01</code>， Set State 的 Delay 为 <code>0</code>。</li>\n<li>Seek Action 也比播放略提前，Seek 模式为<code>Seek Percent</code>，位置为<code>90%</code>。你可以视需要修改这个位置。注意：Aaron Brown 在 Wwise 2016.2 中采用 Seek All 这个 Action，Scope 设为 Global，但经测试发现在 Wwise 2017.1 中这个做法无效，要使用 Seek 才行。</li>\n<li>后一个 Set State Action 也就是状态切换的动作比播放稍晚一点，确保不会覆盖第一个 Set State 操作，导致源 Segment 没能播放起来。所以这里的 Delay 设为<code>0.02</code>。</li>\n</ul>\n<p>现在测试一下这个 Event，看是不是能一步到位试听过渡？</p>\n<p>如果要试听一个 Music Segment 单曲循环的首尾衔接，则可以把问题转化为“从这个段落过渡到它自己的副本”，唯一需要改变的就是要复制源 Music Segment，把它作为目标段落即可。</p>\n<p>你可能会问：“我就用同一个 Music Segment，给它关联两个不同的 State 不行吗？”然而 Wwise 中，基于 State/Switch 过渡时前后必须为两个不同的对象，音乐引擎才会启动过渡行为。所以必须给原 Music Segment 做一个副本，才能通过切换 State 来测试自循环过渡。</p>\n<p>为了简单，示例中我们就地在工程已有的 Work Unit 中创建试听用的临时对象和其它元素。这样做还是污染了现有设计的，因为 Work Unit 对应 XML 文件，是 Wwise 工程的设计内容实体。所以比较好的做法是创建测试专用的 Work Unit，这样就不会污染，且很容易一键删除所有测试元素。注意，测试对象只要保证不打到 SoundBank 里就不会影响游戏的实际性能。</p>\n<h3 id=\"进一步讨论\"><a href=\"#进一步讨论\" class=\"headerlink\" title=\"进一步讨论\"></a>进一步讨论</h3><p>为了试听一个小小的过渡，Seek 法看起来并不直观，需要好几步操作，这是它最明显的缺点。但是我们可以看到 Seek 法有独特的优势：</p>\n<ol>\n<li>它可以满足我们的三条需求。</li>\n<li>它不需要人工肉眼对位，也不依赖反应。这点别的工具很难做到。</li>\n<li>设好的 Event、Music Switch Container 和 State 可以作为一套可复用的测试框架保留下来，用同一套框架甚至同一个事件测试各种过渡，只用反复改变事件 Action 列表中的 两个 State 就好。</li>\n<li>整个流程可以通过 Wwise Authoring API（WAAPI）自动化脚本来加速。</li>\n</ol>\n<p>除以上三种方法之外，还可以用 WAAPI 做后端来写一个简单的媒体播放器播放列表界面来达到传统的体验。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文针对很多人提到的“听一下过渡好难”的痛点，总结了一下在不编程或自己写第三方 UI 的情况下，现有能加速试听过渡的方案，希望能给大家一点帮助，权当抛砖引玉，欢迎大家指正和探讨其它可能的技巧和方案。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文探讨的所有问题和解决方案都<strong>基于 Wwise 2017.1.x</strong>。不对后续版本负责。</p>\n<h2 id=\"起因：听一下过渡好难\"><a href=\"#起因：听一下过渡好难\" class=\"headerlink\" title=\"起因：听一下过渡好难\"></a>起因：听一下过渡好难</h2><p>利用 Wwise 的互动音乐功能可以用小段音乐编组搭建出动态和互动的曲式和织体，但搭完了之后你还是得用耳朵试听乐段间的过渡，确保衔接在音乐意义上是无缝的。截至 Wwise 2017.1，不少人在这里遇到了麻烦，见下图：</p>\n<!--![](quick-auditioning-music-transitions/mpe.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/mpe.png\">\n<p>这个例子来自 Wwise 自带的示例工程<code>Sample Project</code>（可以从Wwise Launcher 的<code>SAMPLES</code>页下打开），在 Music Playlist Editor 中，<code>Stealth</code>这个 Music Playlist Container 中有一个 Sequence Continuous 模式的 Music Segment 编组，图中正在试听前两个 Music Segment 间的过渡。这时，由于<code>Stealth</code>采用的过渡规则中，Source 段用了<code>Exit source at Exit Cue</code>这条同步规则，见下图：</p>\n<!--![](quick-auditioning-music-transitions/transition-exit-cue.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/transition-exit-cue.png\">\n<p>Exit Cue 一般靠近曲子尾声，所以你必须把<code>Stealth_Seg_01</code>从头听到 Exit Cue 处才能开始试听和<code>Stealth_Seg_02</code>间的过渡，如果曲子很长，这样就很浪费时间；还有更惨的：当要听的过渡在一个很长的连续列表的中间靠后时，即便同步点是 Next Bar 这样近距离的，每次你还都得从最顶上听起。如下图：</p>\n<!--![](quick-auditioning-music-transitions/mpe-mid-seg.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/mpe-mid-seg.png\">\n<p>要听<code>Seg 02b (B)</code>到下一段的过渡时，你每次都得从<code>Seg 01a (A)</code>听起。上图里还比较仁慈，每个段落都只循环了一次，万一有些会循环有限次，万一播着中间接了个电话，… 你懂的。</p>\n<p>于是你又下意识地跑到 Music Segment Editor 界面中想对着波形迅速定位到过渡点附近听，结果发现一次又只能试听一个 Segment，见下图：</p>\n<!--![](quick-auditioning-music-transitions/mse.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/mse.png\">\n<p>所以还是快不起来。</p>\n<p>在别的情况下，也会有类似问题：</p>\n<ul>\n<li>确认单个 Music Segment 的循环无缝时。</li>\n<li>试听 Music Switch Container 下的状态切换时。</li>\n</ul>\n<p>需要强调的是，麻烦大小和设计有关，短小的 Music Segment 可能几乎感觉不到。</p>\n<p>面对这些情况，<strong>你的需求大概是这么三条</strong>：</p>\n<ol>\n<li>能从播放列表中直接挑出任何一对 Music Segment 来听过渡，不管它们在什么地方。</li>\n<li>能定位到过渡点附近开始听。</li>\n<li>能试听单曲循环的首尾衔接。</li>\n</ol>\n<p>换句话说：如今主流媒体播放器能做到的一些事情。</p>\n<!--![](quick-auditioning-music-transitions/media-player.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/media-player.png\">\n<p>上图中，如果你想听<code>Say</code>和<code>Architect</code>这两首曲子间的过渡（假设有的话），那么只需要鼠标双击<code>Say</code>这首，然后用底部进度条定位到尾部收听即可。如果要测自循环，则只需要把循环模式调到单曲循环就行了（注：Wwise 中由于有同步点的问题，常规的进度条还不够）。</p>\n<p>相比之下，我们发现：<strong>Wwise 虽然提供了搭建非线性音乐结构的一整套工具，但其 UI 的预览功能不支持线性媒体播放器中的列表定点播放体验。</strong> 当然，反过来大多数线性媒体播放器也不支持 Wwise 提供的众多非线性播放功能。</p>\n<p>在 Wwise 在 UI 上做出改进之前，我们暂时还得面对这个问题。</p>\n<p>好消息是，“解决方法“（Hack）还是有的，虽然都不完美！<br>我们来看看到 Wwise 2017.1 版本为止，目前已知的三种方法。我把它们按从直观到抽象排了序。</p>\n<h2 id=\"方法一：手动拼接法\"><a href=\"#方法一：手动拼接法\" class=\"headerlink\" title=\"方法一：手动拼接法\"></a>方法一：手动拼接法</h2><p>看到标题你估计已经有点失望了。没错，这个方法很简单粗暴：通过复制粘贴把想要一起听过渡的几个 Clip 放到 Music Segment Editor 的多轨界面上，手动确保各个 Clip 的 Exit Cue 和 Entry Cue 彼此对齐，最后通过光标直接定位到过渡点附近收听播放。如果要测某一轨的无缝循环，那就把该轨上的内容复制一遍紧贴在自己的尾巴上。</p>\n<p>实际操作中有个麻烦：在 Music Segment Editor 下对齐来自两个 Music Segment 的 Clip 时，只有一个 Segment 的 Exit Cue 和 Entry Cue 能显示出来，另一个的则看不到。所以你可能要另想办法来对齐同步点，比如用 Clip handle 临时裁剪掉看不到 cue 的 Music Segment 的 Pre-Entry 或者 Post-Exit 部分，不然很难肉眼对齐。</p>\n<p>这个方法的优点是：</p>\n<ol>\n<li>概念简单，接近 DAW 里面的操作习惯。</li>\n<li>能通过交互来精确定位到过渡点附近。</li>\n<li>可以试听任何 Music Segment 甚至单个 Clip 的组合。</li>\n</ol>\n<p>但缺点很明显：</p>\n<ol>\n<li>用来拼接 Music Segment 的临时操作会改动 Music Segment，污染了设计本身。事后还得清理现场。虽然可以创建专门的“测试段落”，但就要维护这个多轨测试对象，并不轻松。</li>\n<li>很难快速测试多轨 Music Segment 间的过渡。上面说的 Clip handle 操作对各轨可能都要做一遍。</li>\n<li>手动操作繁琐，对齐容易出错。</li>\n</ol>\n<p>这个方法大约只适合粗略测单轨循环的情况。如果非要走这条路，倒还不如直接在 DAW 里面对素材做这些工作来得简单。</p>\n<h2 id=\"方法二：快进播放法\"><a href=\"#方法二：快进播放法\" class=\"headerlink\" title=\"方法二：快进播放法\"></a>方法二：快进播放法</h2><p>这个是 <a href=\"https://www.audiokinetic.com/courses/wwise201/?source=wwise201&amp;id=configuring_multi_group_playlists_setting_randomized_loop_counts\" target=\"_blank\" rel=\"external\">Wwise 201 认证教程</a> 中推荐的方法，海内外的一些设计师都有这样用的，见下图：</p>\n<!--![](quick-auditioning-music-transitions/playbackspeed.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/playbackspeed.png\">\n<p>将父级容器的播放速度调大，那么播放时过渡涉及的 Music Segment 就能快进到过渡点附近。这时候如果想精听，则可以降回原速，除非你告诉我专业人士的耳朵都是 4 倍速的！</p>\n<p>这个方法的优点是：</p>\n<ol>\n<li>概念简单。</li>\n<li>对设计的污染少。只动一个播放速度参数，用后还是很容易调回来的，因为默认值一般都是 1。</li>\n</ol>\n<p>但是缺点仍然很明显：</p>\n<ol>\n<li>在 Music Playlist Editor 中，依然无法直接收听任意一对 Music Segment 的过渡，只能从头顺序播放。</li>\n<li>这是一种渐进操作，无法一步定位到过渡点附近。</li>\n<li>操作上对反射神经有一定要求 …</li>\n</ol>\n<h2 id=\"方法三：Seek-法\"><a href=\"#方法三：Seek-法\" class=\"headerlink\" title=\"方法三：Seek 法\"></a>方法三：Seek 法</h2><p>这个技巧是海外设计师 Aaron Brown 分享的。基本原理是立足于 Event 及其 Seek（即寻址跳转）这个 Action。跟前两种方法相比，它更能满足本文开始分析的三条需求，但实际操作要绕点路。</p>\n<p>Aaron Brown 的原始分享可以在 Wwise 的非官方 Facebook 群<code>Wwise Wizards &amp; Witches</code>中找到，但是他只给了粗略的示意图，如下图所示：</p>\n<!--![](quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg\">\n<p>但我实操后发现在 Wwise 2017.1 中上面的方法并不能凑效，要修改一些做法。下面详细讲解一下。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>这个方法是希望避免肉眼定位和等待，实现一键定位到音乐的过渡点附近，按照原速收听过渡。</p>\n<p>Wwise 的 Event 中有 Seek 这个 Action 可以定位到播放文件中的指定位置。<strong>前两种方法其实也做了这个定位，只不过是用肉眼和手工操作来确保的：开始试听过渡的播放点必须要在同步点之前。</strong>而针对这点，Seek Action 只需设好跳转位置的数值就可以。并且，它还有服务于互动音乐的<a href=\"https://www2.audiokinetic.com/library/edge/?source=Help&amp;id=event_actions_list#bp1307910\" target=\"_blank\" rel=\"external\">一条诱人的特性</a>：</p>\n<ul>\n<li>Seek Action 的 Seek Percent（按百分比跳转）模式下，跳转是相对于 Entry Cue 和 Exit Cue 进行的。</li>\n</ul>\n<p>打个比方，不管这些 Cue 设定在 Music Segment 的什么位置，即使我们把跳转设在 99% 处（即 Seek Percent 为 99%），它也绝对不会超出 Exit Cue 而误入 Post-Exit 段；对于单曲循环的情况，跳转百分比位置是相对循环区间来算的。有了这个条件，我们就可以放心定义跳转点来一键空降到过渡点附近了。</p>\n<p>不过 Seek Action 还有<a href=\"https://www2.audiokinetic.com/library/edge/?source=Help&amp;id=event_actions_list#seek_seekall_notes_and_restrictions\" target=\"_blank\" rel=\"external\">一条重要的限制</a>：</p>\n<ul>\n<li>Music Playlist Container 和 Motion 对象不支持 Seek。</li>\n</ul>\n<p>而 Music Segment 不能控制过渡，只能依赖其父级容器，所以在 Event 中实现过渡的唯一希望就是 Music Switch Container 了。你大概明白了吧？<strong>我们要使用 State 切换来模拟所有的过渡情况，在切换状态之前执行 Seek 动作来直接跳转到过渡点之前的邻近位置，就能达到“直接”播放过渡段的目的。</strong></p>\n<p>State 切换要模拟的情况包括:</p>\n<ol>\n<li>工程自身互动音乐设计中的状态过渡。</li>\n<li>Music Playlist Container 里面的相邻 Music Segment 间过渡。</li>\n<li>Music Segment 单曲循环的首尾衔接。</li>\n</ol>\n<p>看起来好像很复杂，但其实只需要把要做过渡的 Music Segment 提取出来，分别关联一个 State，指派给一个测试用的 Music Switch Container 就可以了。</p>\n<p>下面我们通过一个实例来说明做法。</p>\n<h3 id=\"做法示例\"><a href=\"#做法示例\" class=\"headerlink\" title=\"做法示例\"></a>做法示例</h3><p>我们还是以 Wwise 安装包自带的<code>Sample Project</code>为例来说明 Seek 法的具体操作。简单起见，我们就挑选下图中选中的两个 Music Segment 来举例：</p>\n<!--![](quick-auditioning-music-transitions/sample-segments.png)\n-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-segments.png\">\n<p>这两个 Segment 也是<code>Stealth</code>这个 Music Playlist Container 中顺序播放的相邻对象（见本文第一张图），采用的过渡同步点为 Exit Cue。</p>\n<p><strong>首先，创建一个专用的 Music Switch Container，把<code>Steath_Seg_01</code>和<code>Steath_Seg_02</code>复制到它下面。</strong>见下图：</p>\n<!--![](quick-auditioning-music-transitions/sample-dup-msc.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-dup-msc.png\">\n<p>创建新的 Music Switch Container 是有原因的：在指定 Music Switch Container 的状态路径的时候，路径对应播放对象只能是该 Music Switch Container 的直接子对象，也就是说之前位于<code>Stealth</code>下面的对象如果不挪出来就无法直接关联到 State 上面去；而如果复制到原 Music Switch Container 下面，就又会污染设计。所以比较好的做法是直接创建一个新的 Music Switch Container。</p>\n<p>这个专用容器的过渡规则一般只需要用默认的<code>Any to Any</code>规则就可以，但要注意默认会播放源段的 Post-Exit 和目标段的 Pre-Entry，不启用淡变。当然，你完全可以按需要来定制整条规则。这里我们重点强调 Exit Cue 的情况。</p>\n<p><strong>接着，创建一个新的 State Group，然后为两个 Music Segment 各创建一个 State。</strong>见下图：</p>\n<!--![](quick-auditioning-music-transitions/sample-states.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-states.png\">\n<p><strong>下一步，回到测试专用的 Music Switch Container，设置好状态路径，让上面的 State 和 Music Segment 一一对应。</strong>见下图：</p>\n<!--![](quick-auditioning-music-transitions/sample-paths.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-paths.png\">\n<p><strong>最后，我们创建测试事件</strong>。里面依序包含如下 Action：</p>\n<!--![](quick-auditioning-music-transitions/sample-event.png)-->\n<img src=\"/2017/10/29/quick-auditioning-music-transitions/sample-event.png\">\n<ul>\n<li>我们让第一个 Set State Action（状态初始化）比 Play Action 稍早一点执行，确保在播放之前状态已经初始化成源状态，播放源 Segment。这里我们把 Play Action 的 Delay 设为<code>0.01</code>， Set State 的 Delay 为 <code>0</code>。</li>\n<li>Seek Action 也比播放略提前，Seek 模式为<code>Seek Percent</code>，位置为<code>90%</code>。你可以视需要修改这个位置。注意：Aaron Brown 在 Wwise 2016.2 中采用 Seek All 这个 Action，Scope 设为 Global，但经测试发现在 Wwise 2017.1 中这个做法无效，要使用 Seek 才行。</li>\n<li>后一个 Set State Action 也就是状态切换的动作比播放稍晚一点，确保不会覆盖第一个 Set State 操作，导致源 Segment 没能播放起来。所以这里的 Delay 设为<code>0.02</code>。</li>\n</ul>\n<p>现在测试一下这个 Event，看是不是能一步到位试听过渡？</p>\n<p>如果要试听一个 Music Segment 单曲循环的首尾衔接，则可以把问题转化为“从这个段落过渡到它自己的副本”，唯一需要改变的就是要复制源 Music Segment，把它作为目标段落即可。</p>\n<p>你可能会问：“我就用同一个 Music Segment，给它关联两个不同的 State 不行吗？”然而 Wwise 中，基于 State/Switch 过渡时前后必须为两个不同的对象，音乐引擎才会启动过渡行为。所以必须给原 Music Segment 做一个副本，才能通过切换 State 来测试自循环过渡。</p>\n<p>为了简单，示例中我们就地在工程已有的 Work Unit 中创建试听用的临时对象和其它元素。这样做还是污染了现有设计的，因为 Work Unit 对应 XML 文件，是 Wwise 工程的设计内容实体。所以比较好的做法是创建测试专用的 Work Unit，这样就不会污染，且很容易一键删除所有测试元素。注意，测试对象只要保证不打到 SoundBank 里就不会影响游戏的实际性能。</p>\n<h3 id=\"进一步讨论\"><a href=\"#进一步讨论\" class=\"headerlink\" title=\"进一步讨论\"></a>进一步讨论</h3><p>为了试听一个小小的过渡，Seek 法看起来并不直观，需要好几步操作，这是它最明显的缺点。但是我们可以看到 Seek 法有独特的优势：</p>\n<ol>\n<li>它可以满足我们的三条需求。</li>\n<li>它不需要人工肉眼对位，也不依赖反应。这点别的工具很难做到。</li>\n<li>设好的 Event、Music Switch Container 和 State 可以作为一套可复用的测试框架保留下来，用同一套框架甚至同一个事件测试各种过渡，只用反复改变事件 Action 列表中的 两个 State 就好。</li>\n<li>整个流程可以通过 Wwise Authoring API（WAAPI）自动化脚本来加速。</li>\n</ol>\n<p>除以上三种方法之外，还可以用 WAAPI 做后端来写一个简单的媒体播放器播放列表界面来达到传统的体验。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文针对很多人提到的“听一下过渡好难”的痛点，总结了一下在不编程或自己写第三方 UI 的情况下，现有能加速试听过渡的方案，希望能给大家一点帮助，权当抛砖引玉，欢迎大家指正和探讨其它可能的技巧和方案。</p>\n"},{"title":"为什么我听不到声音？","date":"2018-02-04T07:31:51.000Z","_content":"\n本文基于以下软件版本：\n\n- Wwise Launcher: 2018.1.24.738\n- Wwise: 2017.1.4.640\n- macOS Sierra 10.12.6 (16G1212) \n\nhello!\n\n","source":"_posts/why-cant-i-hear-my-sound.md","raw":"---\ntitle: 为什么我听不到声音？\ndate: 2018-02-04 15:31:51\ntags: wwise\n---\n\n本文基于以下软件版本：\n\n- Wwise Launcher: 2018.1.24.738\n- Wwise: 2017.1.4.640\n- macOS Sierra 10.12.6 (16G1212) \n\nhello!\n\n","slug":"why-cant-i-hear-my-sound","published":1,"updated":"2019-10-17T09:02:54.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfntj000c0enzddkwjau6","content":"<p>本文基于以下软件版本：</p>\n<ul>\n<li>Wwise Launcher: 2018.1.24.738</li>\n<li>Wwise: 2017.1.4.640</li>\n<li>macOS Sierra 10.12.6 (16G1212) </li>\n</ul>\n<p>hello!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文基于以下软件版本：</p>\n<ul>\n<li>Wwise Launcher: 2018.1.24.738</li>\n<li>Wwise: 2017.1.4.640</li>\n<li>macOS Sierra 10.12.6 (16G1212) </li>\n</ul>\n<p>hello!</p>\n"},{"title":"十条你得知道的 Wwise Launcher 用法（2019 版）","date":"2019-07-08T11:48:59.000Z","_content":"\n注：本文基于 2018 年初在 Audiokinetic 公众号上发表的文章《十一条你可能不知道的 Wwise  Launcher 用法》，由作者针对软件更新做了改动，**不影响操作的截图沿用旧版本**。\n\n本文基于以下环境\n\n- Wwise Launcher: 2019.5.0.905\n- Wwise: 2019.1.0.6947\n- macOS Mojave 10.14.5\n\n从 2016 年起，你在 Audiokinetic 官网点击下载 Wwise 的时候，实际上下载的是 Wwise Launcher（下文简称 Launcher），后来你就习惯用 Launcher 来下载更新 Wwise 了。你还学会了用它管理本机上的多个工程和 Wwise 版本，对吧？但对新手，Launcher 可能还有不明显的功能和注意事项对你会很有用，本文初版一年多后，我们再来梳理一下吧！\n\n\n\n## 1. Wwise Launcher 有权威参考资料吗？\n\n如今我们有了详细的[官方图文文档](https://www.audiokinetic.com/library/edge/?source=InstallGuide&id=the_wwise_launcher)，可从 Launcher 的` ？`页菜单项``Wwise Launcher Documentation`直达，本文中的许多内容已可在文档中找到。不过在本文写作时，文档只有英文版，零星信息尚未与最新软件版本同步，因此下文还会给出必要的向导。英文自信的同学扫读本文即可。\n\n\n\n## 2. 程序员：哪里有 Wwise 集成／整合方面的例程？\n\n我们可以通过 Launcher 来安装 Wwise 的[`IntegrationDemo`](https://www.audiokinetic.com/library/edge/?source=SDK&id=soundengine__integration__samplecode.html)。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到`WWISE`页上我们的目标版本，然后修改安装。\n\n{% asset_img modify-installs.jpg %}\n\n勾选左边选项框中的`SDK (C++)`，和右边的目标平台。\n\n{% asset_img install-sdk-demos.jpg %}\n\n之后点击`Install...`开始安装。安装结束后切换到`SAMPLES`页，选中正确的 Wwise 版本（图中为`2017.1.4`），便可以看到`IntegrationDemo`了。\n\n{% asset_img samples-demos.jpg %}\n\n如果想运行 Demo，则直接点击`Run IntegrationDemo`；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击`Open in Wwise`。\n\n如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，\n\n{% asset_img open-demo-code-projects.jpg %}\n\n通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。\n\n{% asset_img open-demo-code-project-2s.jpg %}\n\n在研究 IntegrationDemo 的时候，推荐对照[`Wwise SDK Help`](https://www.audiokinetic.com/library/edge/?source=SDK&id=index.html)文档来学习，特别是`声音引擎集成纵览`一节。\n\n不论我们的项目用的是自研引擎还是商业引擎，`IntegrationDemo`都是我们学习 Wwise 整合代码最好的帮手。这是因为`IntegrationDemo`是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示。\n\n更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的简化环境经过了反复测试，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题往往会暴露出用户端的使用不当。\n\n\n\n## 2. 我们公司大部分机器在内网，怎么安装 Wwise？\n\n我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：\n\n{% asset_img offline-installers.jpg %}\n\n添加插件为单独步骤，在制作离线包时注意勾选所有需要的插件。\n\n做好的离线包除了组件文件夹`bundle`外，会自带一个配套的 Launcher 安装包：\n\n{% asset_img offline-installer-2s.jpg %}\n\n最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。\n\n{% asset_img offline-installer-3s.jpg %}\n\n注意：Windows 版的 Launcher 只能安装 Windows 版的设计工具，Mac 版类似。\n\n\n\n## 3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\n\n这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，**登录我们的 Audiokinetic 账号**，在`PROJECTS`页找到我们的 Wwise 工程，点击钥匙状按钮，接着我们有两个选择：\n\n1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。\n\n{% asset_img project-licenses.jpg %}\n\n这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。\n\n{% asset_img project-license-2s.jpg %}\n\n2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的`Set Project License`菜单中找到对应的项目授权码并授权项目了，**做授权码导入操作时要确保关闭已经打开的工程**。\n\n{% asset_img project-licenses-2.jpg %}\n\n\n\n## 4. 如何安装 Unity 集成？\n\n假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的`UNITY`页，点开顶部菜单的浏览按钮：\n\n{% asset_img unity-browse-projects.jpg %}\n\n选中目标 Unity 工程并确认后，在`UNITY`页的工程列表里就能看到这个工程了。接下来我们有两个选择：\n\n1）直接从官网下载 Unity 集成并同时安装，\n\n{% asset_img unity-integrates.jpg %}\n\n2）先下载离线安装包，\n\n{% asset_img unity-offline-1s.jpg %}\n\n然后通过 Launcher 手动安装。\n\n{% asset_img unity-offline-2s.jpg %}\n\n注意，无论用哪种方法，安装期间必须**关闭所有打开的 Unity 编辑器**。如果需要定制 Unity 集成，可以在离线安装包中解压出源码包，再[重新编译 Unity 集成](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__building.html)。\n\nUnreal Engine 的安装方法与此类似，在`UNREAL ENGINE`页中完成。\n\n\n\n## 5. 新手怎么学习 Unity 和 Unreal Engine 集成？\n\n学习 Unity 集成有两个选择：\n\n1）通过 Launcher 安装运行 Unity 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=Unity&id=main.html)学习。\n\n{% asset_img unity-demos.jpg %}\n\n2）通过[官方免费的认证课程系列](https://www.audiokinetic.com/learn/certifications/) 中的 Wwise-301 （以及 Wwise-251 中的一部分）学习，对 Wwise 新手而言这一般意味着你要先学习入门课程 Wwise-101，但可能很多过来人都会告诉你，这是值得的，别问我为什么知道 ^_*\n\n学习 Unreal 集成， 我们也有两个选择：\n\n1）通过 Launcher 的`UNREAL ENGINE`页安装运行 Unreal 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=UE4&id=index.html)学习。\n\n{% asset_img unreal-demos.jpg %}\n\n2）通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab\n\n{% asset_img wal-1s.jpg %}\n\n{% asset_img wal-2s.jpg %}\n\n\n\n## 6. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\n\n我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。\n\n{% asset_img offline-doc-1s.jpg %}\n\n之后就可以在`WWISE`页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。\n\n{% asset_img offline-doc-2s.jpg %}\n\n容易忽略的是：Unity 和 Unreal Engine 集成的离线包中自带了离线文档（`.chm` 和`.html`包），解包时不要错过哦～\n\n\n\n## 7.我感觉碰到了一个 Wwise 的 Bug，该怎么上报？\n\n我们可以去`?`页的`About`，点击`Report a Bug...`，接着根据向导提供必要信息确认上传即可，支持上传截图、Wwise 工程 zip 包和普通 zip 包。汇报成功后，你会看到类似下图的截图，别问我怎么知道的 :P\n\n{% asset_img wwise-bug-report.png %}\n\n\n\n## 8. Launcher 在安装中出现错误或者操作失败怎么办？\n\n我们可以去`?`页的`About Wwise Launcher...`，\n\n{% asset_img log-1s.jpg %}\n\n找到 Launcher 的完整日志，\n\n{% asset_img log-2s.jpg %}\n\n然后想办法汇报给 Audiokinetic 的项目技术支持或[社区问答论坛](https://www.audiokinetic.com/qa/)，或者如果你确信是 Bug，参见上一条。\n\n最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。\n\n有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？\n\n首先我们需要根据[Unity 集成版本说明](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__releasenotes.html)来确认要安装的 Wwise 版本对应支持的 Unity 版本。\n\n如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。\n\n\n\n## 9. 向 Wwise 工作人员提技术问题时，怎样让沟通更准确高效？\n\n我们在项目档期紧张时遇到 Wwise 相关的技术问题，常常撒腿就找官方技术支持。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了高效沟通，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。\n\nWindows 版本的 Launcher 整合了 Wwise 中的辅助工具`Wwise Project Zipper`的功能，**支持 Windows 和 macOS**。\n\n{% asset_img zippers.jpg %}\n\n可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。\n\n{% asset_img zipper-2s.jpg %}\n\n之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。\n\n\n\n##  10. 怎样了解 Audiokinetic 的新闻和最新技术？\n\n我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。\n\n{% asset_img home-feedss.jpg %}\n\n首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。\n\n如果要看中文版，现在可以直接点击 Launcher 首页右上角的语言列表切换。\n\n\n\n## 后记\n\n越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。","source":"_posts/你得知道的-Wwise-Launcher.md","raw":"---\ntitle: 十条你得知道的 Wwise Launcher 用法（2019 版）\ndate: 2019-07-08 19:48:59\ntags: wwise, gameaudio\n---\n\n注：本文基于 2018 年初在 Audiokinetic 公众号上发表的文章《十一条你可能不知道的 Wwise  Launcher 用法》，由作者针对软件更新做了改动，**不影响操作的截图沿用旧版本**。\n\n本文基于以下环境\n\n- Wwise Launcher: 2019.5.0.905\n- Wwise: 2019.1.0.6947\n- macOS Mojave 10.14.5\n\n从 2016 年起，你在 Audiokinetic 官网点击下载 Wwise 的时候，实际上下载的是 Wwise Launcher（下文简称 Launcher），后来你就习惯用 Launcher 来下载更新 Wwise 了。你还学会了用它管理本机上的多个工程和 Wwise 版本，对吧？但对新手，Launcher 可能还有不明显的功能和注意事项对你会很有用，本文初版一年多后，我们再来梳理一下吧！\n\n\n\n## 1. Wwise Launcher 有权威参考资料吗？\n\n如今我们有了详细的[官方图文文档](https://www.audiokinetic.com/library/edge/?source=InstallGuide&id=the_wwise_launcher)，可从 Launcher 的` ？`页菜单项``Wwise Launcher Documentation`直达，本文中的许多内容已可在文档中找到。不过在本文写作时，文档只有英文版，零星信息尚未与最新软件版本同步，因此下文还会给出必要的向导。英文自信的同学扫读本文即可。\n\n\n\n## 2. 程序员：哪里有 Wwise 集成／整合方面的例程？\n\n我们可以通过 Launcher 来安装 Wwise 的[`IntegrationDemo`](https://www.audiokinetic.com/library/edge/?source=SDK&id=soundengine__integration__samplecode.html)。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到`WWISE`页上我们的目标版本，然后修改安装。\n\n{% asset_img modify-installs.jpg %}\n\n勾选左边选项框中的`SDK (C++)`，和右边的目标平台。\n\n{% asset_img install-sdk-demos.jpg %}\n\n之后点击`Install...`开始安装。安装结束后切换到`SAMPLES`页，选中正确的 Wwise 版本（图中为`2017.1.4`），便可以看到`IntegrationDemo`了。\n\n{% asset_img samples-demos.jpg %}\n\n如果想运行 Demo，则直接点击`Run IntegrationDemo`；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击`Open in Wwise`。\n\n如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，\n\n{% asset_img open-demo-code-projects.jpg %}\n\n通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。\n\n{% asset_img open-demo-code-project-2s.jpg %}\n\n在研究 IntegrationDemo 的时候，推荐对照[`Wwise SDK Help`](https://www.audiokinetic.com/library/edge/?source=SDK&id=index.html)文档来学习，特别是`声音引擎集成纵览`一节。\n\n不论我们的项目用的是自研引擎还是商业引擎，`IntegrationDemo`都是我们学习 Wwise 整合代码最好的帮手。这是因为`IntegrationDemo`是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示。\n\n更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的简化环境经过了反复测试，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题往往会暴露出用户端的使用不当。\n\n\n\n## 2. 我们公司大部分机器在内网，怎么安装 Wwise？\n\n我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：\n\n{% asset_img offline-installers.jpg %}\n\n添加插件为单独步骤，在制作离线包时注意勾选所有需要的插件。\n\n做好的离线包除了组件文件夹`bundle`外，会自带一个配套的 Launcher 安装包：\n\n{% asset_img offline-installer-2s.jpg %}\n\n最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。\n\n{% asset_img offline-installer-3s.jpg %}\n\n注意：Windows 版的 Launcher 只能安装 Windows 版的设计工具，Mac 版类似。\n\n\n\n## 3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\n\n这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，**登录我们的 Audiokinetic 账号**，在`PROJECTS`页找到我们的 Wwise 工程，点击钥匙状按钮，接着我们有两个选择：\n\n1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。\n\n{% asset_img project-licenses.jpg %}\n\n这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。\n\n{% asset_img project-license-2s.jpg %}\n\n2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的`Set Project License`菜单中找到对应的项目授权码并授权项目了，**做授权码导入操作时要确保关闭已经打开的工程**。\n\n{% asset_img project-licenses-2.jpg %}\n\n\n\n## 4. 如何安装 Unity 集成？\n\n假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的`UNITY`页，点开顶部菜单的浏览按钮：\n\n{% asset_img unity-browse-projects.jpg %}\n\n选中目标 Unity 工程并确认后，在`UNITY`页的工程列表里就能看到这个工程了。接下来我们有两个选择：\n\n1）直接从官网下载 Unity 集成并同时安装，\n\n{% asset_img unity-integrates.jpg %}\n\n2）先下载离线安装包，\n\n{% asset_img unity-offline-1s.jpg %}\n\n然后通过 Launcher 手动安装。\n\n{% asset_img unity-offline-2s.jpg %}\n\n注意，无论用哪种方法，安装期间必须**关闭所有打开的 Unity 编辑器**。如果需要定制 Unity 集成，可以在离线安装包中解压出源码包，再[重新编译 Unity 集成](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__building.html)。\n\nUnreal Engine 的安装方法与此类似，在`UNREAL ENGINE`页中完成。\n\n\n\n## 5. 新手怎么学习 Unity 和 Unreal Engine 集成？\n\n学习 Unity 集成有两个选择：\n\n1）通过 Launcher 安装运行 Unity 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=Unity&id=main.html)学习。\n\n{% asset_img unity-demos.jpg %}\n\n2）通过[官方免费的认证课程系列](https://www.audiokinetic.com/learn/certifications/) 中的 Wwise-301 （以及 Wwise-251 中的一部分）学习，对 Wwise 新手而言这一般意味着你要先学习入门课程 Wwise-101，但可能很多过来人都会告诉你，这是值得的，别问我为什么知道 ^_*\n\n学习 Unreal 集成， 我们也有两个选择：\n\n1）通过 Launcher 的`UNREAL ENGINE`页安装运行 Unreal 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=UE4&id=index.html)学习。\n\n{% asset_img unreal-demos.jpg %}\n\n2）通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab\n\n{% asset_img wal-1s.jpg %}\n\n{% asset_img wal-2s.jpg %}\n\n\n\n## 6. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\n\n我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。\n\n{% asset_img offline-doc-1s.jpg %}\n\n之后就可以在`WWISE`页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。\n\n{% asset_img offline-doc-2s.jpg %}\n\n容易忽略的是：Unity 和 Unreal Engine 集成的离线包中自带了离线文档（`.chm` 和`.html`包），解包时不要错过哦～\n\n\n\n## 7.我感觉碰到了一个 Wwise 的 Bug，该怎么上报？\n\n我们可以去`?`页的`About`，点击`Report a Bug...`，接着根据向导提供必要信息确认上传即可，支持上传截图、Wwise 工程 zip 包和普通 zip 包。汇报成功后，你会看到类似下图的截图，别问我怎么知道的 :P\n\n{% asset_img wwise-bug-report.png %}\n\n\n\n## 8. Launcher 在安装中出现错误或者操作失败怎么办？\n\n我们可以去`?`页的`About Wwise Launcher...`，\n\n{% asset_img log-1s.jpg %}\n\n找到 Launcher 的完整日志，\n\n{% asset_img log-2s.jpg %}\n\n然后想办法汇报给 Audiokinetic 的项目技术支持或[社区问答论坛](https://www.audiokinetic.com/qa/)，或者如果你确信是 Bug，参见上一条。\n\n最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。\n\n有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？\n\n首先我们需要根据[Unity 集成版本说明](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__releasenotes.html)来确认要安装的 Wwise 版本对应支持的 Unity 版本。\n\n如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。\n\n\n\n## 9. 向 Wwise 工作人员提技术问题时，怎样让沟通更准确高效？\n\n我们在项目档期紧张时遇到 Wwise 相关的技术问题，常常撒腿就找官方技术支持。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了高效沟通，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。\n\nWindows 版本的 Launcher 整合了 Wwise 中的辅助工具`Wwise Project Zipper`的功能，**支持 Windows 和 macOS**。\n\n{% asset_img zippers.jpg %}\n\n可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。\n\n{% asset_img zipper-2s.jpg %}\n\n之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。\n\n\n\n##  10. 怎样了解 Audiokinetic 的新闻和最新技术？\n\n我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。\n\n{% asset_img home-feedss.jpg %}\n\n首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。\n\n如果要看中文版，现在可以直接点击 Launcher 首页右上角的语言列表切换。\n\n\n\n## 后记\n\n越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。","slug":"你得知道的-Wwise-Launcher","published":1,"updated":"2019-10-17T09:02:54.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfntm000e0enzw82d2fc5","content":"<p>注：本文基于 2018 年初在 Audiokinetic 公众号上发表的文章《十一条你可能不知道的 Wwise  Launcher 用法》，由作者针对软件更新做了改动，<strong>不影响操作的截图沿用旧版本</strong>。</p>\n<p>本文基于以下环境</p>\n<ul>\n<li>Wwise Launcher: 2019.5.0.905</li>\n<li>Wwise: 2019.1.0.6947</li>\n<li>macOS Mojave 10.14.5</li>\n</ul>\n<p>从 2016 年起，你在 Audiokinetic 官网点击下载 Wwise 的时候，实际上下载的是 Wwise Launcher（下文简称 Launcher），后来你就习惯用 Launcher 来下载更新 Wwise 了。你还学会了用它管理本机上的多个工程和 Wwise 版本，对吧？但对新手，Launcher 可能还有不明显的功能和注意事项对你会很有用，本文初版一年多后，我们再来梳理一下吧！</p>\n<h2 id=\"1-Wwise-Launcher-有权威参考资料吗？\"><a href=\"#1-Wwise-Launcher-有权威参考资料吗？\" class=\"headerlink\" title=\"1. Wwise Launcher 有权威参考资料吗？\"></a>1. Wwise Launcher 有权威参考资料吗？</h2><p>如今我们有了详细的<a href=\"https://www.audiokinetic.com/library/edge/?source=InstallGuide&amp;id=the_wwise_launcher\" target=\"_blank\" rel=\"external\">官方图文文档</a>，可从 Launcher 的<code>？</code>页菜单项<code>`Wwise Launcher Documentation</code>直达，本文中的许多内容已可在文档中找到。不过在本文写作时，文档只有英文版，零星信息尚未与最新软件版本同步，因此下文还会给出必要的向导。英文自信的同学扫读本文即可。</p>\n<h2 id=\"2-程序员：哪里有-Wwise-集成／整合方面的例程？\"><a href=\"#2-程序员：哪里有-Wwise-集成／整合方面的例程？\" class=\"headerlink\" title=\"2. 程序员：哪里有 Wwise 集成／整合方面的例程？\"></a>2. 程序员：哪里有 Wwise 集成／整合方面的例程？</h2><p>我们可以通过 Launcher 来安装 Wwise 的<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=soundengine__integration__samplecode.html\" target=\"_blank\" rel=\"external\"><code>IntegrationDemo</code></a>。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到<code>WWISE</code>页上我们的目标版本，然后修改安装。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/modify-installs.jpg\">\n<p>勾选左边选项框中的<code>SDK (C++)</code>，和右边的目标平台。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/install-sdk-demos.jpg\">\n<p>之后点击<code>Install...</code>开始安装。安装结束后切换到<code>SAMPLES</code>页，选中正确的 Wwise 版本（图中为<code>2017.1.4</code>），便可以看到<code>IntegrationDemo</code>了。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/samples-demos.jpg\">\n<p>如果想运行 Demo，则直接点击<code>Run IntegrationDemo</code>；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击<code>Open in Wwise</code>。</p>\n<p>如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-projects.jpg\">\n<p>通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-project-2s.jpg\">\n<p>在研究 IntegrationDemo 的时候，推荐对照<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=index.html\" target=\"_blank\" rel=\"external\"><code>Wwise SDK Help</code></a>文档来学习，特别是<code>声音引擎集成纵览</code>一节。</p>\n<p>不论我们的项目用的是自研引擎还是商业引擎，<code>IntegrationDemo</code>都是我们学习 Wwise 整合代码最好的帮手。这是因为<code>IntegrationDemo</code>是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示。</p>\n<p>更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的简化环境经过了反复测试，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题往往会暴露出用户端的使用不当。</p>\n<h2 id=\"2-我们公司大部分机器在内网，怎么安装-Wwise？\"><a href=\"#2-我们公司大部分机器在内网，怎么安装-Wwise？\" class=\"headerlink\" title=\"2. 我们公司大部分机器在内网，怎么安装 Wwise？\"></a>2. 我们公司大部分机器在内网，怎么安装 Wwise？</h2><p>我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-installers.jpg\">\n<p>添加插件为单独步骤，在制作离线包时注意勾选所有需要的插件。</p>\n<p>做好的离线包除了组件文件夹<code>bundle</code>外，会自带一个配套的 Launcher 安装包：</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-2s.jpg\">\n<p>最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-3s.jpg\">\n<p>注意：Windows 版的 Launcher 只能安装 Windows 版的设计工具，Mac 版类似。</p>\n<h2 id=\"3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\"><a href=\"#3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\" class=\"headerlink\" title=\"3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\"></a>3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？</h2><p>这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，<strong>登录我们的 Audiokinetic 账号</strong>，在<code>PROJECTS</code>页找到我们的 Wwise 工程，点击钥匙状按钮，接着我们有两个选择：</p>\n<p>1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/project-licenses.jpg\">\n<p>这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/project-license-2s.jpg\">\n<p>2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的<code>Set Project License</code>菜单中找到对应的项目授权码并授权项目了，<strong>做授权码导入操作时要确保关闭已经打开的工程</strong>。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/project-licenses-2.jpg\">\n<h2 id=\"4-如何安装-Unity-集成？\"><a href=\"#4-如何安装-Unity-集成？\" class=\"headerlink\" title=\"4. 如何安装 Unity 集成？\"></a>4. 如何安装 Unity 集成？</h2><p>假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的<code>UNITY</code>页，点开顶部菜单的浏览按钮：</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-browse-projects.jpg\">\n<p>选中目标 Unity 工程并确认后，在<code>UNITY</code>页的工程列表里就能看到这个工程了。接下来我们有两个选择：</p>\n<p>1）直接从官网下载 Unity 集成并同时安装，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-integrates.jpg\">\n<p>2）先下载离线安装包，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-1s.jpg\">\n<p>然后通过 Launcher 手动安装。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-2s.jpg\">\n<p>注意，无论用哪种方法，安装期间必须<strong>关闭所有打开的 Unity 编辑器</strong>。如果需要定制 Unity 集成，可以在离线安装包中解压出源码包，再<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__building.html\" target=\"_blank\" rel=\"external\">重新编译 Unity 集成</a>。</p>\n<p>Unreal Engine 的安装方法与此类似，在<code>UNREAL ENGINE</code>页中完成。</p>\n<h2 id=\"5-新手怎么学习-Unity-和-Unreal-Engine-集成？\"><a href=\"#5-新手怎么学习-Unity-和-Unreal-Engine-集成？\" class=\"headerlink\" title=\"5. 新手怎么学习 Unity 和 Unreal Engine 集成？\"></a>5. 新手怎么学习 Unity 和 Unreal Engine 集成？</h2><p>学习 Unity 集成有两个选择：</p>\n<p>1）通过 Launcher 安装运行 Unity 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=main.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-demos.jpg\">\n<p>2）通过<a href=\"https://www.audiokinetic.com/learn/certifications/\" target=\"_blank\" rel=\"external\">官方免费的认证课程系列</a> 中的 Wwise-301 （以及 Wwise-251 中的一部分）学习，对 Wwise 新手而言这一般意味着你要先学习入门课程 Wwise-101，但可能很多过来人都会告诉你，这是值得的，别问我为什么知道 ^_*</p>\n<p>学习 Unreal 集成， 我们也有两个选择：</p>\n<p>1）通过 Launcher 的<code>UNREAL ENGINE</code>页安装运行 Unreal 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=UE4&amp;id=index.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unreal-demos.jpg\">\n<p>2）通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/wal-1s.jpg\">\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/wal-2s.jpg\">\n<h2 id=\"6-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\"><a href=\"#6-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\" class=\"headerlink\" title=\"6. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\"></a>6. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？</h2><p>我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-1s.jpg\">\n<p>之后就可以在<code>WWISE</code>页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-2s.jpg\">\n<p>容易忽略的是：Unity 和 Unreal Engine 集成的离线包中自带了离线文档（<code>.chm</code> 和<code>.html</code>包），解包时不要错过哦～</p>\n<h2 id=\"7-我感觉碰到了一个-Wwise-的-Bug，该怎么上报？\"><a href=\"#7-我感觉碰到了一个-Wwise-的-Bug，该怎么上报？\" class=\"headerlink\" title=\"7.我感觉碰到了一个 Wwise 的 Bug，该怎么上报？\"></a>7.我感觉碰到了一个 Wwise 的 Bug，该怎么上报？</h2><p>我们可以去<code>?</code>页的<code>About</code>，点击<code>Report a Bug...</code>，接着根据向导提供必要信息确认上传即可，支持上传截图、Wwise 工程 zip 包和普通 zip 包。汇报成功后，你会看到类似下图的截图，别问我怎么知道的 :P</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/wwise-bug-report.png\">\n<h2 id=\"8-Launcher-在安装中出现错误或者操作失败怎么办？\"><a href=\"#8-Launcher-在安装中出现错误或者操作失败怎么办？\" class=\"headerlink\" title=\"8. Launcher 在安装中出现错误或者操作失败怎么办？\"></a>8. Launcher 在安装中出现错误或者操作失败怎么办？</h2><p>我们可以去<code>?</code>页的<code>About Wwise Launcher...</code>，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/log-1s.jpg\">\n<p>找到 Launcher 的完整日志，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/log-2s.jpg\">\n<p>然后想办法汇报给 Audiokinetic 的项目技术支持或<a href=\"https://www.audiokinetic.com/qa/\" target=\"_blank\" rel=\"external\">社区问答论坛</a>，或者如果你确信是 Bug，参见上一条。</p>\n<p>最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。</p>\n<p>有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？</p>\n<p>首先我们需要根据<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__releasenotes.html\" target=\"_blank\" rel=\"external\">Unity 集成版本说明</a>来确认要安装的 Wwise 版本对应支持的 Unity 版本。</p>\n<p>如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。</p>\n<h2 id=\"9-向-Wwise-工作人员提技术问题时，怎样让沟通更准确高效？\"><a href=\"#9-向-Wwise-工作人员提技术问题时，怎样让沟通更准确高效？\" class=\"headerlink\" title=\"9. 向 Wwise 工作人员提技术问题时，怎样让沟通更准确高效？\"></a>9. 向 Wwise 工作人员提技术问题时，怎样让沟通更准确高效？</h2><p>我们在项目档期紧张时遇到 Wwise 相关的技术问题，常常撒腿就找官方技术支持。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了高效沟通，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。</p>\n<p>Windows 版本的 Launcher 整合了 Wwise 中的辅助工具<code>Wwise Project Zipper</code>的功能，<strong>支持 Windows 和 macOS</strong>。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/zippers.jpg\">\n<p>可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/zipper-2s.jpg\">\n<p>之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。</p>\n<h2 id=\"10-怎样了解-Audiokinetic-的新闻和最新技术？\"><a href=\"#10-怎样了解-Audiokinetic-的新闻和最新技术？\" class=\"headerlink\" title=\"10. 怎样了解 Audiokinetic 的新闻和最新技术？\"></a>10. 怎样了解 Audiokinetic 的新闻和最新技术？</h2><p>我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/home-feedss.jpg\">\n<p>首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。</p>\n<p>如果要看中文版，现在可以直接点击 Launcher 首页右上角的语言列表切换。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>注：本文基于 2018 年初在 Audiokinetic 公众号上发表的文章《十一条你可能不知道的 Wwise  Launcher 用法》，由作者针对软件更新做了改动，<strong>不影响操作的截图沿用旧版本</strong>。</p>\n<p>本文基于以下环境</p>\n<ul>\n<li>Wwise Launcher: 2019.5.0.905</li>\n<li>Wwise: 2019.1.0.6947</li>\n<li>macOS Mojave 10.14.5</li>\n</ul>\n<p>从 2016 年起，你在 Audiokinetic 官网点击下载 Wwise 的时候，实际上下载的是 Wwise Launcher（下文简称 Launcher），后来你就习惯用 Launcher 来下载更新 Wwise 了。你还学会了用它管理本机上的多个工程和 Wwise 版本，对吧？但对新手，Launcher 可能还有不明显的功能和注意事项对你会很有用，本文初版一年多后，我们再来梳理一下吧！</p>\n<h2 id=\"1-Wwise-Launcher-有权威参考资料吗？\"><a href=\"#1-Wwise-Launcher-有权威参考资料吗？\" class=\"headerlink\" title=\"1. Wwise Launcher 有权威参考资料吗？\"></a>1. Wwise Launcher 有权威参考资料吗？</h2><p>如今我们有了详细的<a href=\"https://www.audiokinetic.com/library/edge/?source=InstallGuide&amp;id=the_wwise_launcher\" target=\"_blank\" rel=\"external\">官方图文文档</a>，可从 Launcher 的<code>？</code>页菜单项<code>`Wwise Launcher Documentation</code>直达，本文中的许多内容已可在文档中找到。不过在本文写作时，文档只有英文版，零星信息尚未与最新软件版本同步，因此下文还会给出必要的向导。英文自信的同学扫读本文即可。</p>\n<h2 id=\"2-程序员：哪里有-Wwise-集成／整合方面的例程？\"><a href=\"#2-程序员：哪里有-Wwise-集成／整合方面的例程？\" class=\"headerlink\" title=\"2. 程序员：哪里有 Wwise 集成／整合方面的例程？\"></a>2. 程序员：哪里有 Wwise 集成／整合方面的例程？</h2><p>我们可以通过 Launcher 来安装 Wwise 的<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=soundengine__integration__samplecode.html\" target=\"_blank\" rel=\"external\"><code>IntegrationDemo</code></a>。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到<code>WWISE</code>页上我们的目标版本，然后修改安装。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/modify-installs.jpg\">\n<p>勾选左边选项框中的<code>SDK (C++)</code>，和右边的目标平台。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/install-sdk-demos.jpg\">\n<p>之后点击<code>Install...</code>开始安装。安装结束后切换到<code>SAMPLES</code>页，选中正确的 Wwise 版本（图中为<code>2017.1.4</code>），便可以看到<code>IntegrationDemo</code>了。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/samples-demos.jpg\">\n<p>如果想运行 Demo，则直接点击<code>Run IntegrationDemo</code>；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击<code>Open in Wwise</code>。</p>\n<p>如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-projects.jpg\">\n<p>通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/open-demo-code-project-2s.jpg\">\n<p>在研究 IntegrationDemo 的时候，推荐对照<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=index.html\" target=\"_blank\" rel=\"external\"><code>Wwise SDK Help</code></a>文档来学习，特别是<code>声音引擎集成纵览</code>一节。</p>\n<p>不论我们的项目用的是自研引擎还是商业引擎，<code>IntegrationDemo</code>都是我们学习 Wwise 整合代码最好的帮手。这是因为<code>IntegrationDemo</code>是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示。</p>\n<p>更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的简化环境经过了反复测试，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题往往会暴露出用户端的使用不当。</p>\n<h2 id=\"2-我们公司大部分机器在内网，怎么安装-Wwise？\"><a href=\"#2-我们公司大部分机器在内网，怎么安装-Wwise？\" class=\"headerlink\" title=\"2. 我们公司大部分机器在内网，怎么安装 Wwise？\"></a>2. 我们公司大部分机器在内网，怎么安装 Wwise？</h2><p>我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-installers.jpg\">\n<p>添加插件为单独步骤，在制作离线包时注意勾选所有需要的插件。</p>\n<p>做好的离线包除了组件文件夹<code>bundle</code>外，会自带一个配套的 Launcher 安装包：</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-2s.jpg\">\n<p>最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-installer-3s.jpg\">\n<p>注意：Windows 版的 Launcher 只能安装 Windows 版的设计工具，Mac 版类似。</p>\n<h2 id=\"3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\"><a href=\"#3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\" class=\"headerlink\" title=\"3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\"></a>3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？</h2><p>这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，<strong>登录我们的 Audiokinetic 账号</strong>，在<code>PROJECTS</code>页找到我们的 Wwise 工程，点击钥匙状按钮，接着我们有两个选择：</p>\n<p>1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/project-licenses.jpg\">\n<p>这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/project-license-2s.jpg\">\n<p>2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的<code>Set Project License</code>菜单中找到对应的项目授权码并授权项目了，<strong>做授权码导入操作时要确保关闭已经打开的工程</strong>。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/project-licenses-2.jpg\">\n<h2 id=\"4-如何安装-Unity-集成？\"><a href=\"#4-如何安装-Unity-集成？\" class=\"headerlink\" title=\"4. 如何安装 Unity 集成？\"></a>4. 如何安装 Unity 集成？</h2><p>假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的<code>UNITY</code>页，点开顶部菜单的浏览按钮：</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-browse-projects.jpg\">\n<p>选中目标 Unity 工程并确认后，在<code>UNITY</code>页的工程列表里就能看到这个工程了。接下来我们有两个选择：</p>\n<p>1）直接从官网下载 Unity 集成并同时安装，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-integrates.jpg\">\n<p>2）先下载离线安装包，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-1s.jpg\">\n<p>然后通过 Launcher 手动安装。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-offline-2s.jpg\">\n<p>注意，无论用哪种方法，安装期间必须<strong>关闭所有打开的 Unity 编辑器</strong>。如果需要定制 Unity 集成，可以在离线安装包中解压出源码包，再<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__building.html\" target=\"_blank\" rel=\"external\">重新编译 Unity 集成</a>。</p>\n<p>Unreal Engine 的安装方法与此类似，在<code>UNREAL ENGINE</code>页中完成。</p>\n<h2 id=\"5-新手怎么学习-Unity-和-Unreal-Engine-集成？\"><a href=\"#5-新手怎么学习-Unity-和-Unreal-Engine-集成？\" class=\"headerlink\" title=\"5. 新手怎么学习 Unity 和 Unreal Engine 集成？\"></a>5. 新手怎么学习 Unity 和 Unreal Engine 集成？</h2><p>学习 Unity 集成有两个选择：</p>\n<p>1）通过 Launcher 安装运行 Unity 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=main.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unity-demos.jpg\">\n<p>2）通过<a href=\"https://www.audiokinetic.com/learn/certifications/\" target=\"_blank\" rel=\"external\">官方免费的认证课程系列</a> 中的 Wwise-301 （以及 Wwise-251 中的一部分）学习，对 Wwise 新手而言这一般意味着你要先学习入门课程 Wwise-101，但可能很多过来人都会告诉你，这是值得的，别问我为什么知道 ^_*</p>\n<p>学习 Unreal 集成， 我们也有两个选择：</p>\n<p>1）通过 Launcher 的<code>UNREAL ENGINE</code>页安装运行 Unreal 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=UE4&amp;id=index.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/unreal-demos.jpg\">\n<p>2）通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/wal-1s.jpg\">\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/wal-2s.jpg\">\n<h2 id=\"6-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\"><a href=\"#6-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\" class=\"headerlink\" title=\"6. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\"></a>6. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？</h2><p>我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-1s.jpg\">\n<p>之后就可以在<code>WWISE</code>页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/offline-doc-2s.jpg\">\n<p>容易忽略的是：Unity 和 Unreal Engine 集成的离线包中自带了离线文档（<code>.chm</code> 和<code>.html</code>包），解包时不要错过哦～</p>\n<h2 id=\"7-我感觉碰到了一个-Wwise-的-Bug，该怎么上报？\"><a href=\"#7-我感觉碰到了一个-Wwise-的-Bug，该怎么上报？\" class=\"headerlink\" title=\"7.我感觉碰到了一个 Wwise 的 Bug，该怎么上报？\"></a>7.我感觉碰到了一个 Wwise 的 Bug，该怎么上报？</h2><p>我们可以去<code>?</code>页的<code>About</code>，点击<code>Report a Bug...</code>，接着根据向导提供必要信息确认上传即可，支持上传截图、Wwise 工程 zip 包和普通 zip 包。汇报成功后，你会看到类似下图的截图，别问我怎么知道的 :P</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/wwise-bug-report.png\">\n<h2 id=\"8-Launcher-在安装中出现错误或者操作失败怎么办？\"><a href=\"#8-Launcher-在安装中出现错误或者操作失败怎么办？\" class=\"headerlink\" title=\"8. Launcher 在安装中出现错误或者操作失败怎么办？\"></a>8. Launcher 在安装中出现错误或者操作失败怎么办？</h2><p>我们可以去<code>?</code>页的<code>About Wwise Launcher...</code>，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/log-1s.jpg\">\n<p>找到 Launcher 的完整日志，</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/log-2s.jpg\">\n<p>然后想办法汇报给 Audiokinetic 的项目技术支持或<a href=\"https://www.audiokinetic.com/qa/\" target=\"_blank\" rel=\"external\">社区问答论坛</a>，或者如果你确信是 Bug，参见上一条。</p>\n<p>最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。</p>\n<p>有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？</p>\n<p>首先我们需要根据<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__releasenotes.html\" target=\"_blank\" rel=\"external\">Unity 集成版本说明</a>来确认要安装的 Wwise 版本对应支持的 Unity 版本。</p>\n<p>如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。</p>\n<h2 id=\"9-向-Wwise-工作人员提技术问题时，怎样让沟通更准确高效？\"><a href=\"#9-向-Wwise-工作人员提技术问题时，怎样让沟通更准确高效？\" class=\"headerlink\" title=\"9. 向 Wwise 工作人员提技术问题时，怎样让沟通更准确高效？\"></a>9. 向 Wwise 工作人员提技术问题时，怎样让沟通更准确高效？</h2><p>我们在项目档期紧张时遇到 Wwise 相关的技术问题，常常撒腿就找官方技术支持。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了高效沟通，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。</p>\n<p>Windows 版本的 Launcher 整合了 Wwise 中的辅助工具<code>Wwise Project Zipper</code>的功能，<strong>支持 Windows 和 macOS</strong>。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/zippers.jpg\">\n<p>可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/zipper-2s.jpg\">\n<p>之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。</p>\n<h2 id=\"10-怎样了解-Audiokinetic-的新闻和最新技术？\"><a href=\"#10-怎样了解-Audiokinetic-的新闻和最新技术？\" class=\"headerlink\" title=\"10. 怎样了解 Audiokinetic 的新闻和最新技术？\"></a>10. 怎样了解 Audiokinetic 的新闻和最新技术？</h2><p>我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。</p>\n<img src=\"/2019/07/08/你得知道的-Wwise-Launcher/home-feedss.jpg\">\n<p>首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。</p>\n<p>如果要看中文版，现在可以直接点击 Launcher 首页右上角的语言列表切换。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。</p>\n"},{"title":"十条你可能不知道的 Wwise Launcher 用法","date":"2018-01-04T12:05:02.000Z","_content":"\n本文基于以下软件版本：\n\n- Wwise Launcher: 2017.11.30.720\n- Wwise: 2017.1.4.6407\n- macOS Sierra 10.12.6 (16G1114)\n\n从 2016 年起，在 Audiokinetic 官网点击下载 Wwise 的时候，你实际上下载的是 Wwise Launcher（下文简称 Launcher），到现在你应该已经习惯用 Launcher 来下载更新 Wwise 本身甚至管理本机上的多个工程和 Wwise 版本了，但 Launcher 可能还有一些不太明显的功能和注意事项对你会很有用，我们今天就来梳理一下吧！\n\n\n## 1. 程序员：哪里有 Wwise 集成／整合方面的例程？\n\n---\n\n我们可以通过 Launcher 来安装 Wwise 的[`IntegrationDemo`](https://www.audiokinetic.com/library/edge/?source=SDK&id=soundengine__integration__samplecode.html)。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到`WWISE`页上我们的目标版本，然后修改安装。\n\n{% asset_img modify-installs.jpg %}\n\n勾选左边选项框中的`SDK (C++)`，和右边的目标平台。\n\n{% asset_img install-sdk-demos.jpg %}\n\n之后点击`Install...`开始安装。安装结束后切换到`SAMPLES`页，选中正确的 Wwise 版本（图中为`2017.1.4`），便可以看到`IntegrationDemo`了。\n\n{% asset_img samples-demos.jpg %}\n\n如果想运行 Demo，则直接点击`Run IntegrationDemo`；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击`Open in Wwise`。\n\n如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，\n\n{% asset_img open-demo-code-projects.jpg %}\n\n通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。\n\n{% asset_img open-demo-code-project-2s.jpg %}\n\n在研究 IntegrationDemo 的时候，推荐对照[`Wwise SDK Help`](https://www.audiokinetic.com/library/edge/?source=SDK&id=index.html)文档来学习，特别是`声音引擎集成纵览`一节。\n\n因为`IntegrationDemo`是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示，所以不论我们的项目用的是自研引擎还是商业引擎比如 Unity／Cocos2d-x，`IntegrationDemo`都是我们学习 Wwise 整合代码最好的帮手。\n\n更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的是高度简化和反复测试过的环境，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题最终往往会证明来自应用端的使用不当。\n\n\n## 2. 我们公司大部分机器在内网，怎么安装 Wwise？\n\n---\n\n我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：\n\n{% asset_img offline-installers.jpg %}\n\n做好的离线包除了组件文件夹`bundle`外，会自带一个配套的 Launcher 安装包：\n\n{% asset_img offline-installer-2s.jpg %}\n\n最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。\n\n{% asset_img offline-installer-3s.jpg %}\n\n\n## 3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\n\n---\n\n这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，**登录我们的 Audiokinetic 账号**，在`PROJECTS`页找到我们的 Wwise 工程，点击钥匙状按钮，这时我们有两个选择：1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。\n\n{% asset_img project-licenses.jpg %}\n\n这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。\n\n{% asset_img project-license-2s.jpg %}\n\n2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的`Set Project License`菜单中找到对应的项目授权码并授权项目了，**做授权码导入操作时要确保关闭已经打开的工程**。\n\n{% asset_img project-licenses-2.jpg %}\n\n\n## 4. 如何安装 Unity 集成？\n\n---\n\n假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的`UNITY`页，点开顶部菜单的浏览按钮：\n\n{% asset_img unity-browse-projects.jpg %}\n\n选中目标 Unity 工程并确认后，在`UNITY`页的工程列表里就能看到这个工程了。接下来我们有两个选择：1）直接从官网下载 Unity 集成并同时安装，\n\n{% asset_img unity-integrates.jpg %}\n\n或者 2）先下载离线安装包，\n\n{% asset_img unity-offline-1s.jpg %}\n\n然后通过 Launcher 手动安装。\n\n{% asset_img unity-offline-2s.jpg %}\n\n注意，无论用哪种方法，安装期间必须**关闭所有打开的 Unity 编辑器**。\n\n\n## 5. 新手怎么学习 Wwise Unity 和 Unreal Engine 集成？\n\n---\n\n学习 Unity 集成可以通过 Launcher 安装运行 Unity 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=Unity&id=main.html)学习。\n\n{% asset_img unity-demos.jpg %}\n\n\n学习 Unreal 集成， 我们有两个选择：1）可以通过 Launcher 的`UNREAL ENGINE`页安装运行 Unreal 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=UE4&id=index.html)学习。\n\n{% asset_img unreal-demos.jpg %}\n\n2）也可以通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab\n\n{% asset_img wal-1s.jpg %}\n\n{% asset_img wal-2s.jpg %}\n\n\n## 6. 我需要根据特定 Wwise SDK 库版本来重新编译 Wwise Unity 集成，怎么办？\n\n---\n\n有时候我们等不及官方 Unity 集成补丁，而想基于某个已经下载好的原生 SDK 补丁库来重新构建 Unity 集成， 这时我们需要的是 Unity 集成的源码包，可以在 Launcher 的`UNITY`页下载离线安装包来取得（见`4. 如何安装 Unity 集成？`）。\n\n离线包的格式为 .tar.xz，一般我们需要通过 Launcher 安装集成来解出源码包来。如果想手动解包，则需要安装可以解压`XZ`和`TAR`格式的程序。比如在 macOS 上，我们可以通过[Homebrew](https://brew.sh)来安装`xz`这个包，之后即可通过命令行`xz -d` 来解包了。源码包的文件一般以`_Src.zip`结尾。\n\n重新编译 Unity 集成的方法见[官方文档](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__building.html)。\n\n\n## 7. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\n\n---\n\n我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。\n\n{% asset_img offline-doc-1s.jpg %}\n\n之后就可以在`WWISE`页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。\n\n{% asset_img offline-doc-2s.jpg %}\n\n\n## 8. Launcher 在安装中出现错误或者操作失败怎么办？\n\n---\n\n我们可以去`?`页的`About`，\n\n{% asset_img log-1s.jpg %}\n\n找到 Launcher 的完整日志，\n\n{% asset_img log-2s.jpg %}\n\n然后想办法汇报给 Audiokinetic 的项目技术支持或[社区问答论坛](https://www.audiokinetic.com/qa/)。\n\n最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。\n\n有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？\n\n首先我们需要根据[Unity 集成版本说明](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__releasenotes.html)来确认要安装的 Wwise 版本对应支持的 Unity 版本。\n\n如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。\n\n\n## 9. 提出技术支持问题时，怎样让沟通更准确高效？\n\n---\n\n我们在项目档期紧张时遇到 Wwise 相关的技术问题，首先想到的是请求官方技术支持支援。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了提高沟通效率，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。\n\nWindows 版本的 Launcher 整合了 Wwise 中的辅助工具`Wwise Project Zipper`的功能（macOS 版暂时没有此功能），\n\n{% asset_img zippers.jpg %}\n\n可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。\n\n{% asset_img zipper-2s.jpg %}\n\n之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。\n\n\n## 10. 怎样了解 Audiokinetic 的新闻和最新技术？\n\n---\n\n我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。\n\n{% asset_img home-feedss.jpg %}\n\n首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。\n\n如果要看中文版，目前可以先点击 Launcher 首页任何链接来到 Audiokinetic 官网，然后切换语言为简体中文。\n\n\n\n## 后记\n\n---\n\n越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。\n","source":"_posts/你所不知道的-Wwise-Launcher.md","raw":"---\ntitle: 十条你可能不知道的 Wwise Launcher 用法\ndate: 2018-01-04 20:05:02\ntags: wwise\n---\n\n本文基于以下软件版本：\n\n- Wwise Launcher: 2017.11.30.720\n- Wwise: 2017.1.4.6407\n- macOS Sierra 10.12.6 (16G1114)\n\n从 2016 年起，在 Audiokinetic 官网点击下载 Wwise 的时候，你实际上下载的是 Wwise Launcher（下文简称 Launcher），到现在你应该已经习惯用 Launcher 来下载更新 Wwise 本身甚至管理本机上的多个工程和 Wwise 版本了，但 Launcher 可能还有一些不太明显的功能和注意事项对你会很有用，我们今天就来梳理一下吧！\n\n\n## 1. 程序员：哪里有 Wwise 集成／整合方面的例程？\n\n---\n\n我们可以通过 Launcher 来安装 Wwise 的[`IntegrationDemo`](https://www.audiokinetic.com/library/edge/?source=SDK&id=soundengine__integration__samplecode.html)。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到`WWISE`页上我们的目标版本，然后修改安装。\n\n{% asset_img modify-installs.jpg %}\n\n勾选左边选项框中的`SDK (C++)`，和右边的目标平台。\n\n{% asset_img install-sdk-demos.jpg %}\n\n之后点击`Install...`开始安装。安装结束后切换到`SAMPLES`页，选中正确的 Wwise 版本（图中为`2017.1.4`），便可以看到`IntegrationDemo`了。\n\n{% asset_img samples-demos.jpg %}\n\n如果想运行 Demo，则直接点击`Run IntegrationDemo`；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击`Open in Wwise`。\n\n如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，\n\n{% asset_img open-demo-code-projects.jpg %}\n\n通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。\n\n{% asset_img open-demo-code-project-2s.jpg %}\n\n在研究 IntegrationDemo 的时候，推荐对照[`Wwise SDK Help`](https://www.audiokinetic.com/library/edge/?source=SDK&id=index.html)文档来学习，特别是`声音引擎集成纵览`一节。\n\n因为`IntegrationDemo`是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示，所以不论我们的项目用的是自研引擎还是商业引擎比如 Unity／Cocos2d-x，`IntegrationDemo`都是我们学习 Wwise 整合代码最好的帮手。\n\n更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的是高度简化和反复测试过的环境，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题最终往往会证明来自应用端的使用不当。\n\n\n## 2. 我们公司大部分机器在内网，怎么安装 Wwise？\n\n---\n\n我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：\n\n{% asset_img offline-installers.jpg %}\n\n做好的离线包除了组件文件夹`bundle`外，会自带一个配套的 Launcher 安装包：\n\n{% asset_img offline-installer-2s.jpg %}\n\n最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。\n\n{% asset_img offline-installer-3s.jpg %}\n\n\n## 3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\n\n---\n\n这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，**登录我们的 Audiokinetic 账号**，在`PROJECTS`页找到我们的 Wwise 工程，点击钥匙状按钮，这时我们有两个选择：1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。\n\n{% asset_img project-licenses.jpg %}\n\n这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。\n\n{% asset_img project-license-2s.jpg %}\n\n2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的`Set Project License`菜单中找到对应的项目授权码并授权项目了，**做授权码导入操作时要确保关闭已经打开的工程**。\n\n{% asset_img project-licenses-2.jpg %}\n\n\n## 4. 如何安装 Unity 集成？\n\n---\n\n假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的`UNITY`页，点开顶部菜单的浏览按钮：\n\n{% asset_img unity-browse-projects.jpg %}\n\n选中目标 Unity 工程并确认后，在`UNITY`页的工程列表里就能看到这个工程了。接下来我们有两个选择：1）直接从官网下载 Unity 集成并同时安装，\n\n{% asset_img unity-integrates.jpg %}\n\n或者 2）先下载离线安装包，\n\n{% asset_img unity-offline-1s.jpg %}\n\n然后通过 Launcher 手动安装。\n\n{% asset_img unity-offline-2s.jpg %}\n\n注意，无论用哪种方法，安装期间必须**关闭所有打开的 Unity 编辑器**。\n\n\n## 5. 新手怎么学习 Wwise Unity 和 Unreal Engine 集成？\n\n---\n\n学习 Unity 集成可以通过 Launcher 安装运行 Unity 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=Unity&id=main.html)学习。\n\n{% asset_img unity-demos.jpg %}\n\n\n学习 Unreal 集成， 我们有两个选择：1）可以通过 Launcher 的`UNREAL ENGINE`页安装运行 Unreal 集成示例，再对照[官方文档](https://www.audiokinetic.com/library/edge/?source=UE4&id=index.html)学习。\n\n{% asset_img unreal-demos.jpg %}\n\n2）也可以通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab\n\n{% asset_img wal-1s.jpg %}\n\n{% asset_img wal-2s.jpg %}\n\n\n## 6. 我需要根据特定 Wwise SDK 库版本来重新编译 Wwise Unity 集成，怎么办？\n\n---\n\n有时候我们等不及官方 Unity 集成补丁，而想基于某个已经下载好的原生 SDK 补丁库来重新构建 Unity 集成， 这时我们需要的是 Unity 集成的源码包，可以在 Launcher 的`UNITY`页下载离线安装包来取得（见`4. 如何安装 Unity 集成？`）。\n\n离线包的格式为 .tar.xz，一般我们需要通过 Launcher 安装集成来解出源码包来。如果想手动解包，则需要安装可以解压`XZ`和`TAR`格式的程序。比如在 macOS 上，我们可以通过[Homebrew](https://brew.sh)来安装`xz`这个包，之后即可通过命令行`xz -d` 来解包了。源码包的文件一般以`_Src.zip`结尾。\n\n重新编译 Unity 集成的方法见[官方文档](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__building.html)。\n\n\n## 7. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\n\n---\n\n我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。\n\n{% asset_img offline-doc-1s.jpg %}\n\n之后就可以在`WWISE`页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。\n\n{% asset_img offline-doc-2s.jpg %}\n\n\n## 8. Launcher 在安装中出现错误或者操作失败怎么办？\n\n---\n\n我们可以去`?`页的`About`，\n\n{% asset_img log-1s.jpg %}\n\n找到 Launcher 的完整日志，\n\n{% asset_img log-2s.jpg %}\n\n然后想办法汇报给 Audiokinetic 的项目技术支持或[社区问答论坛](https://www.audiokinetic.com/qa/)。\n\n最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。\n\n有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？\n\n首先我们需要根据[Unity 集成版本说明](https://www.audiokinetic.com/library/edge/?source=Unity&id=pg__releasenotes.html)来确认要安装的 Wwise 版本对应支持的 Unity 版本。\n\n如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。\n\n\n## 9. 提出技术支持问题时，怎样让沟通更准确高效？\n\n---\n\n我们在项目档期紧张时遇到 Wwise 相关的技术问题，首先想到的是请求官方技术支持支援。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了提高沟通效率，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。\n\nWindows 版本的 Launcher 整合了 Wwise 中的辅助工具`Wwise Project Zipper`的功能（macOS 版暂时没有此功能），\n\n{% asset_img zippers.jpg %}\n\n可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。\n\n{% asset_img zipper-2s.jpg %}\n\n之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。\n\n\n## 10. 怎样了解 Audiokinetic 的新闻和最新技术？\n\n---\n\n我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。\n\n{% asset_img home-feedss.jpg %}\n\n首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。\n\n如果要看中文版，目前可以先点击 Launcher 首页任何链接来到 Audiokinetic 官网，然后切换语言为简体中文。\n\n\n\n## 后记\n\n---\n\n越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。\n","slug":"你所不知道的-Wwise-Launcher","published":1,"updated":"2019-10-17T09:02:54.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck1uhfntp000i0enzzkc18fnl","content":"<p>本文基于以下软件版本：</p>\n<ul>\n<li>Wwise Launcher: 2017.11.30.720</li>\n<li>Wwise: 2017.1.4.6407</li>\n<li>macOS Sierra 10.12.6 (16G1114)</li>\n</ul>\n<p>从 2016 年起，在 Audiokinetic 官网点击下载 Wwise 的时候，你实际上下载的是 Wwise Launcher（下文简称 Launcher），到现在你应该已经习惯用 Launcher 来下载更新 Wwise 本身甚至管理本机上的多个工程和 Wwise 版本了，但 Launcher 可能还有一些不太明显的功能和注意事项对你会很有用，我们今天就来梳理一下吧！</p>\n<h2 id=\"1-程序员：哪里有-Wwise-集成／整合方面的例程？\"><a href=\"#1-程序员：哪里有-Wwise-集成／整合方面的例程？\" class=\"headerlink\" title=\"1. 程序员：哪里有 Wwise 集成／整合方面的例程？\"></a>1. 程序员：哪里有 Wwise 集成／整合方面的例程？</h2><hr>\n<p>我们可以通过 Launcher 来安装 Wwise 的<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=soundengine__integration__samplecode.html\" target=\"_blank\" rel=\"external\"><code>IntegrationDemo</code></a>。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到<code>WWISE</code>页上我们的目标版本，然后修改安装。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/modify-installs.jpg\">\n<p>勾选左边选项框中的<code>SDK (C++)</code>，和右边的目标平台。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/install-sdk-demos.jpg\">\n<p>之后点击<code>Install...</code>开始安装。安装结束后切换到<code>SAMPLES</code>页，选中正确的 Wwise 版本（图中为<code>2017.1.4</code>），便可以看到<code>IntegrationDemo</code>了。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/samples-demos.jpg\">\n<p>如果想运行 Demo，则直接点击<code>Run IntegrationDemo</code>；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击<code>Open in Wwise</code>。</p>\n<p>如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-projects.jpg\">\n<p>通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-project-2s.jpg\">\n<p>在研究 IntegrationDemo 的时候，推荐对照<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=index.html\" target=\"_blank\" rel=\"external\"><code>Wwise SDK Help</code></a>文档来学习，特别是<code>声音引擎集成纵览</code>一节。</p>\n<p>因为<code>IntegrationDemo</code>是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示，所以不论我们的项目用的是自研引擎还是商业引擎比如 Unity／Cocos2d-x，<code>IntegrationDemo</code>都是我们学习 Wwise 整合代码最好的帮手。</p>\n<p>更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的是高度简化和反复测试过的环境，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题最终往往会证明来自应用端的使用不当。</p>\n<h2 id=\"2-我们公司大部分机器在内网，怎么安装-Wwise？\"><a href=\"#2-我们公司大部分机器在内网，怎么安装-Wwise？\" class=\"headerlink\" title=\"2. 我们公司大部分机器在内网，怎么安装 Wwise？\"></a>2. 我们公司大部分机器在内网，怎么安装 Wwise？</h2><hr>\n<p>我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-installers.jpg\">\n<p>做好的离线包除了组件文件夹<code>bundle</code>外，会自带一个配套的 Launcher 安装包：</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-2s.jpg\">\n<p>最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-3s.jpg\">\n<h2 id=\"3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\"><a href=\"#3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\" class=\"headerlink\" title=\"3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\"></a>3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？</h2><hr>\n<p>这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，<strong>登录我们的 Audiokinetic 账号</strong>，在<code>PROJECTS</code>页找到我们的 Wwise 工程，点击钥匙状按钮，这时我们有两个选择：1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/project-licenses.jpg\">\n<p>这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/project-license-2s.jpg\">\n<p>2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的<code>Set Project License</code>菜单中找到对应的项目授权码并授权项目了，<strong>做授权码导入操作时要确保关闭已经打开的工程</strong>。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/project-licenses-2.jpg\">\n<h2 id=\"4-如何安装-Unity-集成？\"><a href=\"#4-如何安装-Unity-集成？\" class=\"headerlink\" title=\"4. 如何安装 Unity 集成？\"></a>4. 如何安装 Unity 集成？</h2><hr>\n<p>假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的<code>UNITY</code>页，点开顶部菜单的浏览按钮：</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-browse-projects.jpg\">\n<p>选中目标 Unity 工程并确认后，在<code>UNITY</code>页的工程列表里就能看到这个工程了。接下来我们有两个选择：1）直接从官网下载 Unity 集成并同时安装，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-integrates.jpg\">\n<p>或者 2）先下载离线安装包，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-1s.jpg\">\n<p>然后通过 Launcher 手动安装。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-2s.jpg\">\n<p>注意，无论用哪种方法，安装期间必须<strong>关闭所有打开的 Unity 编辑器</strong>。</p>\n<h2 id=\"5-新手怎么学习-Wwise-Unity-和-Unreal-Engine-集成？\"><a href=\"#5-新手怎么学习-Wwise-Unity-和-Unreal-Engine-集成？\" class=\"headerlink\" title=\"5. 新手怎么学习 Wwise Unity 和 Unreal Engine 集成？\"></a>5. 新手怎么学习 Wwise Unity 和 Unreal Engine 集成？</h2><hr>\n<p>学习 Unity 集成可以通过 Launcher 安装运行 Unity 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=main.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-demos.jpg\">\n<p>学习 Unreal 集成， 我们有两个选择：1）可以通过 Launcher 的<code>UNREAL ENGINE</code>页安装运行 Unreal 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=UE4&amp;id=index.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unreal-demos.jpg\">\n<p>2）也可以通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/wal-1s.jpg\">\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/wal-2s.jpg\">\n<h2 id=\"6-我需要根据特定-Wwise-SDK-库版本来重新编译-Wwise-Unity-集成，怎么办？\"><a href=\"#6-我需要根据特定-Wwise-SDK-库版本来重新编译-Wwise-Unity-集成，怎么办？\" class=\"headerlink\" title=\"6. 我需要根据特定 Wwise SDK 库版本来重新编译 Wwise Unity 集成，怎么办？\"></a>6. 我需要根据特定 Wwise SDK 库版本来重新编译 Wwise Unity 集成，怎么办？</h2><hr>\n<p>有时候我们等不及官方 Unity 集成补丁，而想基于某个已经下载好的原生 SDK 补丁库来重新构建 Unity 集成， 这时我们需要的是 Unity 集成的源码包，可以在 Launcher 的<code>UNITY</code>页下载离线安装包来取得（见<code>4. 如何安装 Unity 集成？</code>）。</p>\n<p>离线包的格式为 .tar.xz，一般我们需要通过 Launcher 安装集成来解出源码包来。如果想手动解包，则需要安装可以解压<code>XZ</code>和<code>TAR</code>格式的程序。比如在 macOS 上，我们可以通过<a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">Homebrew</a>来安装<code>xz</code>这个包，之后即可通过命令行<code>xz -d</code> 来解包了。源码包的文件一般以<code>_Src.zip</code>结尾。</p>\n<p>重新编译 Unity 集成的方法见<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__building.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"7-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\"><a href=\"#7-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\" class=\"headerlink\" title=\"7. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\"></a>7. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？</h2><hr>\n<p>我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-1s.jpg\">\n<p>之后就可以在<code>WWISE</code>页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-2s.jpg\">\n<h2 id=\"8-Launcher-在安装中出现错误或者操作失败怎么办？\"><a href=\"#8-Launcher-在安装中出现错误或者操作失败怎么办？\" class=\"headerlink\" title=\"8. Launcher 在安装中出现错误或者操作失败怎么办？\"></a>8. Launcher 在安装中出现错误或者操作失败怎么办？</h2><hr>\n<p>我们可以去<code>?</code>页的<code>About</code>，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/log-1s.jpg\">\n<p>找到 Launcher 的完整日志，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/log-2s.jpg\">\n<p>然后想办法汇报给 Audiokinetic 的项目技术支持或<a href=\"https://www.audiokinetic.com/qa/\" target=\"_blank\" rel=\"external\">社区问答论坛</a>。</p>\n<p>最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。</p>\n<p>有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？</p>\n<p>首先我们需要根据<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__releasenotes.html\" target=\"_blank\" rel=\"external\">Unity 集成版本说明</a>来确认要安装的 Wwise 版本对应支持的 Unity 版本。</p>\n<p>如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。</p>\n<h2 id=\"9-提出技术支持问题时，怎样让沟通更准确高效？\"><a href=\"#9-提出技术支持问题时，怎样让沟通更准确高效？\" class=\"headerlink\" title=\"9. 提出技术支持问题时，怎样让沟通更准确高效？\"></a>9. 提出技术支持问题时，怎样让沟通更准确高效？</h2><hr>\n<p>我们在项目档期紧张时遇到 Wwise 相关的技术问题，首先想到的是请求官方技术支持支援。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了提高沟通效率，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。</p>\n<p>Windows 版本的 Launcher 整合了 Wwise 中的辅助工具<code>Wwise Project Zipper</code>的功能（macOS 版暂时没有此功能），</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/zippers.jpg\">\n<p>可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/zipper-2s.jpg\">\n<p>之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。</p>\n<h2 id=\"10-怎样了解-Audiokinetic-的新闻和最新技术？\"><a href=\"#10-怎样了解-Audiokinetic-的新闻和最新技术？\" class=\"headerlink\" title=\"10. 怎样了解 Audiokinetic 的新闻和最新技术？\"></a>10. 怎样了解 Audiokinetic 的新闻和最新技术？</h2><hr>\n<p>我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/home-feedss.jpg\">\n<p>首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。</p>\n<p>如果要看中文版，目前可以先点击 Launcher 首页任何链接来到 Audiokinetic 官网，然后切换语言为简体中文。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><hr>\n<p>越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文基于以下软件版本：</p>\n<ul>\n<li>Wwise Launcher: 2017.11.30.720</li>\n<li>Wwise: 2017.1.4.6407</li>\n<li>macOS Sierra 10.12.6 (16G1114)</li>\n</ul>\n<p>从 2016 年起，在 Audiokinetic 官网点击下载 Wwise 的时候，你实际上下载的是 Wwise Launcher（下文简称 Launcher），到现在你应该已经习惯用 Launcher 来下载更新 Wwise 本身甚至管理本机上的多个工程和 Wwise 版本了，但 Launcher 可能还有一些不太明显的功能和注意事项对你会很有用，我们今天就来梳理一下吧！</p>\n<h2 id=\"1-程序员：哪里有-Wwise-集成／整合方面的例程？\"><a href=\"#1-程序员：哪里有-Wwise-集成／整合方面的例程？\" class=\"headerlink\" title=\"1. 程序员：哪里有 Wwise 集成／整合方面的例程？\"></a>1. 程序员：哪里有 Wwise 集成／整合方面的例程？</h2><hr>\n<p>我们可以通过 Launcher 来安装 Wwise 的<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=soundengine__integration__samplecode.html\" target=\"_blank\" rel=\"external\"><code>IntegrationDemo</code></a>。如果我们已经安装了 Wwise，但是没有找到这个 Demo，则需要打开 Launcher，找到<code>WWISE</code>页上我们的目标版本，然后修改安装。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/modify-installs.jpg\">\n<p>勾选左边选项框中的<code>SDK (C++)</code>，和右边的目标平台。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/install-sdk-demos.jpg\">\n<p>之后点击<code>Install...</code>开始安装。安装结束后切换到<code>SAMPLES</code>页，选中正确的 Wwise 版本（图中为<code>2017.1.4</code>），便可以看到<code>IntegrationDemo</code>了。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/samples-demos.jpg\">\n<p>如果想运行 Demo，则直接点击<code>Run IntegrationDemo</code>；如果想打开对应的 Wwise 工程检查或修改声音设计内容，那么点击<code>Open in Wwise</code>。</p>\n<p>如果想打开源码工程，则点击左边按钮的下拉菜单，之后打开 Demo 所在文件夹，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-projects.jpg\">\n<p>通过文件系统打开对应平台的子文件夹，找到并打开 IDE 工程文件。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/open-demo-code-project-2s.jpg\">\n<p>在研究 IntegrationDemo 的时候，推荐对照<a href=\"https://www.audiokinetic.com/library/edge/?source=SDK&amp;id=index.html\" target=\"_blank\" rel=\"external\"><code>Wwise SDK Help</code></a>文档来学习，特别是<code>声音引擎集成纵览</code>一节。</p>\n<p>因为<code>IntegrationDemo</code>是 Wwise SDK 的一部分，Audiokinetic 会持续维护测试这组例程和对应的 Wwise 工程；每当有重要的新功能时，该 Demo 中一般会加入新功能演示，所以不论我们的项目用的是自研引擎还是商业引擎比如 Unity／Cocos2d-x，<code>IntegrationDemo</code>都是我们学习 Wwise 整合代码最好的帮手。</p>\n<p>更重要的是，假如我们的项目出现了奇怪的问题，开始怀疑是不是 Wwise 的 bug 时，可以首先尝试用 IntegrationDemo 来对照重现问题，Demo 提供的是高度简化和反复测试过的环境，有助于隔离发现应用端的整合问题。Demo 中重现不了的问题最终往往会证明来自应用端的使用不当。</p>\n<h2 id=\"2-我们公司大部分机器在内网，怎么安装-Wwise？\"><a href=\"#2-我们公司大部分机器在内网，怎么安装-Wwise？\" class=\"headerlink\" title=\"2. 我们公司大部分机器在内网，怎么安装 Wwise？\"></a>2. 我们公司大部分机器在内网，怎么安装 Wwise？</h2><hr>\n<p>我们可以用某台外网机安装需要的 Wwise 组件，然后通过 Launcher 制作离线安装包给内网机使用：</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-installers.jpg\">\n<p>做好的离线包除了组件文件夹<code>bundle</code>外，会自带一个配套的 Launcher 安装包：</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-2s.jpg\">\n<p>最后将离线安装包发送到各台内网机上，在内网机上分别装好包里自带的 Launcher，再打开 Launcher 定位到离线包来安装。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-installer-3s.jpg\">\n<h2 id=\"3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\"><a href=\"#3-我下载安装了-Wwise，但是我的工程在生成-SoundBank-时报错，说最多只能使用-200-个声音文件，怎么办？\" class=\"headerlink\" title=\"3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？\"></a>3. 我下载安装了 Wwise，但是我的工程在生成 SoundBank 时报错，说最多只能使用 200 个声音文件，怎么办？</h2><hr>\n<p>这说明我们的工程没有添加合适的 Wwise 授权码。我们需要打开 Launcher，<strong>登录我们的 Audiokinetic 账号</strong>，在<code>PROJECTS</code>页找到我们的 Wwise 工程，点击钥匙状按钮，这时我们有两个选择：1）注册新项目，并等待 Audiokinetic 商务联系人批准项目注册并接收系统邮件取得授权码。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/project-licenses.jpg\">\n<p>这时我们会来到官网项目注册页面，需要根据向导填好所有信息并提交申请。之后如果确信申请通过了但没有收到系统邮件，则最好检查一下垃圾邮箱。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/project-license-2s.jpg\">\n<p>2）如果我们的项目确定已经注册了，只是没有导入授权码，则需要注意：每个 Wwise 项目在 Audiokinetic 官网上都有若干管理员（Wwise Project Leader)，他们一般是我们自己项目团队的成员。可以联系管理员把我们的 Audiokinetic 账号加入该项目，之后便可以在 Launcher 里工程的<code>Set Project License</code>菜单中找到对应的项目授权码并授权项目了，<strong>做授权码导入操作时要确保关闭已经打开的工程</strong>。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/project-licenses-2.jpg\">\n<h2 id=\"4-如何安装-Unity-集成？\"><a href=\"#4-如何安装-Unity-集成？\" class=\"headerlink\" title=\"4. 如何安装 Unity 集成？\"></a>4. 如何安装 Unity 集成？</h2><hr>\n<p>假设我们的电脑上已经装了 Unity，并且创建了 Unity 工程，而我们现在想给其中某个 Unity 工程安装 Wwise 集成。这时我们需要来到 Launcher 的<code>UNITY</code>页，点开顶部菜单的浏览按钮：</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-browse-projects.jpg\">\n<p>选中目标 Unity 工程并确认后，在<code>UNITY</code>页的工程列表里就能看到这个工程了。接下来我们有两个选择：1）直接从官网下载 Unity 集成并同时安装，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-integrates.jpg\">\n<p>或者 2）先下载离线安装包，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-1s.jpg\">\n<p>然后通过 Launcher 手动安装。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-offline-2s.jpg\">\n<p>注意，无论用哪种方法，安装期间必须<strong>关闭所有打开的 Unity 编辑器</strong>。</p>\n<h2 id=\"5-新手怎么学习-Wwise-Unity-和-Unreal-Engine-集成？\"><a href=\"#5-新手怎么学习-Wwise-Unity-和-Unreal-Engine-集成？\" class=\"headerlink\" title=\"5. 新手怎么学习 Wwise Unity 和 Unreal Engine 集成？\"></a>5. 新手怎么学习 Wwise Unity 和 Unreal Engine 集成？</h2><hr>\n<p>学习 Unity 集成可以通过 Launcher 安装运行 Unity 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=main.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unity-demos.jpg\">\n<p>学习 Unreal 集成， 我们有两个选择：1）可以通过 Launcher 的<code>UNREAL ENGINE</code>页安装运行 Unreal 集成示例，再对照<a href=\"https://www.audiokinetic.com/library/edge/?source=UE4&amp;id=index.html\" target=\"_blank\" rel=\"external\">官方文档</a>学习。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/unreal-demos.jpg\">\n<p>2）也可以通过 Launcher 安装运行 Wwise 的空间音频 Demo：Wwise Audio Lab</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/wal-1s.jpg\">\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/wal-2s.jpg\">\n<h2 id=\"6-我需要根据特定-Wwise-SDK-库版本来重新编译-Wwise-Unity-集成，怎么办？\"><a href=\"#6-我需要根据特定-Wwise-SDK-库版本来重新编译-Wwise-Unity-集成，怎么办？\" class=\"headerlink\" title=\"6. 我需要根据特定 Wwise SDK 库版本来重新编译 Wwise Unity 集成，怎么办？\"></a>6. 我需要根据特定 Wwise SDK 库版本来重新编译 Wwise Unity 集成，怎么办？</h2><hr>\n<p>有时候我们等不及官方 Unity 集成补丁，而想基于某个已经下载好的原生 SDK 补丁库来重新构建 Unity 集成， 这时我们需要的是 Unity 集成的源码包，可以在 Launcher 的<code>UNITY</code>页下载离线安装包来取得（见<code>4. 如何安装 Unity 集成？</code>）。</p>\n<p>离线包的格式为 .tar.xz，一般我们需要通过 Launcher 安装集成来解出源码包来。如果想手动解包，则需要安装可以解压<code>XZ</code>和<code>TAR</code>格式的程序。比如在 macOS 上，我们可以通过<a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">Homebrew</a>来安装<code>xz</code>这个包，之后即可通过命令行<code>xz -d</code> 来解包了。源码包的文件一般以<code>_Src.zip</code>结尾。</p>\n<p>重新编译 Unity 集成的方法见<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__building.html\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"7-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\"><a href=\"#7-我网速慢，看在线文档不方便，如何在本地查看-Wwise-的音频设计和程序整合文档？\" class=\"headerlink\" title=\"7. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？\"></a>7. 我网速慢，看在线文档不方便，如何在本地查看 Wwise 的音频设计和程序整合文档？</h2><hr>\n<p>我们可以通过 Launcher 安装离线文档，注意要选择想要的平台。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-1s.jpg\">\n<p>之后就可以在<code>WWISE</code>页的对应 Wwise 版本下找到各个平台对应的多语言离线文档了。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/offline-doc-2s.jpg\">\n<h2 id=\"8-Launcher-在安装中出现错误或者操作失败怎么办？\"><a href=\"#8-Launcher-在安装中出现错误或者操作失败怎么办？\" class=\"headerlink\" title=\"8. Launcher 在安装中出现错误或者操作失败怎么办？\"></a>8. Launcher 在安装中出现错误或者操作失败怎么办？</h2><hr>\n<p>我们可以去<code>?</code>页的<code>About</code>，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/log-1s.jpg\">\n<p>找到 Launcher 的完整日志，</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/log-2s.jpg\">\n<p>然后想办法汇报给 Audiokinetic 的项目技术支持或<a href=\"https://www.audiokinetic.com/qa/\" target=\"_blank\" rel=\"external\">社区问答论坛</a>。</p>\n<p>最常见的问题是网络问题，出这类问题的时候如果开了 VPN，则可以尝试关闭了 VPN 再使用 Launcher。</p>\n<p>有一类特殊问题是通过 Launcher 安装和升级 Unity 集成的时候失败了，这时怎么办呢？</p>\n<p>首先我们需要根据<a href=\"https://www.audiokinetic.com/library/edge/?source=Unity&amp;id=pg__releasenotes.html\" target=\"_blank\" rel=\"external\">Unity 集成版本说明</a>来确认要安装的 Wwise 版本对应支持的 Unity 版本。</p>\n<p>如果版本都是对的，则需要打开 Unity 编辑器观察控制台里的错误信息。Wwise Unity 集成安装时需要运行 Unity 程序来做一些初始化或者升级工作，这个过程中 Unity 工程内部可能错误，但这些错误并不会在 Launcher 界面上显示出来，要在 Unity 编辑器中查看。</p>\n<h2 id=\"9-提出技术支持问题时，怎样让沟通更准确高效？\"><a href=\"#9-提出技术支持问题时，怎样让沟通更准确高效？\" class=\"headerlink\" title=\"9. 提出技术支持问题时，怎样让沟通更准确高效？\"></a>9. 提出技术支持问题时，怎样让沟通更准确高效？</h2><hr>\n<p>我们在项目档期紧张时遇到 Wwise 相关的技术问题，首先想到的是请求官方技术支持支援。但是巧妇难为无米之炊，没有客观详实的诊断信息，支持人员也只能来回提问试探，沟通效率可能会不理想。为了提高沟通效率，我们可以善用 Wwise 的 Profiler（性能分析器）来记录问题过程，利用 Launcher 来制作诊断包，在提问时将诊断包发送给官方技术支持。</p>\n<p>Windows 版本的 Launcher 整合了 Wwise 中的辅助工具<code>Wwise Project Zipper</code>的功能（macOS 版暂时没有此功能），</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/zippers.jpg\">\n<p>可以将 Wwise 工程及性能分析器日志记录 （profiler session）定制内容后打包。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/zipper-2s.jpg\">\n<p>之后便可以前往官网项目的技术支持频道将 zip 包作为附件发送给 Audiokinetic 的技术支持了。这样的做法通常可以为我们省去好几轮前期沟通。</p>\n<h2 id=\"10-怎样了解-Audiokinetic-的新闻和最新技术？\"><a href=\"#10-怎样了解-Audiokinetic-的新闻和最新技术？\" class=\"headerlink\" title=\"10. 怎样了解 Audiokinetic 的新闻和最新技术？\"></a>10. 怎样了解 Audiokinetic 的新闻和最新技术？</h2><hr>\n<p>我们打开 Launcher 的首页，便可以看到最新的 Audiokinetic 的英文版新闻和技术博客。</p>\n<img src=\"/2018/01/04/你所不知道的-Wwise-Launcher/home-feedss.jpg\">\n<p>首页上还有社区问答论坛的最新提问，可以从中学习其他用户的经验。</p>\n<p>如果要看中文版，目前可以先点击 Launcher 首页任何链接来到 Audiokinetic 官网，然后切换语言为简体中文。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><hr>\n<p>越来越多的集成开发环境包括 Unity 和 Unreal Engine 利用独立于编辑器的 Launcher（启动器）作为控制中心程序来管理工程和资源。这样做，一来可以方便用户管理多个引擎版本和工程，避免和操作系统文件管理器中铺天盖地的文件夹和文件类型缠斗，甚至发生零散文件操作引起的意外；二来可以整合引擎开发商提供的一系列服务。在 Wwise 工作流程中，Wwise Launcher 正在扮演类似的角色，并且还在成长中。</p>\n"}],"PostAsset":[{"_id":"source/_posts/quick-auditioning-music-transitions/mse.png","slug":"mse.png","post":"ck1uhfnth000a0enzmbalgwmv","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/install-sdk-demo.png","slug":"install-sdk-demo.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-3.png","slug":"offline-installer-3.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer.png","slug":"offline-installer.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-project.png","slug":"open-demo-code-project.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-license.png","slug":"project-license.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/samples-demo.png","slug":"samples-demo.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-browse-project.png","slug":"unity-browse-project.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-integrate.png","slug":"unity-integrate.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-2.png","slug":"unity-offline-2.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/home-feedss.jpg","slug":"home-feedss.jpg","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/install-sdk-demo.png","slug":"install-sdk-demo.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-1.png","slug":"offline-doc-1.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer.png","slug":"offline-installer.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-project.png","slug":"open-demo-code-project.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-license.png","slug":"project-license.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/samples-demo.png","slug":"samples-demo.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-browse-project.png","slug":"unity-browse-project.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-integrate.png","slug":"unity-integrate.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-1.png","slug":"unity-offline-1.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-2.png","slug":"unity-offline-2.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-demo.png","slug":"unity-demo.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-1.png","slug":"unity-offline-1.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unreal-demo.png","slug":"unreal-demo.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unreal-demo.png","slug":"unreal-demo.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/GDC17-Audio-Spatial-Audio-2/sa-wwise-wal.jpg","slug":"sa-wwise-wal.jpg","post":"ck1uhfnt900020enzzqslyzhk","modified":1,"renderable":0},{"_id":"source/_posts/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-game-integration.jpg","post":"ck1uhfntb00040enzdkwnzv82","slug":"sa-triton-game-integration.jpg","modified":1,"renderable":1},{"_id":"source/_posts/GDC17-音频见闻（1）-空间音频-Spatial-Audio/sa-triton-uncanny-valley.jpg","post":"ck1uhfntb00040enzdkwnzv82","slug":"sa-triton-uncanny-valley.jpg","modified":1,"renderable":1},{"_id":"source/_posts/migs-2016/migs16-01.jpg","slug":"migs16-01.jpg","post":"ck1uhfntd00060enzg9bb841c","modified":1,"renderable":0},{"_id":"source/_posts/migs-2016/migs16-02.jpg","slug":"migs16-02.jpg","post":"ck1uhfntd00060enzg9bb841c","modified":1,"renderable":0},{"_id":"source/_posts/migs-2016/migs16-03.jpg","slug":"migs16-03.jpg","post":"ck1uhfntd00060enzg9bb841c","modified":1,"renderable":0},{"_id":"source/_posts/migs-2016/migs16-04.JPG","slug":"migs16-04.JPG","post":"ck1uhfntd00060enzg9bb841c","modified":1,"renderable":0},{"_id":"source/_posts/migs-2016/migs16-05.JPG","slug":"migs16-05.JPG","post":"ck1uhfntd00060enzg9bb841c","modified":1,"renderable":0},{"_id":"source/_posts/migs-2016/migs16-06.png","slug":"migs16-06.png","post":"ck1uhfntd00060enzg9bb841c","modified":1,"renderable":0},{"_id":"source/_posts/quick-auditioning-music-transitions/media-player.png","slug":"media-player.png","post":"ck1uhfnth000a0enzmbalgwmv","modified":1,"renderable":0},{"_id":"source/_posts/quick-auditioning-music-transitions/mpe-mid-seg.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"mpe-mid-seg.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/mpe.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"mpe.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/playbackspeed.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"playbackspeed.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-dup-msc.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"sample-dup-msc.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-event.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"sample-event.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-paths.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"sample-paths.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-segments.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"sample-segments.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/sample-states.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"sample-states.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/transition-exit-cue.png","post":"ck1uhfnth000a0enzmbalgwmv","slug":"transition-exit-cue.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-auditioning-music-transitions/wwise-tips-audition-transitions.jpg","post":"ck1uhfnth000a0enzmbalgwmv","slug":"wwise-tips-audition-transitions.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/home-feedss.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"home-feedss.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-2.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-doc-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-demo.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unity-demo.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/home-feeds.png","slug":"home-feeds.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/install-sdk-demos.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"install-sdk-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-1.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"log-1.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-1s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"log-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-2.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"log-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/log-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"log-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/modify-install.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"modify-install.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/modify-installs.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"modify-installs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-1s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-doc-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-2.png","slug":"offline-doc-2.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-doc-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-doc-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-2.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-installer-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-installer-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-3.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-installer-3.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installer-3s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-installer-3s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/offline-installers.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"offline-installers.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-project-2.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"open-demo-code-project-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-project-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"open-demo-code-project-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/open-demo-code-projects.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"open-demo-code-projects.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-license-2.png","slug":"project-license-2.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-license-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"project-license-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-licenses-2.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"project-licenses-2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/project-licenses.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"project-licenses.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/samples-demos.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"samples-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-browse-projects.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unity-browse-projects.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-demos.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unity-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-integrates.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unity-integrates.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-1s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unity-offline-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unity-offline-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unity-offline-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/unreal-demos.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"unreal-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-1.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"wal-1.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-1s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"wal-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-2.png","slug":"wal-2.png","post":"ck1uhfntp000i0enzzkc18fnl","modified":1,"renderable":0},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/wal-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"wal-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zipper-2.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"zipper-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zipper-2s.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"zipper-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zipper.png","post":"ck1uhfntp000i0enzzkc18fnl","slug":"zipper.png","modified":1,"renderable":1},{"_id":"source/_posts/你所不知道的-Wwise-Launcher/zippers.jpg","post":"ck1uhfntp000i0enzzkc18fnl","slug":"zippers.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/home-feeds.png","slug":"home-feeds.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/install-sdk-demos.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"install-sdk-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/launcher-doc.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"launcher-doc.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-1.png","slug":"log-1.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-1s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"log-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-2.png","slug":"log-2.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/log-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"log-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/modify-install.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"modify-install.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/modify-installs.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"modify-installs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-1.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-doc-1.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-1s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-doc-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-doc-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-doc-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-2.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-installer-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-installer-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installer-3s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-installer-3s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/offline-installers.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"offline-installers.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-project-2.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"open-demo-code-project-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-project-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"open-demo-code-project-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/open-demo-code-projects.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"open-demo-code-projects.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-license-2.png","slug":"project-license-2.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-license-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"project-license-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-licenses-2.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"project-licenses-2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/project-licenses.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"project-licenses.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/samples-demos.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"samples-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-browse-projects.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"unity-browse-projects.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-demos.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"unity-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-integrates.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"unity-integrates.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-1s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"unity-offline-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unity-offline-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"unity-offline-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/unreal-demos.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"unreal-demos.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-1.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"wal-1.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-1s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"wal-1s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-2.png","slug":"wal-2.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wal-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"wal-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/wwise-bug-report.png","slug":"wwise-bug-report.png","post":"ck1uhfntm000e0enzw82d2fc5","modified":1,"renderable":0},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zipper-2.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"zipper-2.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zipper-2s.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"zipper-2s.jpg","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zipper.png","post":"ck1uhfntm000e0enzw82d2fc5","slug":"zipper.png","modified":1,"renderable":1},{"_id":"source/_posts/你得知道的-Wwise-Launcher/zippers.jpg","post":"ck1uhfntm000e0enzw82d2fc5","slug":"zippers.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck1uhfnt900020enzzqslyzhk","category_id":"ck1uhfntd00050enzwdutmsu4","_id":"ck1uhfntn000g0enzbfa1gn0b"},{"post_id":"ck1uhfnth000a0enzmbalgwmv","category_id":"ck1uhfntd00050enzwdutmsu4","_id":"ck1uhfntq000j0enz0f8ii0zh"},{"post_id":"ck1uhfntb00040enzdkwnzv82","category_id":"ck1uhfntd00050enzwdutmsu4","_id":"ck1uhfntq000m0enz5rd03wc6"},{"post_id":"ck1uhfntd00060enzg9bb841c","category_id":"ck1uhfntd00050enzwdutmsu4","_id":"ck1uhfntr000p0enzpgou6cko"},{"post_id":"ck1uhfntf00070enzy1f5h92o","category_id":"ck1uhfntq000l0enz3voqkk6v","_id":"ck1uhfnts000r0enz898ros0q"}],"PostTag":[{"post_id":"ck1uhfnt500000enz6q7mg5gi","tag_id":"ck1uhfnta00030enzwiqujlkj","_id":"ck1uhfnth00090enzo49qrfrf"},{"post_id":"ck1uhfnt900020enzzqslyzhk","tag_id":"ck1uhfntg00080enzhxrk7mqi","_id":"ck1uhfntn000h0enz0p0i5uwc"},{"post_id":"ck1uhfntb00040enzdkwnzv82","tag_id":"ck1uhfntg00080enzhxrk7mqi","_id":"ck1uhfntq000n0enzdq8eljgf"},{"post_id":"ck1uhfntd00060enzg9bb841c","tag_id":"ck1uhfntq000k0enzwvuasbq9","_id":"ck1uhfnts000v0enz8mjaa4d4"},{"post_id":"ck1uhfntd00060enzg9bb841c","tag_id":"ck1uhfntr000o0enzg8ficam4","_id":"ck1uhfnts000w0enzy8dvtusm"},{"post_id":"ck1uhfntd00060enzg9bb841c","tag_id":"ck1uhfntr000q0enz94k08z2m","_id":"ck1uhfntt000y0enzerd55j3k"},{"post_id":"ck1uhfntd00060enzg9bb841c","tag_id":"ck1uhfnts000s0enzn71fxlbl","_id":"ck1uhfntt000z0enzbmlic8m6"},{"post_id":"ck1uhfntd00060enzg9bb841c","tag_id":"ck1uhfnts000t0enzclspnhyj","_id":"ck1uhfntt00110enzjguphlhy"},{"post_id":"ck1uhfntf00070enzy1f5h92o","tag_id":"ck1uhfnts000u0enzrgjhylmr","_id":"ck1uhfntt00120enz8wa7jutx"},{"post_id":"ck1uhfnth000a0enzmbalgwmv","tag_id":"ck1uhfntt000x0enzypfj5x13","_id":"ck1uhfntu00140enz3s86cq8j"},{"post_id":"ck1uhfntj000c0enzddkwjau6","tag_id":"ck1uhfntr000o0enzg8ficam4","_id":"ck1uhfntu00150enzhc1oax9h"},{"post_id":"ck1uhfntm000e0enzw82d2fc5","tag_id":"ck1uhfntt00130enzkcwtomnw","_id":"ck1uhfntu00170enzexljesl9"},{"post_id":"ck1uhfntp000i0enzzkc18fnl","tag_id":"ck1uhfntr000o0enzg8ficam4","_id":"ck1uhfntu00180enzq4wzjsp2"}],"Tag":[{"name":"build, iOS","_id":"ck1uhfnta00030enzwiqujlkj"},{"name":"conference, gdc17, reverb, obstruction-occlusion, spatialaudio","_id":"ck1uhfntg00080enzhxrk7mqi"},{"name":"conference","_id":"ck1uhfntq000k0enzwvuasbq9"},{"name":"wwise","_id":"ck1uhfntr000o0enzg8ficam4"},{"name":"proceduralaudio","_id":"ck1uhfntr000q0enz94k08z2m"},{"name":"reverb","_id":"ck1uhfnts000s0enzn71fxlbl"},{"name":"machinelearning","_id":"ck1uhfnts000t0enzclspnhyj"},{"name":"github","_id":"ck1uhfnts000u0enzrgjhylmr"},{"name":"wwise, interactivemusic","_id":"ck1uhfntt000x0enzypfj5x13"},{"name":"wwise, gameaudio","_id":"ck1uhfntt00130enzkcwtomnw"}]}}