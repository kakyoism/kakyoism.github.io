<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kakyo Learns</title>
  <subtitle>学无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kakyoism.github.io/"/>
  <updated>2017-01-09T04:33:51.000Z</updated>
  <id>http://kakyoism.github.io/</id>
  
  <author>
    <name>Kakyo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>补记 MIGS 2016 上的演讲见闻</title>
    <link href="http://kakyoism.github.io/2017/01/08/%E8%A1%A5%E8%AE%B0-MIGS-2016-%E4%B8%8A%E7%9A%84%E6%BC%94%E8%AE%B2%E8%A7%81%E9%97%BB/"/>
    <id>http://kakyoism.github.io/2017/01/08/补记-MIGS-2016-上的演讲见闻/</id>
    <published>2017-01-08T21:17:00.000Z</published>
    <updated>2017-01-09T04:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>一年一度的<a href="http://www.migs16.com/en/" target="_blank" rel="external">蒙特利尔国际游戏峰会 MIGS 2016版</a>过去一阵子了，MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还是有些有用的技术演讲，在此追记一下自己去过那几场的要点，主要是音频专场。</p>
<p><img src="images/migs16-01.jpg" alt=""></p>
<h2 id="Leonard-Paul-“PROCEDURAL-GAME-AUDIO-WITH-PURE-DATA”"><a href="#Leonard-Paul-“PROCEDURAL-GAME-AUDIO-WITH-PURE-DATA”" class="headerlink" title="Leonard Paul “PROCEDURAL GAME AUDIO WITH PURE DATA”"></a><a href="http://www.migs16.com/en/events/procedural-game-audio-with-pure-data/" target="_blank" rel="external">Leonard Paul “PROCEDURAL GAME AUDIO WITH PURE DATA”</a></h2><p><img src="images/migs16-02.jpg" alt=""></p>
<p><a href="http://www.migs16.com/en/leonard-j-paul-2/" target="_blank" rel="external">Leonard Paul</a> 是一位独立游戏音频设计师和教师，他开的 <a href="http://school.videogameaudio.com/apply/" target="_blank" rel="external">School of Video Game Audio</a> 也小有名气。这次的演讲中他以 <a href="https://unity3d.com/learn/tutorials/projects/tanks-tutorial" target="_blank" rel="external">Unity 示例游戏</a>作为蓝本介绍了用 Pure Data（PD）实现 procedural audio（下称 PA）音频设计一些可能性。会后他还发布了这次演讲的<a href="https://t.co/7ay9kxzhOV" target="_blank" rel="external">幻灯</a>和<a href="https://t.co/7s0o9Xhoiy" target="_blank" rel="external">录音</a>。</p>
<p>在这个例子中 Leonard 展示了几个 PD patch。通过自己设计的 OSC（Open Sound Control）消息让这些 patch 和 Unity 端 C# 实现的OSC 模块通信，实现了一条音频原型迭代的管线：在 PD 中创建和修改设计，通过 OSC 来实现游戏运行中试听和调整混音等。演示的声音大多采用简单的加法／减法／模态（Modal）合成方法，坦克碰撞声采用了 <a href="https://en.wikipedia.org/wiki/Karplus–Strong_string_synthesis" target="_blank" rel="external">Karplus-Strong</a> 算法。</p>
<p>关于 PD 生态的现状，Leonard 说 <a href="https://github.com/libpd/libpd" target="_blank" rel="external">libpd</a> 的性能还达不到游戏要求的实时性，但 <a href="https://enzienaudio.com" target="_blank" rel="external">Enzien Audio</a> 的 Heavy 系统的性能很有希望。目前 Heavy 支持大部分 PD 的对象，只有极少数关键对象比如 <a href="http://yadegari.org/expr/expr.html" target="_blank" rel="external">expr～</a> 不支持。</p>
<p>不过 Leonard 也表示使用 PA 有一些注意事项：</p>
<ul>
<li>不应该为 PA 而 PA。从审美上不是所有的游戏都适合 PA，演讲采用的坦克游戏碰巧是美式动漫风，所以适合用常用的合成技术表现；</li>
<li>用 PA 做声音只是音频设计流程中的一方面，走这条路还需要自己实现通信协议、混音器、voice 控制，性能优化这些操作；</li>
<li>同一个功能可能有不同品质和性能代价的算法实现，可以考虑根据实时性能的波动在不同算法实现中切换以达到最优性价比；</li>
<li>Heavy 这样的 PA 系统性能虽有进步，但仍然有不稳定而崩溃的现象；</li>
<li>在大型项目中还是应以中间件为出发点。</li>
</ul>
<p><strong>感想：</strong>利用创意编程工具实现 PA 目前还是一个技术性很强的领域，Leonard 自我介绍时强调自己的编程背景并已经有 20 多年使用 Max（90 年代初还没有 MSP）和 PD 的经验也侧面佐证了这一点。</p>
<h2 id="RJ-Mattingly-“MAKING-THE-SHARPEST-GAME-AUDIO-TOOLS-IN-THE-SHED”"><a href="#RJ-Mattingly-“MAKING-THE-SHARPEST-GAME-AUDIO-TOOLS-IN-THE-SHED”" class="headerlink" title="RJ Mattingly “MAKING THE SHARPEST GAME AUDIO TOOLS IN THE SHED”"></a><a href="http://www.migs16.com/en/events/making-the-sharpest/" target="_blank" rel="external">RJ Mattingly “MAKING THE SHARPEST GAME AUDIO TOOLS IN THE SHED”</a></h2><p><img src="images/migs16-03.jpg" alt=""></p>
<p><a href="http://www.migs16.com/en/rj-mattingly-2/" target="_blank" rel="external">RJ Mattingly</a> 是 PopCap 的技术声音设计师。PopCap 现在全面采用 Unity + Wwise 的音频开发流程，在演讲中他介绍了为优化 PopCap 内部工作流程写的一些小脚本工具，基本都用 Python 语言实现。</p>
<h3 id="SoundBank-管线工具"><a href="#SoundBank-管线工具" class="headerlink" title="SoundBank 管线工具"></a>SoundBank 管线工具</h3><p>PopCap 的 SoundBank 处理管线见上图。</p>
<p>他们早期基于 Perforce 的流程中声音设计师不但提交 Wwise 工程文件，还提交 SoundBnak。这样一来因为 SoundBank 是团队共享的，所以容易出现冲突。RJ 的第一个显而易见的改进便是规定设计师不提交 SoundBank（设计产物），而只提交代表设计本身的工程文件，并在 <a href="https://jenkins.io" target="_blank" rel="external">Jenkins</a> 管线中通过脚本使用 Wwise 自带的命令行工具生成唯一一份 SoundBank，既解决了冲突问题还省了空间。</p>
<p>在生成 SoundBank 前忘了向 SoundBank 中添加必要的文件或者多个 SoundBank 中有重复的音频源文件是常见的人为错误，但数据量大起来有时出错几个礼拜之后才会发现。RJ 因此利用 Wwise 中 SoundBank 生成的后处理 post-generation step 写了一个脚本来分析 Wwise 自动生成的日志，找到与缺少和重复文件相关的信息，并自动群发邮件。这样一来，错误一般都能当天发现并修正。</p>
<h3 id="Event-工具"><a href="#Event-工具" class="headerlink" title="Event 工具"></a>Event 工具</h3><p>在性能优化上，Wwise 中虽然有最大复音数限制机制，但有些时候会想从事件级别来做限制，比如三消游戏《Bejeweled》系列中的爆炸如不加限制会引爆上百个事件。RJ 于是把 Wwise 事件下的 Notes 这个属性当作标签字段来用，因为属性保存在事件所在的 WorkUnit（.wwu）文件中，于是他写了一个脚本工具在 Notes 中加入自定义的事件限制编码，设计师也可以在 Wwise 中进一步手动调整，然后工具会分析 .wwu 生成游戏程序可以读取的 metadata 作为事件限制的参考数据。</p>
<h3 id="动画配声用的工具"><a href="#动画配声用的工具" class="headerlink" title="动画配声用的工具"></a>动画配声用的工具</h3><p>在《Plants vs. Zombies: Heroes》中有 300 多个角色，每个角色有 5-20 个动画序列，所以手工配声工作量巨大。于是 RJ 写了一个 Unity UI 拓展能够改进这个流程，并能够自动比较 Unity 端登记的动画 Event 和 Wwise Authoring 端的 Event，保证 Unity 端登记的事件确实存在。</p>
<p>设计师往往喜欢把 Unity 的动画导出成视频文件然后到 DAW 中配声，但 Unity 没有这种导出支持。于是 RJ 写了工具自动导出动画成视频，方法是：将动画帧自动截屏成图片，再用开源命令行工具 <a href="https://ffmpeg.org" target="_blank" rel="external">ffmpeg</a> 将这些图片批量组装成视频文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一年一度的&lt;a href=&quot;http://www.migs16.com/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蒙特利尔国际游戏峰会 MIGS 2016版&lt;/a&gt;过去一阵子了，MIGS 在规模上无法跟 GDC 这样的老字号相提并论，不过每年还
    
    </summary>
    
      <category term="GameAudio" scheme="http://kakyoism.github.io/categories/GameAudio/"/>
    
    
      <category term="conference" scheme="http://kakyoism.github.io/tags/conference/"/>
    
      <category term="wwise" scheme="http://kakyoism.github.io/tags/wwise/"/>
    
      <category term="proceduralaudio" scheme="http://kakyoism.github.io/tags/proceduralaudio/"/>
    
      <category term="reverb" scheme="http://kakyoism.github.io/tags/reverb/"/>
    
      <category term="machinelearning" scheme="http://kakyoism.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>拙答知乎问题：如何评价《DOOM》(2016) 的关卡设计水平？</title>
    <link href="http://kakyoism.github.io/2016/12/26/%E6%8B%99%E7%AD%94%E7%9F%A5%E4%B9%8E%E9%97%AE%E9%A2%98%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AF%84%E4%BB%B7-DOOM-2016-%E7%9A%84%E5%85%B3%E5%8D%A1%E8%AE%BE%E8%AE%A1%E6%B0%B4%E5%B9%B3%EF%BC%9F/"/>
    <id>http://kakyoism.github.io/2016/12/26/拙答知乎问题：如何评价-DOOM-2016-的关卡设计水平？/</id>
    <published>2016-12-27T01:12:39.000Z</published>
    <updated>2017-01-07T22:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>回答这个知乎问题主要是想总结一下圣诞假期玩《DOOM》的感受，结果是不得不仔细考虑了一些没有进入意识的问题，并且不得不调查确认一些东西。果然也是一次学习，虽然很粗浅上不来台面（考虑到读者多半是玩家，所以简化了好些概念），但特留此作为笔记存档。</em> <a id="more"></a></p>
<ul>
<li>作者：北南</li>
<li>链接：<a href="https://www.zhihu.com/question/53570737/answer/137825836" target="_blank" rel="external">https://www.zhihu.com/question/53570737/answer/137825836</a></li>
<li>来源：知乎</li>
<li>著作权归作者所有，转载请联系作者获得授权。</li>
</ul>
<p>顶 @doomer3 的回答。 我并不是 FPS 死忠，也是游戏设计外行，但也算喜欢 ID 的 FPS 风格吧，所以从一个普通玩家的角度来随便聊聊正在单人通关途中的体会吧。非专业感觉脱离“关卡设计”之外的元素来谈“关卡设计”挺难的，所以可能会不时跑下题。</p>
<p>个人感觉总体上延续了 ID 这个公司关卡设计的特色，吸收了当代 FPS 关卡设计的主流理念，同时有所创新，大致算是新瓶装旧酒吧。在其他几位答主基础上补充几个体会（PS4）：</p>
<ol>
<li>《DOOM》（2016）的关卡设计在地形路线方面保留了《DOOM》系列峰回路转的特点，螺旋地形的设计在不影响新鲜感的同时对关卡整体面积作了限制，你会发现查看地图的时候不需要大量缩进操作就可以看清富含细节的全景。但和当年相比，可能因为手头资源多，并没有做（到）那种记忆中几乎有点“回文”味道的极限设计，我是没有什么意见啦。</li>
<li>战斗场景三维化扩大化。早期《DOOM》的特色就是所谓“回廊射击”（Corridor Shooter）的平面战斗（从 2.5D 到 初代 Xbox 上都是这样），虽然有垂直空间的元素，但敌人很少会充分利用空间地形来进攻玩家。其实《Quake》系列以及很多以前的 ID 游戏已经是有地形，但敌人一般也都是布置好的很少会主动改变位置利用三维地形来立体攻击。《DOOM》（2016）就不一样了，首先有了类似《Left 4 Dead》式高速移动、擅长攀爬跳跃、远近都能攻击的 Imps，那么关卡的战斗场景里面就会有各种集装箱堆和廊柱给这些敌人舞台，你会发现敌人很少从同一个空间高度来进攻你，战斗空间也比记忆中的 ID 游戏要开阔很多。</li>
<li>在战斗场景方面，还吸取了当前很多主流 FPS 和冒险游戏的爆炸物设计，在前期缺武器缺乏的时候，各种小战场都有足够利用的场景爆炸物比如油桶，这样就在鼓励刚正面的奖励机制上，进一步降低了主机上手柄瞄准的难度。并且《DOOM》（2016）里面的那些炸药桶是可以搬运的，所以在有些需要手动开启的打斗场景（比如需要按一些机器按钮才能引出的敌人），你有足够的时间用爆炸物仔细布阵来打出一些两三个连环爆炸就能解决一大票敌人的玩法来，配合上面说的三维场景化，布阵会显得更有深度。后期因为武器花式繁多，爆炸物的用处和乐趣就没有那么大了，不过后面人物能力可以升级成场景爆炸物不会炸伤自己，血少的时候有那么两个桶还是会有奇效的。</li>
<li>@doomer3 提到分支路线造成的冲淡主线的问题，这点可能见仁见智，追求最速通关加无双的玩家可能会发现节奏会有断续。我个人可能因为技术一般反而庆幸有这个设计：不少战斗没有像同类游戏那样严格限定任务区域（mission region）。到中后期战斗中间我经常需要回头补血和弹药，意外发现《DOOM》（2016）在这点上相当的宽容，到 1.09 版为止我在很多战斗中都可以中途回头狂捡垃圾，甚至脱身去打一个 Rune Trial 挑战迷你游戏之后回来再接着战斗都行（有种回家冲了个澡换了身衣服的感觉），虽然有些关键战斗是锁了门群殴的。题外话：从 Rune Trial 就可以看出，这里面有当代 AAA 游戏插入迷你游戏作为调剂或者技能练习的影响，比如《Far Cry 3》里面类似的 Rune 挑战就差不多是练各种武器的；《DOOM》（2016）的挑战赛在这基础上还给了装备升级的奖励。</li>
<li>像 @doomer3 说的，关卡设计突出探索乐趣。补充一点：这一代里面随着主角能力的改变在空间设计上有变化，跟以往我玩过的 ID 游戏最突出的区别就是两段跳的引入，我之前没有玩过有两段跳的第一人称游戏（虽然在第三人称中也是比较平常的设计），所以这个在我眼里是一个比较关键的微创新：ID 自己过去主要用电梯和《Quake III》开始的“弹床”这些道具来扩展垂直移动范围；同时代的 FPS 强调用载具比如《Far Cry 3》引入的滑翔翼来扩展活动范围，但主角肉身的行动能力是很受限制的。《DOOM》（2016）里有了两段跳之后，关卡的垂直和水平空间就迅速放大了，也进一步激发了人探索关卡的欲望，我很快就喜欢到各种看起来很高很远的边缘处玩命试两段跳是不是能够得着，然后摔死很多次！而且从高处往下跳也变得非常简单，有些“万丈”深渊你可以在落地前来一个第二段跳来缓冲（虽然这游戏大部分时候的关卡高度都设计成落地不怎么费血），有了这个技术你在垂直空间上寻找秘密的欲望就会很强烈。</li>
<li>再说说探索中的寻路。可能因为要保持《DOOM》系列的阴暗色调又不至于让玩家找不着北，跟 2.5D 时代相比，关卡从图像和声音上给了玩家大量微妙的寻路线索（ @李易航 ），这点其实和同时代的 FPS 或者一人称冒险游戏的手法是一致的。先说图像。比如可以跳跃攀爬的地方都有各种一对绿色小灯或者类似的发光物给予提示；各种入口和按键都有能和环境区分的小面积醒目色彩和光照表现，90 年代的 红／黄／蓝读卡器，在性能约束下完成了历史使命，但不免过于简单粗暴；目前的主机画面细节非常之多，所以视觉提示上要想同时做到“醒目”、不过分剧透而又“和谐”“有设计感”，《DOOM》以及现在主流的视效做法感觉是比较有效的。</li>
<li>接着图像再说关卡中的声音设计，基本上所有值得你看一眼的东西都做了精细的声音设计，因此有名堂的物品和区域往往都是发声体，你如果在留意视效的微妙设计基础上再用用耳朵，一般就能猜出其作用不寻常。除了这些静态的声音设计之外，玩家处在不同环境下会有相应的环境声学效果比如混响，能给玩家比较到位的飞船、山洞、大厅等环境的空间印象；声音的音量和频率会模拟物理上“近大远小”等衰减效果；发声体的声音在玩家经过时会根据玩家移动速度出现仿<a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/view/1805.htm" target="_blank" rel="external">多普勒效应</a>的变调处理，从而令玩家更容易发现这些物体 … 当然这些也是这个时代 AAA 游戏的标配了。《DOOM》（2016）用的就是<a href="https://link.zhihu.com/?target=https%3A//www.audiokinetic.com/products/wwise/" target="_blank" rel="external">音频引擎（中间件） Wwise</a> 来实现这些互动音频处理的。再说个关卡的题外话，一般游戏关卡中（其实是系统声音设计的结果）主角的脚步声一般都要精心设计，比如走或者跑，踩到什么材质都需要播放相应的声音，但 ID 的独特之处就是它旗下的主角是不怎么有脚步声的，这里除了跳跃落地时有以外平时一般走多快都听不到，这点可能只是那个年代的传统（包括《Duke Nukem 3D》）也可能是为了突出其它声音的一种设计选择（没有研究不好乱讲）。声音设计方面的细节可以参考 《DOOM》（2016）音频团队的访谈：<a href="https://link.zhihu.com/?target=https%3A//www.adsrsounds.com/news/the-sound-design-of-doom-exclusive-qa/" target="_blank" rel="external">The Sound Design Of《DOOM》- Exclusive Q&amp;A</a></li>
</ol>
<p>随便瞎聊了下，请多包涵～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;回答这个知乎问题主要是想总结一下圣诞假期玩《DOOM》的感受，结果是不得不仔细考虑了一些没有进入意识的问题，并且不得不调查确认一些东西。果然也是一次学习，虽然很粗浅上不来台面（考虑到读者多半是玩家，所以简化了好些概念），但特留此作为笔记存档。&lt;/em&gt;
    
    </summary>
    
      <category term="Gaming" scheme="http://kakyoism.github.io/categories/Gaming/"/>
    
    
      <category term="gaming" scheme="http://kakyoism.github.io/tags/gaming/"/>
    
      <category term="levelDesign" scheme="http://kakyoism.github.io/tags/levelDesign/"/>
    
  </entry>
  
  <entry>
    <title>第一天</title>
    <link href="http://kakyoism.github.io/2016/12/25/Hello-Hexo-%E4%BD%A0%E5%A5%BD-Hexo/"/>
    <id>http://kakyoism.github.io/2016/12/25/Hello-Hexo-你好-Hexo/</id>
    <published>2016-12-25T18:54:17.000Z</published>
    <updated>2017-01-08T22:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么开博？"><a href="#为什么开博？" class="headerlink" title="为什么开博？"></a>为什么开博？</h2><p>和广大技术博客动机类似吧：更好地学习和交流心得。</p>
<h2 id="选择-GitHub-的理由？"><a href="#选择-GitHub-的理由？" class="headerlink" title="选择 GitHub 的理由？"></a>选择 GitHub 的理由？</h2><p>为什么不用第三方服务呢？</p>
<ul>
<li><p><strong>网络写作平台寿命短。</strong>多年来博客服务走马灯地换，跟团的结果就是周期性搬家和断链。所以有必要自己把握本地内容和一套客户端发布工具，将来有变时就只用适配发布平台而不用担心保护内容了。</p>
</li>
<li><p><strong>第三方平台功能流程局限。</strong>传统发布平台依赖在线操作，迭代不方便，微信公众号还增加了很多限制比如刊物不能改名。程序员出身的我总想本地编辑测试、版本控制、迭代发布，并且琢磨出一键流程，让精力能完全集中在内容上。</p>
</li>
</ul>
<p>GitHub 这类代码托管网站支持按照软件开发流程来管理博客，通过纯文本标记格式比如 <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank" rel="external">Markdown</a> 写作存为本地文件，再通过 <a href="https://pages.github.com" target="_blank" rel="external">GitHub Pages</a> 这类系统发布，这种肥本地、瘦远程的流程容易迭代和备份，可以把握内容，定制管线，未来迁移会很方便。</p>
<h2 id="用什么工具发布？"><a href="#用什么工具发布？" class="headerlink" title="用什么工具发布？"></a>用什么工具发布？</h2><p>GitHub Pages 只是一个空架子，理想的流程中还需要找到<a href="https://en.wikipedia.org/wiki/Static_web_page" target="_blank" rel="external">静态站点</a>生成器来搭建内容管理和发布的管线（相对的动态站点因为依赖服务器端操作可以不考虑），目标是能集中写作。</p>
<p>我对工具的要求：</p>
<ul>
<li>支持 Markdown 写作。</li>
<li>上手快。</li>
<li>迭代速度快。</li>
</ul>
<p>于是断断续续测试了几个工具，终于落户到了 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 上。个人对 <a href="https://jekyllrb.com" target="_blank" rel="external">Jekyll</a>、<a href="https://gohugo.io" target="_blank" rel="external">Hugo</a> ，<a href="https://www.gitbook.com/@kakyoism/dashboard" target="_blank" rel="external">GitBook</a> 和 Hexo 的比较（此时此地调查的结论，未来发展恕不考虑）：</p>
<h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><ul>
<li><strong>优点：</strong>历史悠久，GitHub Pages 官方推荐的生成器，支持文档很多。</li>
<li><strong>缺点：</strong>操作繁琐，GitHub 页面生成速度慢，不易调试。</li>
<li><strong>结论：</strong>流程中太多技术细节。不采用。</li>
</ul>
<p>我跟着<a href="https://www.smashingmagazine.com/2014/08/build-blog-jekyll-github-pages/" target="_blank" rel="external">一个点击率较高的 Jekyll 的教程</a>，一开始照做没有成功，开始以为是我太小白，后来发现发一篇  Hello World 帖子居然花了 10 分钟才在 GitHub 远程更新完毕，之前会一直是 404。因为这个差点影响了对 GitHub 平台本身的信心。</p>
<h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><ul>
<li><strong>优点：</strong>支持 Markdown 写作，生成速度快，流程比 Pages 有所改善。</li>
<li><strong>缺点：</strong>操作繁琐，本地和远程发布的 UX 没有理顺，文档很不足。</li>
<li><strong>结论：</strong>上手不易，流程还是有冗余。不采用。</li>
</ul>
<p>Hugo 采用 GO 语言编写，卖点清晰（Make the Web Fun Again, Fast and Powerful 等等标语十分打眼），Google 上搜 Jekyll 替代品第一个出现就是它，立刻就被吸引住了。但跟随<a href="https://gohugo.io/overview/quickstart/" target="_blank" rel="external">官方的2分钟上手教程</a>以及补充的 <a href="https://gohugo.io/tutorials/github-pages-blog/" target="_blank" rel="external">GitHub 流程</a>做了一遍却还是没能在 GitHub 发布成功（404），配套的 Youtube 视频也没有解释 GitHub 的部分。我感觉 Hugo 没有仔细考虑用户发布博客的流程中哪些地方最需要自动化，而哪些地方需要仔细定制。具体体现在：Hugo 中的本地内容源和发布（public）文件夹需要用户分开用两套 git 分支 来管理。然而，用户只应该操心写作端的版本控制，完成后一键发布即可。GitHub 端的发布分支如果是在软件开发流程中需要用户维护那是情理之中，而在博客流程中则是多余的，应该变为黑盒才对。而 Hugo 的设计恰恰相反。这样一来，用户端的发布动作就太繁琐了。想象一下 git 本来就精深的合并、分支、树结构操作要乘以 2 … 。更糟糕的是，文档也没有讲清楚例子中的 GitHub 端 repo 设置。结局是承诺两分钟搞定的上手示例（往 GitHub 发布 Hello World 页面），我用了两个小时，各种 google 搜索后不幸还是没有搞定。自己以后在日常工作中也要避免类似的用户体验问题。</p>
<h3 id="GitBook"><a href="#GitBook" class="headerlink" title="GitBook"></a>GitBook</h3><ul>
<li><strong>优点：</strong>支持 Markdown，对书籍发布和软件文档有较好支持，和传统文档格式互动方便（PDF, MS WORD, Open Office），与出版业接轨。</li>
<li><strong>缺点：</strong>不是为博客而设计，博客流程不自然，主要支持手动 Web 发布。</li>
<li><strong>结论：</strong>不采用。</li>
</ul>
<p>因为有比较明显的缺点，虽然试都没试，不过如果有朝一日要发布系统研究成果且不需要大范围更新的话，GitBook 很合适。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><ul>
<li><strong>优点：</strong>支持 Markdown，生成速度快，本地-远程流程划分清晰。</li>
<li><strong>缺点：</strong>资源替换不直观。</li>
<li><strong>结论：</strong>采用。</li>
</ul>
<p>在测试过的系统中，只有 Hexo 做到了两分钟发布成功 Hello World 帖子。它做到了一键发布并且在默认流程中没有任何 git 操作：new, generate, server, deploy 四个命令基本上可以解决创作、本地测试、远程发布的迭代。在定制自由度上，将源内容的版本控制完全交由用户管理，不做自动化。这些安排让我觉得设计者在 UX 方面很贴心。<a href="https://malekbenz.com/blog/2016/09/10/Create-Host-Blog-for-free-with-Hexo-Github" target="_blank" rel="external">上手教程</a>和<a href="http://fizzylogic.nl/2016/01/09/Get-started-with-Hexo/" target="_blank" rel="external">其它教程</a>也比较到位，顾及了本地和远程的细节。但缺点也不是没有，替换已发布图片素材这些操作还是要在目录树中手动找到文件。但跟核心流程的便利相比都是小事。</p>
<h2 id="怎么写？"><a href="#怎么写？" class="headerlink" title="怎么写？"></a>怎么写？</h2><p>哪怕有了全自定义的管线，估计我的更新还是会很慢。不求数量，只求质量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么开博？&quot;&gt;&lt;a href=&quot;#为什么开博？&quot; class=&quot;headerlink&quot; title=&quot;为什么开博？&quot;&gt;&lt;/a&gt;为什么开博？&lt;/h2&gt;&lt;p&gt;和广大技术博客动机类似吧：更好地学习和交流心得。&lt;/p&gt;
&lt;h2 id=&quot;选择-GitHub-的理由？&quot;&gt;&lt;
    
    </summary>
    
      <category term="Writing" scheme="http://kakyoism.github.io/categories/Writing/"/>
    
    
      <category term="gitbook" scheme="http://kakyoism.github.io/tags/gitbook/"/>
    
      <category term="github" scheme="http://kakyoism.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://kakyoism.github.io/tags/hexo/"/>
    
      <category term="hugo" scheme="http://kakyoism.github.io/tags/hugo/"/>
    
      <category term="jekyll" scheme="http://kakyoism.github.io/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kakyoism.github.io/2016/12/25/hello-world/"/>
    <id>http://kakyoism.github.io/2016/12/25/hello-world/</id>
    <published>2016-12-25T18:48:45.000Z</published>
    <updated>2017-01-07T22:46:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.
    
    </summary>
    
    
  </entry>
  
</feed>
